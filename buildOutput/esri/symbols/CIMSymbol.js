// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../chunks/tslib.es6","../core/lang","../core/string","../core/accessorSupport/decorators/property","../core/has","../core/Logger","../core/accessorSupport/decorators/enumeration","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../core/accessorSupport/decorators/writer","../layers/support/fieldUtils","./Symbol"],function(e,r,t,o,a,s,c,d,i,l,n,p,u){"use strict";var y;return e.default=y=class extends u{constructor(e){super(e),this.data=null,this.type="cim"}readData(e,r){return r}writeData(e,r){Object.assign(r,e)}async collectRequiredFields(e,r){if("CIMSymbolReference"===this.data?.type){const t=this.data.primitiveOverrides;if(t){const o=t.map(t=>{const o=t.valueExpressionInfo;return o?p.collectArcadeFieldNames(e,r,o.expression):null});await Promise.all(o)}}}clone(){return new y({data:t.clone(this.data)})}hash(){return o.numericHash(JSON.stringify(this.data)).toString()}},r.__decorate([a.property({json:{write:!1}})],e.default.prototype,"color",void 0),r.__decorate([a.property({json:{write:!0}})],e.default.prototype,"data",void 0),r.__decorate([i.reader("data",["symbol"])],e.default.prototype,"readData",null),r.__decorate([n.writer("data",{})],e.default.prototype,"writeData",null),r.__decorate([d.enumeration({CIMSymbolReference:"cim"},{readOnly:!0})],e.default.prototype,"type",void 0),e.default=y=r.__decorate([l.subclass("esri.symbols.CIMSymbol")],e.default),e.default});