// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../geometry/GeometryCursor","../../geometry/support/TileClipper","./utils"],function(e,r,t,o,i){"use strict";const s=i.importLazily(()=>new Promise((r,t)=>e(["../../geometry/operators/json/bufferOperator"],r,t))),n=i.importLazily(()=>new Promise((r,t)=>e(["../../geometry/operators/json/convexHullOperator"],r,t))),m=i.importLazily(()=>new Promise((r,t)=>e(["../../geometry/operators/json/lengthOperator"],r,t))),l=i.importLazily(()=>new Promise((r,t)=>e(["../../geometry/operators/json/generalizeOperator"],r,t))),a=i.importLazily(()=>new Promise((r,t)=>e(["../../geometry/operators/json/offsetOperator"],r,t))),p=i.importLazily(()=>new Promise((r,t)=>e(["../../geometry/operators/json/simplifyOperator"],r,t)));let f;r.SimpleEffectCursor=class{constructor(e){this._geometry=e}next(){const e=this._geometry;return this._geometry=null,e}},r.clipCursorToTileExtent=function(e,r,i){if(!e)return null;f||(f=new o.TileClipper(0,0,0,1));const s=i?-1:1,n="esriGeometryPolygon"===e.geometryType,m=n?3:2,l=n?3:2;let a,p;for(f.reset(m),f.setPixelMargin(r+1),f.setExtent(512);e.nextPath();)if(!(e.pathSize<l)){for(e.nextPoint(),a=e.x,p=s*e.y,f.moveTo(a,p);e.nextPoint();)a=e.x,p=s*e.y,f.lineTo(a,p);n&&f.close()}const y=f.result(!1);if(y){const r=t.GeometryCursor.createEmptyOptimizedCIM(e.geometryType);for(const e of y){r.startPath();for(const t of e)r.pushXY(t.x,s*t.y)}return r.reset(),r}return null},r.lazyBufferOperator=s,r.lazyConvexHullOperator=n,r.lazyGeneralizeOperator=l,r.lazyLengthOperator=m,r.lazyOffsetOperator=a,r.lazySimplifyOperator=p,r.loadGeometryOperatorsForEffect=function(e){switch(e.type){case"CIMGeometricEffectDonut":case"CIMGeometricEffectBuffer":return s.getImportPromise();case"CIMGeometricEffectEnclosingPolygon":return n.getImportPromise();case"CIMGeometricEffectOffset":return a.getImportPromise();case"CIMGeometricEffectTaperedPolygon":return Promise.all([p.getImportPromise(),m.getImportPromise(),l.getImportPromise()]);default:return Promise.resolve()}},Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});