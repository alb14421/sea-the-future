// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/Error","../../../core/Logger","../../../core/promiseUtils","../../../geometry/Extent","../../../geometry/projectionUtils","../../../geometry/operators/projectOperator","../../../geometry/support/aaBoundingRect","../../ElevationLayer","../../ImageryLayer","../../ImageryTileLayer","../core/utils","../../support/ElevationSampler","../../support/ElevationTile","../../support/ElevationTileData","../../support/RasterFunction","../../support/TileInfo","../../support/TileKey","../../../rest/imageService","../../../rest/support/ImageIdentifyParameters","../../../support/requestPresets","../../../widgets/OrientedImageryViewer/utils"],function(e,t,r,a,n,i,o,s,l,c,u,p,f,m,y,g,v,w,d,E,h,R){"use strict";async function S(e,t,r){await a.waitTick(r);const n=function(e,t){return async r=>{let a=r.clone();const n=r.spatialReference.equals(e.spatialReference)?a:await i.projectWithZConversion(r,e.spatialReference,t),o=e.queryElevation(n);return o&&(a=r.spatialReference.equals(e.spatialReference)?o.clone():await i.projectWithZConversion(o,r.spatialReference,t)),a.z=a.z??1,a}}(t,r),o=Array.isArray(e)?e:[e];return await Promise.all(o.map(n))}const x=async(e,t)=>{let n;const{extent:i,rasterFunction:o,url:s,lod:l}=e;try{n=await L(s)}catch(e){if(a.isAbortError(e))return;r.getLogger("esri.layers.orientedImagery.transformations").error("updateElevationUsingElevationSource",e)}switch(n){case 0:return await I(s,i,o,t);case 1:return await T(s,i,l,t);default:return}};async function T(e,t,n,i){const o=new l(e);let s;try{const{tileInfo:e}=await o.load(),r=(n&&e.lodAt(Math.min(e.lods.length-1,n))?.resolution)??"finest-contiguous";s=await o.createElevationSampler(t,{...i,demResolution:r})}catch(e){if(a.isAbortError(e))return;r.getLogger(o).error(e)}finally{o.destroy()}return s}async function I(e,t,r,a){const i=r?new g({functionName:r}):void 0,l=new c({url:e,rasterFunction:i,format:"lerc"});await l.load(a);const u=512,p=t.center,d=Math.max(t.width,t.height);let E=new n({xmin:p.x-d/2,ymin:p.y-d/2,xmax:p.x+d/2,ymax:p.y+d/2,spatialReference:t.spatialReference});l.spatialReference.equals(E.spatialReference)||(await o.load(),E=o.execute(E,l.spatialReference));const h=await l.fetchPixels(E,u,u,a),R=v.create({scales:[d/u],size:u,spatialReference:E.spatialReference}),S=new w.TileKey(null,0,0,0,s.fromExtent(E)),x=new y.ElevationTileData(h.pixelBlock.pixels[0],u,u,0),T=new m.ElevationTile(S,x);return new f.TileElevationSampler(T,R,void 0)}async function L(e,r){await a.waitTick(r);const n=await h.fetchArcGISServiceJSON(e),{tileInfo:i,cacheType:o}=n;if(!n.hasOwnProperty("bandCount")||!n.hasOwnProperty("pixelSizeX"))throw new t("elevation-source:invalid-service-url",`ElevationSource URL expects an elevation 3D image service but given ${e}`);return i?"LERC"!==i?.format?.toUpperCase()||o&&"elevation"!==o.toLowerCase()?2:1:0}e.getElevationSampler=x,e.getElevationSamplerFromDynamicImageService=I,e.getElevationSamplerFromElevationLayer=T,e.updateUsingAverageGroundElevation=function(e,t){const{averageGroundElevation:r,spatialReference:a}=t,n=p.getMetersPerUnitOfSR(a);return e.map(e=>{const t=e.clone();return t.z=r*n/e.spatialReference.metersPerUnit,t})},e.updateUsingConstant=async function(e,t,r){return await a.waitTick(r),e.map(e=>(e.z=t,e))},e.updateUsingElevationSampler=S,e.updateUsingElevationSource=async function(e,r,a){if(!r.extent||!r.url)throw R.logAndThrow("esri.layer.orientedImagery.transformations",new t("update-elevation:missing-property","both extent and url are required to create a sampler",r));const n=await x(r);if(!n)throw R.logAndThrow("esri.layers.orientedImagery.transformations",new t("update-elevation:elevation-source","could not create a sampler using provided elevation source",r));return S(e,n,a)},e.updateZfromService=async function(e,t,n){const{url:i,rasterFunction:o}=t;let s;try{s=await L(i,n)}catch(e){a.isAbortError(e)||r.getLogger("esri.layers.orientedImagery.transformations").error(e)}switch(s){case 1:case 0:{const t=await d.identify(i,new E({geometry:e,rasterFunction:o?new g({functionName:o}):void 0}));if(t.value?.[0]){const r=e.clone();return r.z=+t.value[0],r}break}case 2:{const t=new u(i,n);await t.load();const r=await t.identify(e,n);if(r.value?.[0]){const t=e.clone();return t.z=+r.value[0],t}break}}return e},e.validateElevationSourceURL=L,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});