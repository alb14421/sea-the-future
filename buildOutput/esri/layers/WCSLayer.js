// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","../chunks/tslib.es6","../PopupTemplate","../core/Clonable","../core/Error","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/reactiveUtils","../core/accessorSupport/decorators/property","../core/has","../core/Logger","../core/RandomLCG","../core/accessorSupport/decorators/subclass","./Layer","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/ImageryTileMixin","./mixins/OperationalLayer","./mixins/PortalLayer","./mixins/RasterJobHandlerMixin","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","./mixins/TemporalLayer","./support/commonProperties","./support/Field","./support/rasterFieldUtils","./support/rasterDatasets/WCSRaster","../support/popupUtils"],function(e,r,t,o,s,i,a,n,l,p,d,c,u,y,h,m,v,g,f,_,I,b,w,x,P,S,L,O){"use strict";const R=new Set(["milliseconds","seconds","minutes","hours","days","weeks","months","years","decades","centuries"]);let T=class extends(h.BlendLayer(b.ScaleRangeLayer(g.OperationalLayer(f.PortalLayer(m.CustomParametersMixin(v.ImageryTileMixin(_.RasterJobHandlerMixin(w.TemporalLayer(I.RefreshableLayer(i.MultiOriginJSONMixin(o.ClonableMixin(y)))))))))))){constructor(...r){super(...r),this.coverageId=null,this.version=null,this.isReference=null,this.legendEnabled=!0,this.noData=0,this.operationalLayerType="WCS",this.type="wcs",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this._debouncedSaveOperations=a.debounce(async(r,t,o)=>{const{save:s,saveAs:i}=await new Promise((r,t)=>e(["./save/imageryUtils"],r,t));switch(r){case 0:return s(this,t);case 1:return i(this,o,t)}})}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["WCS"]},e).catch(a.throwIfAbortError).then(()=>this._openRaster(r))),Promise.resolve(this)}get renderer(){return super.renderer}set renderer(e){super.renderer=e}get coverageInfo(){return this.raster.coverageInfo}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[S.getServicePixelValueField("Pixel Value")],r=this.raster?.rasterInfo??this.serviceRasterInfo,t=r?.multidimensionalInfo;if(t){const r=S.getMultidimensionalFields(t);e.push(...r)}return e}createPopupTemplate(e){return O.createPopupTemplate({fields:this.rasterFields,title:this.title},e)}async save(e){return this._debouncedSaveOperations(0,e)}async saveAs(e,r){return this._debouncedSaveOperations(1,r,e)}async _openRaster(e){const r=new L({url:this.url,version:this.version,coverageId:this.coverageId,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters}});if(await r.open({signal:e}),!r.rasterInfo)throw r.destroy(),new s("wcs-layer:load","cannot load resources on "+this.url);const{rasterInfo:t}=r;null==t.noDataValue&&(t.noDataValue=this.noData),this._set("serviceRasterInfo",t),this._set("spatialReference",t.spatialReference),null==this.title&&this.setAtOrigin("title",r.datasetName,"service"),null==this.coverageId&&this.setAtOrigin("coverageId",r.coverageInfo.id,"service"),null==this.version&&r.version&&this.setAtOrigin("version",r.version,"service"),this.setAtOrigin("tileInfo",r.rasterInfo.storageInfo.tileInfo,"service");const{multidimensionalInfo:o}=t;if(null!=o){const e=o.variables[0].dimensions.find(({name:e})=>"StdTime"===e);if(e){let r=e.extent?.[0]??e.values[0];Array.isArray(r)&&(r=r[0]);let t=e.extent?.[1]??e.values[e.values.length-1];Array.isArray(t)&&(t=t[1]);const o=R.has(e.intervalUnit?.toLowerCase())?e.intervalUnit?.toLowerCase():null;this.set("timeInfo",{startField:"StdTime",fullTimeExtent:{start:r,end:t},timeZone:null,interval:o?{value:e.interval,unit:o}:null})}}this.raster=r,this._configDefaultSettings(),this.addHandles(n.watch(()=>this.customParameters,e=>this.raster.ioConfig.customFetchParameters=e))}};return r.__decorate([l.property({type:String,nonNullable:!0,json:{name:"wcsInfo.coverageId",write:{isRequired:!0,ignoreOrigin:!0}}})],T.prototype,"coverageId",void 0),r.__decorate([l.property()],T.prototype,"coverageInfo",null),r.__decorate([l.property({type:["1.0.0","1.1.0","1.1.1","1.1.2","2.0.1"],nonNullable:!0,json:{name:"wcsInfo.version",write:{isRequired:!0,ignoreOrigin:!0}}})],T.prototype,"version",void 0),r.__decorate([l.property({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],T.prototype,"isReference",void 0),r.__decorate([l.property({json:{read:!0,write:!0}})],T.prototype,"blendMode",void 0),r.__decorate([l.property(x.legendEnabled)],T.prototype,"legendEnabled",void 0),r.__decorate([l.property({type:["show","hide"]})],T.prototype,"listMode",void 0),r.__decorate([l.property()],T.prototype,"noData",void 0),r.__decorate([l.property({type:["WCS"]})],T.prototype,"operationalLayerType",void 0),r.__decorate([l.property()],T.prototype,"raster",void 0),r.__decorate([l.property({readOnly:!0})],T.prototype,"type",void 0),r.__decorate([l.property(x.popupEnabled)],T.prototype,"popupEnabled",void 0),r.__decorate([l.property({type:t,json:{name:"popupInfo",write:!0}})],T.prototype,"popupTemplate",void 0),r.__decorate([l.property({readOnly:!0})],T.prototype,"defaultPopupTemplate",null),r.__decorate([l.property({readOnly:!0,type:[P]})],T.prototype,"fields",void 0),r.__decorate([l.property({readOnly:!0,type:[P]})],T.prototype,"rasterFields",null),T=r.__decorate([u.subclass("esri.layers.WCSLayer")],T),T});