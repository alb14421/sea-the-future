// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../request","../../core/Error","../../core/iteratorUtils","../../core/urlUtils","../../geometry/Extent","../../geometry/projectionUtils","../../geometry/SpatialReference","../../geometry/support/spatialReferenceUtils","../../geometry/support/typeUtils","../graphics/sources/geojson/geojson","./xmlUtils","../support/arcgisLayerUrl","../support/Field","../support/fieldUtils"],function(e,t,r,a,n,i,o,s,u,p,l,c,y,f,d){"use strict";const m="xlink:href",g="2.0.0",w="__esri_wfs_id__",b="wfs-layer:feature-type-not-found",T="wfs-layer:unknown-geometry-type";function F(e){const t=M(e);!function(e){const t=e.firstElementChild?.getAttribute("version");if(t&&t!==g)throw new r("wfs-layer:unsupported-wfs-version",`Unsupported WFS version ${t}. Supported version: ${g}`)}(t),j(t);const n=t.firstElementChild,o=a.cache((s=n,c.iterateXML(s,{FeatureTypeList:{FeatureType:e=>{const t={typeName:"undefined:undefined",name:"",title:"",description:"",extent:null,namespacePrefix:"",namespaceUri:"",defaultSpatialReference:4326,supportedSpatialReferences:[]},r=new Set;return c.visitXML(e,{Name:e=>{const{name:r,prefix:a}=U(e.textContent);t.typeName=`${a}:${r}`,t.name=r,t.namespacePrefix=a,t.namespaceUri=e.lookupNamespaceURI(a)},Abstract:e=>{t.description=e.textContent},Title:e=>{t.title=e.textContent},WGS84BoundingBox:e=>{t.extent=i.fromJSON(function(e){let t,r,a,n;for(const i of e.children)switch(i.localName){case"LowerCorner":[t,r]=i.textContent.split(" ").map(e=>Number.parseFloat(e));break;case"UpperCorner":[a,n]=i.textContent.split(" ").map(e=>Number.parseFloat(e))}return{xmin:t,ymin:r,xmax:a,ymax:n,spatialReference:u.wgs84}}(e))},DefaultCRS:e=>{const a=C(e);a&&(t.defaultSpatialReference=a,r.add(a))},OtherCRS:e=>{const t=C(e);t&&r.add(t)}}),t.title||(t.title=t.name),r.add(4326),t.supportedSpatialReferences.push(...r),t}}})));var s;return{operations:x(n),get featureTypes(){return Array.from(o())},readFeatureTypes:o}}const h=["json","application/json; subtype=geojson; charset=utf-8","application/json; subtype=geojson","application/json","geojson","application/geo+json"];function S(e){for(const t of h){const r=e.findIndex(e=>e.toLowerCase()===t);if(r>=0)return e[r]}return null}function x(e){let t=!0;const a={GetCapabilities:{url:""},DescribeFeatureType:{url:""},GetFeature:{url:"",outputFormat:null,supportsPagination:!1}},n=[],i=[];if(c.visitXML(e,{OperationsMetadata:{Parameter:e=>{if("outputformat"===e.getAttribute("name")?.toLowerCase())return{AllowedValues:{Value:({textContent:e})=>{e&&n.push(e)}}}},Operation:e=>{switch(e.getAttribute("name")){case"GetCapabilities":return{DCP:{HTTP:{Get:e=>{a.GetCapabilities.url=e.getAttribute(m)}}}};case"DescribeFeatureType":return{DCP:{HTTP:{Get:e=>{a.DescribeFeatureType.url=e.getAttribute(m)}}}};case"GetFeature":return{DCP:{HTTP:{Get:e=>{a.GetFeature.url=e.getAttribute(m)}}},Parameter:e=>{if("outputformat"===e.getAttribute("name")?.toLowerCase())return{AllowedValues:{Value:({textContent:e})=>{e&&i.push(e)}}}}}}},Constraint:e=>{switch(e.getAttribute("name")){case"KVPEncoding":return{DefaultValue:e=>{t="true"===e.textContent.toLowerCase()}};case"ImplementsResultPaging":return{DefaultValue:e=>{a.GetFeature.supportsPagination="true"===e.textContent.toLowerCase()}}}}}}),a.GetFeature.outputFormat=S(i)??S(n),!t)throw new r("wfs-layer:kvp-encoding-not-supported","WFS service doesn't support key/value pair (KVP) encoding");if(null==a.GetFeature.outputFormat)throw new r("wfs-layer:geojson-not-supported","WFS service doesn't support GeoJSON output format");return a}function C(e){const t=parseInt(e.textContent?.match(/(?<wkid>\d+$)/i)?.groups?.wkid??"",10);if(!Number.isNaN(t))return t}function R(e,t,r){return a.find(e,e=>r?e.name===t&&e.namespaceUri===r:e.typeName===t||e.name===t)}async function E(e,t,a,n={}){const i=e.readFeatureTypes(),p=t?R(i,t,a):i.next().value,{spatialReference:l=new s({wkid:p?.defaultSpatialReference})}=n;if(null==p)throw t?new r(b,`The type '${t}' could not be found in the service`):new r("wfs-layer:empty-service","The service is empty");let c=p.extent;if(c&&!u.equals(c.spatialReference,l))try{await o.initializeProjection(c.spatialReference,l,void 0,n),c=o.project(c,l)}catch{throw new r("wfs-layer:unsupported-spatial-reference","Projection not supported")}return{extent:c,spatialReference:l,featureType:p}}function P(e){const t=e.find(e=>"geometry"===e.type);let r=e.find(e=>"oid"===e.type);return e=e.filter(e=>"geometry"!==e.type),r||(r=new f({name:w,type:"oid",alias:w}),e.unshift(r)),{geometryField:t?.name??null,objectIdField:r.name,fields:e}}async function k(e,r,a,n={}){let i,o=!1;const[s,u]=await Promise.all([G(e.operations.GetFeature.url,r,a,e.operations.GetFeature.outputFormat,{...n,count:1}),t(e.operations.GetFeature.url,{responseType:"text",query:N(r,a,void 0,{...n,count:1}),signal:n?.signal})]),c="FeatureCollection"===s.type&&s.features[0]?.geometry;if(c){let e;switch(i=p.featureGeometryTypeKebabDictionary.fromJSON(l.getGeometryType(c.type)),c.type){case"Point":e=c.coordinates;break;case"LineString":case"MultiPoint":e=c.coordinates[0];break;case"MultiLineString":case"Polygon":e=c.coordinates[0][0];break;case"MultiPolygon":e=c.coordinates[0][0][0]}const t=/<[^>]*pos[^>]*> *(-?\d+(?:\.\d+)?) (-?\d+(?:\.\d+)?)/.exec(u.data);if(t){const r=e[0].toFixed(3),a=e[1].toFixed(3),n=parseFloat(t[1]).toFixed(3);r===parseFloat(t[2]).toFixed(3)&&a===n&&(o=!0)}}return{geometryType:i,swapXY:o}}async function L(e,r,a){return A(r,(await t(e,{responseType:"text",query:{SERVICE:"WFS",REQUEST:"DescribeFeatureType",VERSION:g,TYPENAME:r,TYPENAMES:r,...a?.customParameters},signal:a?.signal})).data)}function A(e,t){const{name:n}=U(e),i=M(t);j(i);const o=a.find(c.iterateXML(i.firstElementChild,{element:e=>e}),e=>e.getAttribute("name")===n);if(null!=o){const e=o.getAttribute("type"),t=e?a.find(c.iterateXML(i.firstElementChild,{complexType:e=>e}),t=>t.getAttribute("name")===U(e).name):a.find(c.iterateXML(o,{complexType:e=>e}),()=>!0);if(t)return function(e){const t=[],a=[];let n;const i=c.iterateXML(e,{complexContent:{extension:{sequence:{element:e=>e}}}});for(const o of i){const i=o.getAttribute("name");if(!i)continue;let s,u;if(o.hasAttribute("type")?s=U(o.getAttribute("type")).name:c.visitXML(o,{simpleType:{restriction:e=>(s=U(e.getAttribute("base")).name,{maxLength:e=>{u=+e.getAttribute("value")}})}}),!s)continue;const p="true"===o.getAttribute("nillable");let l=!1;switch(s.toLowerCase()){case"integer":case"nonpositiveinteger":case"negativeinteger":case"long":case"int":case"short":case"byte":case"nonnegativeinteger":case"unsignedlong":case"unsignedint":case"unsignedshort":case"unsignedbyte":case"positiveinteger":a.push(new f({name:i,alias:i,type:"integer",nullable:p,length:d.getFieldDefaultLength("integer")}));break;case"float":case"double":case"decimal":a.push(new f({name:i,alias:i,type:"double",nullable:p,length:d.getFieldDefaultLength("double")}));break;case"boolean":case"string":case"gyearmonth":case"gyear":case"gmonthday":case"gday":case"gmonth":case"anyuri":case"qname":case"notation":case"normalizedstring":case"token":case"language":case"idrefs":case"entities":case"nmtoken":case"nmtokens":case"name":case"ncname":case"id":case"idref":case"entity":case"duration":case"time":a.push(new f({name:i,alias:i,type:"string",nullable:p,length:u??d.getFieldDefaultLength("string")}));break;case"datetime":case"date":a.push(new f({name:i,alias:i,type:"date",nullable:p,length:u??d.getFieldDefaultLength("date")}));break;case"pointpropertytype":n="point",l=!0;break;case"multipointpropertytype":n="multipoint",l=!0;break;case"curvepropertytype":case"multicurvepropertytype":case"multilinestringpropertytype":n="polyline",l=!0;break;case"surfacepropertytype":case"multisurfacepropertytype":case"multipolygonpropertytype":n="polygon",l=!0;break;case"geometrypropertytype":case"multigeometrypropertytype":l=!0,t.push(new r(T,`geometry type '${s}' is not supported`,{type:(new XMLSerializer).serializeToString(e)}));break;default:t.push(new r("wfs-layer:unknown-field-type",`Unknown field type '${s}'`,{type:(new XMLSerializer).serializeToString(e)}))}l&&a.push(new f({name:i,alias:i,type:"geometry",nullable:p}))}for(const e of a)if("integer"===e.type&&!e.nullable&&v.has(e.name.toLowerCase())){e.type="oid";break}return{geometryType:n,fields:a,errors:t}}(t)}throw new r(b,`Type '${e}' not found in document`,{document:(new XMLSerializer).serializeToString(i)})}const v=new Set(["objectid","fid"]);async function G(e,a,n,i,o){let{data:s}=await t(e,{responseType:"text",query:N(a,n,i,o),signal:o?.signal});s=s.replaceAll(/": +(-?\d+),(\d+)(,)?/g,'": $1.$2$3');try{return JSON.parse(s)}catch(e){throw new r("wfs-layer:malformed-json","Error while parsing theÂ response",{response:s,error:e})}}function N(e,t,r,a){const n="number"==typeof t?t:t.wkid;return{SERVICE:"WFS",REQUEST:"GetFeature",VERSION:g,TYPENAMES:e,OUTPUTFORMAT:r,SRSNAME:"EPSG:"+n,STARTINDEX:a?.startIndex,COUNT:a?.count,...a?.customParameters}}function M(e){return(new DOMParser).parseFromString(e.trim(),"text/xml")}function U(e){const[t,r]=e.split(":");return{prefix:r?t:"",name:r??t}}function j(e){let t="",a="";if(c.visitXML(e.firstElementChild,{Exception:e=>(t=e.getAttribute("exceptionCode"),{ExceptionText:e=>{a=e.textContent}})}),t)throw new r(`wfs-layer:${t}`,a)}function D(e,t,r){const a={wkid:t.defaultSpatialReference},n=null!=r?.wkid?{wkid:r.wkid}:a;return{spatialReference:n,getFeatureSpatialReference:y.isArcGISUrl(e)||n.wkid&&t.supportedSpatialReferences.includes(n.wkid)?{wkid:n.wkid}:{wkid:t.defaultSpatialReference}}}e.describeFeatureType=L,e.findFeatureType=R,e.getCapabilities=async function(e,r){const a=F((await t(e,{responseType:"text",query:{SERVICE:"WFS",REQUEST:"GetCapabilities",VERSION:g,...r?.customParameters},signal:r?.signal})).data);return function(e,t){n.isHTTPSProtocol(e)&&(n.hasSameOrigin(e,t.operations.DescribeFeatureType.url,!0)&&(t.operations.DescribeFeatureType.url=n.toHTTPS(t.operations.DescribeFeatureType.url)),n.hasSameOrigin(e,t.operations.GetFeature.url,!0)&&(t.operations.GetFeature.url=n.toHTTPS(t.operations.GetFeature.url)))}(e,a),a},e.getFeature=G,e.getFeatureCount=async function(e,r,a){const n=await t(e,{responseType:"text",query:{SERVICE:"WFS",REQUEST:"GetFeature",VERSION:g,TYPENAMES:r,RESULTTYPE:"hits",...a?.customParameters},signal:a?.signal}),i=/numberMatched=["'](?<numberMatched>\d+)["']/gi.exec(n.data);if(i?.groups)return+i.groups.numberMatched},e.getFeatureTypeInfo=E,e.getGetFeatureSpatialReference=D,e.getWFSLayerInfo=async function(e,t,a,n={}){const{featureType:i,extent:o}=await E(e,t,a,n),{spatialReference:u}=D(e.operations.GetFeature.url,i,n.spatialReference),{fields:p,geometryType:l,swapXY:c,objectIdField:y,geometryField:f}=await async function(e,t,a,n={}){const{typeName:i}=t,[o,s]=await Promise.allSettled([L(e.operations.DescribeFeatureType.url,i,n),k(e,i,a,n)]),u=e=>new r("wfs-layer:getWFSLayerTypeInfo-error",`An error occurred while getting info about the feature type '${i}'`,{error:e});if("rejected"===o.status)throw u(o.reason);if("rejected"===s.status)throw u(s.reason);const{fields:p,errors:l}=o.value??{},c=o.value?.geometryType||s.value?.geometryType,y=s.value?.swapXY??!1;if(null==c)throw new r(T,`The geometry type could not be determined for type '${i}`,{typeName:i,geometryType:c,fields:p,errors:l});return{...P(p??[]),geometryType:c,swapXY:y}}(e,i,u,n);return{url:e.operations.GetCapabilities.url,name:i.name,namespaceUri:i.namespaceUri,fields:p,geometryField:f,geometryType:l,objectIdField:y,spatialReference:n.spatialReference??new s({wkid:i.defaultSpatialReference}),extent:o,swapXY:c,wfsCapabilities:e,customParameters:n.customParameters}},e.parseDescribeFeatureTypeResponse=A,e.parseGetCapabilitiesResponse=F,e.prepareWFSLayerFields=P,e.wfsOidFieldName=w,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});