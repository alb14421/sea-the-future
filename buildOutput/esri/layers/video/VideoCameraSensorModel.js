// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/tslib.es6","../../core/Accessor","../../core/accessorSupport/decorators/property","../../core/has","../../core/Logger","../../core/RandomLCG","../../core/accessorSupport/decorators/subclass","../../core/libs/gl-matrix-2/factories/mat3f64","../../core/libs/gl-matrix-2/factories/vec3f64","../../core/libs/gl-matrix-2/math/mat3","../../chunks/vec32","../../geometry/Point","../../geometry/SpatialReference","../../geometry/spatialReferenceEllipsoidUtils","../../geometry/projection/projectBuffer","../../geometry/support/Ellipsoid","./videoUtils"],function(t,e,a,o,r,i,s,l,n,d,h,u,c,g,p,m,f,v){"use strict";const _=Math.PI/180;return t.default=class extends a{constructor(t){super(),this.averageElevation=0,this.imageHeight=0,this.imageWidth=0,this.metadataSupportsTransforms=!1,this.platformHeadingAngle=0,this.platformPitchAngle=0,this.platformRollAngle=0,this.sensorHeadingAngle=0,this.sensorAltitude=0,this.sensorHorizontalFieldOfView=0,this.sensorLatitude=0,this.sensorLongitude=0,this.sensorPitchAngle=0,this.sensorRollAngle=0,this.sensorVerticalFieldOfView=0,this.vttMetadata=new Map,this._createMat3FromValues=t=>{const e=t[0],a=t[1],o=t[2];return n.fromValues(e[0],a[0],o[0],e[1],a[1],o[1],e[2],a[2],o[2])},this._multiplyMat3=(t,e)=>{const a=n.create();return h.multiply(a,t,e),a},this._transposeMat3=t=>{const e=n.create();return h.transpose(e,t),e},this._calculateCameraFovForward=()=>this._createMat3FromValues([[0,0,1],[Math.tan(.5*this.sensorHorizontalFieldOfView*_),0,0],[0,Math.tan(.5*this.sensorVerticalFieldOfView*_),0]]),this._calculateCameraFovReverse=()=>this._createMat3FromValues([[0,1/Math.tan(.5*this.sensorHorizontalFieldOfView*_),0],[0,0,1/Math.tan(.5*this.sensorVerticalFieldOfView*_)],[1,0,0]]),this._calculateCameraLook=()=>this._getRotationMatrixZYX(this.sensorHeadingAngle*_,this.sensorPitchAngle*_,this.sensorRollAngle*_),this._calculateImageDimensionsForward=()=>this._createMat3FromValues([[2/this.imageWidth,0,-1],[0,-2/this.imageHeight,-1],[0,0,1]]),this._calculateImageDimensionsReverse=()=>this._createMat3FromValues([[this.imageWidth/2,0,this.imageWidth/2],[0,-this.imageHeight/2,-this.imageHeight/2],[0,0,1]]),this._calculatePlatformPositionMatrix=()=>{const t=Math.sin(this.sensorLatitude*_),e=Math.cos(this.sensorLatitude*_),a=Math.sin(this.sensorLongitude*_),o=Math.cos(this.sensorLongitude*_);return this._createMat3FromValues([[-t*o,-a,-e*o],[-t*a,o,-e*a],[e,0,-t]])},this._calculatePlatformOrientation=()=>this._getRotationMatrixZYX(this.platformHeadingAngle*_,this.platformPitchAngle*_,this.platformRollAngle*_),this._extractValues=t=>{this.imageWidth=t.get(v.videoMetadataEntryId.EsriVideoWidth)?.value,this.imageHeight=t.get(v.videoMetadataEntryId.EsriVideoHeight)?.value;const e=t.get(v.videoMetadataEntryId.SensorEllipsoidHeight)?.value;this.sensorAltitude=e??t.get(v.videoMetadataEntryId.SensorTrueAltitude)?.value,this.sensorLatitude=t.get(v.videoMetadataEntryId.SensorLatitude)?.value,this.sensorLongitude=t.get(v.videoMetadataEntryId.SensorLongitude)?.value,this.sensorHeadingAngle=t.get(v.videoMetadataEntryId.SensorAzimuthAngle)?.value,this.sensorPitchAngle=t.get(v.videoMetadataEntryId.SensorElevationAngle)?.value,this.sensorRollAngle=t.get(v.videoMetadataEntryId.SensorRollAngle)?.value,this.sensorHorizontalFieldOfView=t.get(v.videoMetadataEntryId.SensorHorizontalFOV)?.value,this.sensorVerticalFieldOfView=t.get(v.videoMetadataEntryId.SensorVerticalFOV)?.value,this.platformHeadingAngle=t.get(v.videoMetadataEntryId.PlatformHeadingAngle)?.value,this.platformPitchAngle=t.get(v.videoMetadataEntryId.PlatformPitchAngle)?.value,this.platformRollAngle=t.get(v.videoMetadataEntryId.PlatformRollAngle)?.value,this.averageElevation=t.get(v.videoMetadataEntryId.FrameCenterElevation)?.value||0},this._getRotationMatrixZYX=(t,e,a)=>{const o=Math.cos(t),r=Math.sin(t),i=Math.cos(e),s=Math.sin(e),l=Math.cos(a),n=Math.sin(a);return this._createMat3FromValues([[o*i,o*s*n-l*r,r*n+o*l*s],[i*r,o*l+r*s*n,l*r*s-o*n],[-s,i*n,i*l]])},this._initCameraSensor=()=>{const t=this._calculateCameraFovForward(),e=this._calculateCameraFovReverse(),a=this._calculateCameraLook(),o=this._calculateImageDimensionsForward(),r=this._calculateImageDimensionsReverse(),i=this._calculatePlatformPositionMatrix(),s=this._calculatePlatformOrientation(),l=this._multiplyMat3(this._multiplyMat3(i,s),a);this._imageToEarthTransform=this._multiplyMat3(this._multiplyMat3(l,t),o);const n=this._multiplyMat3(r,e);this._earthToImageTransform=this._multiplyMat3(n,this._transposeMat3(l)),this._platformPositionEcef=this._projectPointToECEF(this.sensorLongitude,this.sensorLatitude,this.sensorAltitude||this.averageElevation)},this._metadataSupportsTransforms=t=>{if(!t?.size)return!1;const e=t.get(v.videoMetadataEntryId.EsriVideoWidth)?.value??0,a=t.get(v.videoMetadataEntryId.EsriVideoHeight)?.value??0;if(e<=0||a<=0)return!1;const o=t.get(v.videoMetadataEntryId.SensorEllipsoidHeight)?.value,r=t.get(v.videoMetadataEntryId.SensorTrueAltitude)?.value,i=t.get(v.videoMetadataEntryId.SensorLatitude)?.value,s=t.get(v.videoMetadataEntryId.SensorLongitude)?.value;if(null==o&&null==r||null==i||null==s)return!1;const l=t.get(v.videoMetadataEntryId.PlatformHeadingAngle)?.value,n=t.get(v.videoMetadataEntryId.PlatformPitchAngle)?.value,d=t.get(v.videoMetadataEntryId.PlatformRollAngle)?.value;if(null==l||null==n||null==d)return!1;const h=t.get(v.videoMetadataEntryId.SensorHorizontalFOV)?.value,u=t.get(v.videoMetadataEntryId.SensorVerticalFOV)?.value;if(null==h||null==u)return!1;const c=t.get(v.videoMetadataEntryId.SensorAzimuthAngle)?.value,g=t.get(v.videoMetadataEntryId.SensorElevationAngle)?.value,p=t.get(v.videoMetadataEntryId.SensorRollAngle)?.value;return null!=c&&null!=g&&null!=p},this._projectPointToECEF=(t,e,a)=>{const o=[];return m.projectBuffer([t,e,a],g.WGS84,0,o,p.WGS84ECEFSpatialReference,0),new c({x:o[0],y:o[1],z:o[2],spatialReference:p.WGS84ECEFSpatialReference})},this._projectImageVectorToEllipsoid=(t,e)=>{const a=f.earth.semiMajorAxis+e,o=f.earth.semiMinorAxis+e,r=o/a,i=a/o,{x:s,y:l,z:n}=this._platformPositionEcef,h=n??this.averageElevation,c=d.fromValues(s,l,i*h),g=u.dot(t,t),p=u.dot(t,c),m=u.dot(c,c)-a*a,v=(-p-Math.sqrt(p*p-g*m))/g;if(v<0)return[NaN,NaN,NaN];const _=d.create();return u.scaleAndAdd(_,c,t,v),_[2]=_[2]*r,_};const e=t?.videoMetadata;this.updateSensorModel(e)}updateSensorModel(t){t?.size&&(this._set("metadataSupportsTransforms",this._metadataSupportsTransforms(t)),this.metadataSupportsTransforms&&(this._extractValues(t),this._initCameraSensor()))}transformGeoToImage(t,e,a){const o=this._platformPositionEcef;if(!o)return[0,0];const{x:r,y:i,z:s}=o,l=d.fromValues(r,i,s),n=this._projectPointToECEF(t,e,a||this.averageElevation),h=d.create(),c=d.fromValues(n.x,n.y,n.z);u.subtract(h,c,l),u.transformMat3(h,h,this._earthToImageTransform);const g=h[0],p=h[1],m=h[2];let f=d.fromValues(NaN,NaN,NaN);return isNaN(m)||(f=d.fromValues(g/m,p/m,m/m)),[f[0],f[1]]}transformImageToGeo(t,e){const a=d.fromValues(t,e,1),o=d.create();u.transformMat3(o,a,this._imageToEarthTransform);const r=this._projectImageVectorToEllipsoid(o,this.averageElevation);let i;if(!isNaN(r[0])){const t=[];m.projectBuffer([r[0],r[1],r[2]],p.WGS84ECEFSpatialReference,0,t,g.WGS84,0),i=new c({x:t[0],y:t[1],z:t[2],spatialReference:g.WGS84})}return i}},e.__decorate([o.property()],t.default.prototype,"averageElevation",void 0),e.__decorate([o.property()],t.default.prototype,"imageHeight",void 0),e.__decorate([o.property()],t.default.prototype,"imageWidth",void 0),e.__decorate([o.property({readOnly:!0})],t.default.prototype,"metadataSupportsTransforms",void 0),e.__decorate([o.property()],t.default.prototype,"platformHeadingAngle",void 0),e.__decorate([o.property()],t.default.prototype,"platformPitchAngle",void 0),e.__decorate([o.property()],t.default.prototype,"platformRollAngle",void 0),e.__decorate([o.property()],t.default.prototype,"sensorHeadingAngle",void 0),e.__decorate([o.property()],t.default.prototype,"sensorAltitude",void 0),e.__decorate([o.property()],t.default.prototype,"sensorHorizontalFieldOfView",void 0),e.__decorate([o.property()],t.default.prototype,"sensorLatitude",void 0),e.__decorate([o.property()],t.default.prototype,"sensorLongitude",void 0),e.__decorate([o.property()],t.default.prototype,"sensorPitchAngle",void 0),e.__decorate([o.property()],t.default.prototype,"sensorRollAngle",void 0),e.__decorate([o.property()],t.default.prototype,"sensorVerticalFieldOfView",void 0),e.__decorate([o.property()],t.default.prototype,"vttMetadata",void 0),t.default=e.__decorate([l.subclass("esri.layers.video.VideoCameraSensorModel")],t.default),t.default});