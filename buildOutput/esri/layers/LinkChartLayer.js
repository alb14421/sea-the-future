// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../chunks/tslib.es6","../applications/KnowledgeStudio/resourceSerializationUtils","../core/Collection","../core/Error","../core/Logger","../core/MapUtils","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/reactiveUtils","../core/accessorSupport/decorators/property","../core/has","../core/RandomLCG","../core/accessorSupport/decorators/subclass","../core/accessorSupport/PropertyOrigin","../geometry/Extent","../geometry/Point","../geometry/Polyline","./Layer","./graphics/featureConversionUtils","./knowledgeGraph/constants","./knowledgeGraph/IdealEdgeLengthTypeOptions","./knowledgeGraph/KnowledgeGraphLayerDataManager","./knowledgeGraph/KnowledgeGraphSublayer","./knowledgeGraph/layerUtils","./knowledgeGraph/SessionMemoryStorage","./knowledgeGraph/supportUtils","./mixins/BlendLayer","./mixins/OperationalLayer","./mixins/ScaleRangeLayer","./support/commonProperties","../libs/linkchartlayout/LinkChartLayout","../rest/knowledgeGraphService"],function(e,t,a,i,n,o,r,s,l,h,d,p,y,c,u,m,g,f,L,w,b,M,C,k,N,T,D,_,v,x,I,E){"use strict";let S=class extends(_.OperationalLayer(D.BlendLayer(v.ScaleRangeLayer(r.MultiOriginJSONMixin(f))))){constructor(e){if(super(e),this.url=null,this.dataPreloadedInLocalCache=!1,this.initializationLinkChartConfig=null,this.membershipModified=!0,this._currentLinkChartConfig={layoutMode:"organic-standard"},this._graphTypeLookup=new Map,this.dataManager=null,this.knowledgeGraph=null,this.layers=new(a.ofType(C)),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map,this.linkChartExtent=new u({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7}),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="LinkChartLayer",this.sublayerIdsCache=new Map,this.tables=new(a.ofType(C)),this.type="link-chart",this.chronologicalAuxiliaryGraphics=null,this._originalInclusionList=e?.initializationInclusionModeDefinition,e?.dataPreloadedInLocalCache&&!e?.initializationInclusionModeDefinition)throw new i("knowledge-graph:linkchart-layer-constructor","If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it");this.addHandles(l.watch(()=>this.layers.concat(this.tables),(e,t)=>this._handleSublayersChange(e,t),l.sync))}normalizeCtorArgs(e){if(!e)return{};const{url:t,title:a,dataPreloadedInLocalCache:i,initializationLinkChartConfig:n}=e;return{url:t,title:a,dataPreloadedInLocalCache:i,initializationLinkChartConfig:n}}_initializeLayerProperties(e){if(!this.title&&this.url){const e=this.url.split("/");this.title=e[e.length-2]}const t=new Set;let a=[],o=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new i("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.inclusionModeDefinition?.generateAllSublayers?(a=e.knowledgeGraph.dataModel.entityTypes??[],o=e.knowledgeGraph.dataModel.relationshipTypes??[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?e.inclusionModeDefinition?.namedTypeDefinitions.forEach((i,r)=>{const s=this._graphTypeLookup.get(r);if(!s)return n.getLogger(this).warn(`A named type, ${r}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(r);"relationship"===s.type?t.has(r)||(t.add(r),o.push(s)):"entity"===s.type?t.has(r)||(t.add(r),a.push(s)):(n.getLogger(this).warn(`A named type, ${r}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(r))}):(a=e.knowledgeGraph.dataModel.entityTypes??[],o=e.knowledgeGraph.dataModel.relationshipTypes??[]);const r=new M.KnowledgeGraphLayerDataManager({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=a,this.memberRelationshipTypes=o,this.dataManager=r}load(e){const a=async()=>{const e=[],t=[];this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await k.initializeLayersFromClientData(this),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(e=>{e.useAllData=!1}),await this._initializeDiagram(),this.layers.forEach(a=>{t.push(a.refreshCachedQueryEngine()),e.push(new Promise(e=>{a.on("layerview-create",()=>{e(null)})}))}),this.tables.forEach(e=>{t.push(e.refreshCachedQueryEngine())}),await Promise.all(t)};return this.addResolvingPromise(new Promise(i=>{E.fetchKnowledgeGraph(this.url).then(async n=>{n.dataModel.entityTypes?.forEach(e=>{e.name&&this._graphTypeLookup.set(e.name,e)}),n.dataModel.relationshipTypes?.forEach(e=>{e.name&&this._graphTypeLookup.set(e.name,e)});const r=this.linkChart?.linkChartProperties;if(6===r?.originIdOf("entitiesUrl")&&(this.membershipModified=!1,this._originalInclusionList=await t.serializationUtilsModuleWrapper.fetchAndConvertSerializedLinkChart({entitiesUrl:r?.entitiesUrl,relationshipsUrl:r?.relationshipsUrl}),this._alignLayersDataModelAndInclusionDefinition(n.dataModel),this.initializationLinkChartConfig={layoutSettings:r?.layoutSettings??void 0,layoutMode:T.convertLayoutTypeToWebSupportedFormat(r.layoutType)}),this._initializeLayerProperties({knowledgeGraph:n,inclusionModeDefinition:this._originalInclusionList}),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.size||(this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map},this.dataManager.knowledgeGraph.dataModel.entityTypes?.forEach(e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})}),this.dataManager.knowledgeGraph.dataModel.relationshipTypes?.forEach(e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})})),this.dataPreloadedInLocalCache){const e=N.getInstance();for(const[t,a]of this.dataManager.inclusionModeDefinition?.namedTypeDefinitions??[])for(const i of a.members?.values()??[]){const a=e.readFromStoreById(`${t}__${i.id}`);a&&o.getOrCreateMapValue(this.dataManager.sublayerCaches,t,()=>new Map).set(i.id,a)}await a()}else{const t="geographic-organic-standard"===this.initializationLinkChartConfig?.layoutMode;this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0,!1,t,!0).then(async()=>{s.throwIfAborted(e),await a()}))}i(null)})})),Promise.resolve(this)}set initializationInclusionModeDefinition(e){"loaded"!==this.loadStatus&&"failed"!==this.loadStatus?this._set("initializationInclusionModeDefinition",e):n.getLogger(this).error("#initializationInclusionModeDefinition","initializationInclusionModeDefinition cannot be changed after the layer is loaded.")}get linkChart(){return this.parent}async addRecords(e,t){let a=[];t?.cascadeAddRelationshipEndNodes&&this.dataManager.knowledgeGraph.dataModel&&(a=await T.getRelationshipEndNodeIds(e,this.dataManager.knowledgeGraph));const i=e.concat(a).filter(e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id));i.length>0&&(this.membershipModified=!0),await this._handleNewRecords(i,t)}async createSublayerForNamedType(e){await this.load();const t=this._graphTypeLookup.get(e);if(!t)throw new i("knowledge-graph:missing-type","The specified type does not exist in the knowledge graph.");if(this.dataManager.sublayerCaches.has(e))throw new i("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),o.getOrCreateMapValue(this.sublayerIdsCache,e,()=>new Set);const a=this._createSublayer(t);return"entity"===t.type?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.set(e,{useAllData:!1,members:new Map}),a.geometryType?this.layers.push(a):this.tables.push(a),await k.initializeLayersFromClientData(this,[e]),this._refreshNamedTypes(),a}async removeRecords(e,{cascadeRemoveRelationships:t=!0,recalculateLayout:a=!1,overrideMembershipCheck:i=!1}={cascadeRemoveRelationships:!0,recalculateLayout:!1,overrideMembershipCheck:!1}){let n=[];for(const t of e)(i||!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.members?.has(t.id))&&n.push(t);if(t){const e=new Set,t=[];for(const t of n)if(this.dataManager.nodeConnectionsLookup.has(t.id))for(const a of this.dataManager.nodeConnectionsLookup.get(t.id))e.add(a);for(const a of e)if(this.dataManager.memberIdTypeLookup.has(a))for(const e of this.dataManager.memberIdTypeLookup.get(a))this.dataManager.relationshipTypeNames.has(e)&&t.push({id:a,typeName:e});n=n.concat(t)}this.dataManager.removeFromLayer(n);for(const e of n)this.sublayerIdsCache.get(e.typeName)?.delete(e.id),this.dataManager.relationshipTypeNames.has(e.typeName)?this.relationshipLinkChartDiagramLookup.delete(e.id):this.entityLinkChartDiagramLookup.delete(e.id);const o=a?void 0:this.getCurrentNodeLocations();await this._calculateLayoutWithSublayerTimeInfo(this._currentLinkChartConfig.layoutMode,{layoutSettings:this._currentLinkChartConfig.layoutSettings,lockedNodeLocations:o}),n.length>0&&(this.membershipModified=!0);const r=[];return this.layers.forEach(e=>{r.push(e.refreshCachedQueryEngine())}),await Promise.all(r),this._refreshNamedTypes(),n}async expand(e,t){let a=[];try{const i=await this.dataManager.getConnectedRecordIds(e,t?.relationshipTypeNames,t);a=i.filter(e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id)),await this._handleNewRecords(a,t),i.length>0&&(this.membershipModified=!0),s.throwIfAborted(t?.signal)}catch(e){throw s.isAbortError(e)&&a.length>0&&await this.removeRecords(a,{overrideMembershipCheck:!0}),e}return{records:a}}loadLayerAssumingLocalCache(){const e=[...this.memberRelationshipTypes,...this.memberEntityTypes];this.layers.length||0===this.originIdOf("tables")?0===this.originIdOf("layers")?this._createSublayers(e,this.layers,e=>!!e.geometryType):this._updateSublayers(e,this.layers):this.layers=new a,this.tables.length||0===this.originIdOf("layers")?0===this.originIdOf("tables")?this._createSublayers(e,this.tables,e=>!e.geometryType):this._updateSublayers(e,this.tables):this.tables=new a,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((e,t)=>{const a=o.getOrCreateMapValue(this.sublayerIdsCache,t,()=>new Set);e.members?.forEach(({id:e,linkChartLocation:i})=>{if(a.add(e),i){const a="coords"in i&&"lengths"in i?i:L.convertFromGeometry(i);this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(e,a):this.entityLinkChartDiagramLookup.set(e,a)}})})}async calculateLinkChartLayout(e="organic-standard",t){const a=[],r=[],l=[];this.dataManager.sublayerCaches.forEach((e,t)=>{this.dataManager.entityTypeNames.has(t)?e.forEach(e=>{a.push({typeName:t,feature:e})}):this.dataManager.relationshipTypeNames.has(t)&&e.forEach(e=>{r.push({typeName:t,feature:e})})}),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map;const h=new Map,d=new Map,p=new Map,y=new Map,c=new Uint8Array(a.length),f=new Float64Array(a.length),b=new Float64Array(a.length),M=new Float64Array(a.length),C=new Float64Array(a.length),k=new Uint32Array(r.length),N=new Uint32Array(r.length),T=new Float64Array(r.length),D=new Float64Array(r.length),_=[];let v=!1;const x=new u({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7});let E,S="organic-standard",F=0,O=0;const A=I.LCChronologicalLayout.apply;switch(S="geographic-organic-standard"===e?"organic-standard":e,S){case"organic-standard":E=I.LCForceDirectedLayout.apply;break;case"organic-community":E=I.LCCommunityLayout.apply;break;case"hierarchical-bottom-to-top":E=I.LCHierarchicalLayout.apply;break;case"radial-root-centric":E=I.LCRadialTreeLayout.apply;break;case"tree-left-to-right":E=I.LCSmartTreeLayout.apply;break;default:E=I.LCSimpleLayout.apply}let G=!1;a.forEach(({typeName:a,feature:i})=>{if("chronological-mono-timeline"!==e&&"chronological-multi-timeline"!==e&&t?.lockedNodeLocations?.has(i.attributes[w.systemOidFieldName])){"geographic-organic-standard"===e&&this.dataManager.geographicLookup.has(a)?c[F]=2:c[F]=0;const n=t.lockedNodeLocations.get(i.attributes[w.systemOidFieldName]);f[F]=n.x,b[F]=n.y}else if("geographic-organic-standard"===e&&this.dataManager.geographicLookup.has(a)){c[F]=2;let e=null;const t=i.attributes[this.dataManager.geographicLookup.get(a).name],n=this.dataManager.geographicLookup.get(a)?.geometryType;switch(n){case"esriGeometryPoint":f[F]=t?.x,b[F]=t?.y;break;case"esriGeometryPolygon":e=t?.centroid,null!=e?.x&&null!=e?.y?(f[F]=e.x,b[F]=e.y):c[F]=1;break;case"esriGeometryPolyline":case"esriGeometryMultipoint":e=t?.extent?.center,null!=e?.x&&null!=e?.y?(f[F]=e.x,b[F]=e.y):c[F]=1;break;default:c[F]=1}(null==f[F]||null==b[F]||Number.isNaN(f[F])||Number.isNaN(b[F]))&&(c[F]=1,f[F]=0,b[F]=0)}else if("chronological-mono-timeline"===e||"chronological-multi-timeline"===e){!G&&t?.lockedNodeLocations?.has(i.attributes[w.systemOidFieldName])&&(G=!0);const e=t?.timeInfoByTypeName?.get(a),n=e?.startField,o=n&&e?.startField?i.attributes[n]:null;M[F]=o?new Date(o).getTime():NaN;const r=e?.endField,s=r&&e?.endField?i.attributes[r]:null;C[F]=s?new Date(s).getTime():NaN,f[F]=0,b[F]=0,c[F]=1}else c[F]=1,f[F]=0,b[F]=0;y.set(i.attributes[w.systemOidFieldName],F),_[F]={feature:i,typeName:a},F++}),G&&n.getLogger(this).warn("Locked node locations are not supported for chronological layout at this time.  Requested node locations were ignored");let R=!1;const z=new Map;r.forEach(a=>{const i=a.feature.attributes[w.systemOriginIdFieldName],n=a.feature.attributes[w.systemDestinationIdFieldName],o=y.get(i),r=y.get(n),s=t?.timeInfoByTypeName?.get(a.typeName),h=t?.timeInfoByTypeName?s?.startField:null,d=h?a.feature.attributes[h]:null,p=s?.endField,c=p?a.feature.attributes[p]:null;if(void 0!==o&&void 0!==r){let t=i+"-"+n;"chronological-mono-timeline"!==e&&"chronological-multi-timeline"!==e||(t=t+"-"+d+"-"+c);const s=z.get(t),h=s?.has(a.typeName);h||(k[O]=o,N[O]=r,"chronological-mono-timeline"!==e&&"chronological-multi-timeline"!==e||(T[O]=d?new Date(d).getTime():NaN,D[O]=c?new Date(c).getTime():NaN),void 0===s?z.set(t,new Map([[a.typeName,O]])):s.set(a.typeName,O),O++),l.push(a)}else R=!0,this.relationshipLinkChartDiagramLookup.set(i,null)}),R&&n.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null");const P=this._validateOrganicLayoutSettings(e,t?.layoutSettings?.organicLayoutSettings),B=this._convertValidatedOrganicSettingsToCalculationSettings(P);await I.load();let U=1,V=null;if("chronological-mono-timeline"===e||"chronological-multi-timeline"===e){let a;({status:U,links:V,graphics:a}=A(()=>t?.signal?.aborted??!1,c,f,b,M,C,k.subarray(0,O),N.subarray(0,O),T.subarray(0,O),D.subarray(0,O),"chronological-multi-timeline"===e,t?.layoutSettings?.chronologicalLayoutSettings)),0===U&&(this.chronologicalAuxiliaryGraphics=a)}else({status:U,links:V}=E(()=>t?.signal?.aborted??!1,c,f,b,k.subarray(0,O),N.subarray(0,O),B.computationBudgetTime,B.idealEdgeLengthMultiplier,B.repulsionRadiusMultiplier));if(s.throwIfAborted(t?.signal),1===U)throw new i("knowledge-graph:layout-failed","Attempting to arrange the records in the specified layout failed");if(2===U)throw s.createAbortError();for(let e=0;e<_.length;e++){if(b[e]>84.9999?b[e]=84.9999:b[e]<-84.9999&&(b[e]=-84.9999),f[e]>179.9999?f[e]=179.9999:f[e]<-179.9999&&(f[e]=-179.9999),_[e].feature.attributes[w.systemLayoutGeometryFieldName]=new m(f[e],b[e]),h.has(_[e].typeName)){const t=h.get(_[e].typeName);t?.set(_[e].feature.attributes[w.systemOidFieldName],_[e].feature)}else{const t=new Map;t.set(_[e].feature.attributes[w.systemOidFieldName],_[e].feature),h.set(_[e].typeName,t)}p.set(_[e].feature.attributes[w.systemOidFieldName],_[e].feature);const t=L.convertFromGeometry(_[e].feature.attributes[w.systemLayoutGeometryFieldName]);this.entityLinkChartDiagramLookup.set(_[e].feature.attributes[w.systemOidFieldName],_[e].feature.attributes[w.systemLayoutGeometryFieldName]?t:null);const a=o.getOrCreateMapValue(this.dataManager.inclusionModeDefinition.namedTypeDefinitions,_[e].typeName,()=>({useAllData:!1,members:new Map}));o.getOrCreateMapValue(a.members,_[e].feature.attributes[w.systemOidFieldName],()=>({id:_[e].feature.attributes[w.systemOidFieldName],linkChartLocation:void 0})).linkChartLocation=_[e].feature.attributes[w.systemLayoutGeometryFieldName];const{x:i,y:n}=_[e].feature.attributes[w.systemLayoutGeometryFieldName];if(v)x.xmin=Math.min(x.xmin,i),x.xmax=Math.max(x.xmax,i),x.ymin=Math.min(x.ymin,n),x.ymax=Math.max(x.ymax,n);else{const e=1e-7;x.xmin=i-e,x.xmax=i+e,x.ymin=n-e,x.ymax=n+e,v=!0}}if(this.linkChartExtent.xmin=x.xmin,this.linkChartExtent.xmax=x.xmax,this.linkChartExtent.ymin=x.ymin,this.linkChartExtent.ymax=x.ymax,!V)throw new i("knowledge-graph:layout-failed","Attempting to retrieve link geometry from diagram engine failed");const j=new Map,W=new Map,K=new Map,Q=new Set;for(let a=0;a<l.length;a++){const i=[],r=l[a],s=r.feature.attributes[w.systemOriginIdFieldName],h=r.feature.attributes[w.systemDestinationIdFieldName];let c=s+"-"+h;if("chronological-mono-timeline"===e||"chronological-multi-timeline"===e){const e=t?.timeInfoByTypeName?.get(r.typeName),a=t?.timeInfoByTypeName?e?.startField:null,i=a?r.feature.attributes[a]:null,n=e?.endField;c+="-"+i+"-"+(n?r.feature.attributes[n]:null)}const u=z.get(c).get(r.typeName),m=0===u?0:V?.vertexEndIndex[u-1];if(!Q.has(u)){if(Q.add(u),2===V.types[u]){const e=[V.vertices[2*m],V.vertices[2*m+1]],t=[V.vertices[2*(m+1)],V.vertices[2*(m+1)+1]],a=[.5*(e[0]+t[0]),.5*(e[1]+t[1])],n=[a[0]-e[0],a[1]-e[1]],o=[a[0]+n[1],a[1]-n[0]],r=[a[0]-n[1],a[1]+n[0]];i.push(e),i.push(o),i.push(t),i.push(r),i.push(e)}else{if(0!==V.types[u]){n.getLogger(this).warn("A relationship generated an unsupported link geometry type.  It will not be rendered");continue}for(let e=m;e<V.vertexEndIndex[u];e++)i.push([V.vertices[2*e],V.vertices[2*e+1]])}if("chronological-mono-timeline"!==e&&"chronological-multi-timeline"!==e){const e=_[y.get(s)]?.feature.attributes[w.systemLayoutGeometryFieldName],t=_[y.get(h)]?.feature.attributes[w.systemLayoutGeometryFieldName];i[0][0]===e.x&&i[0][1]===e.y||(i[0]=[e.x,e.y]),i[i.length-1][0]===t.x&&i[i.length-1][1]===t.y||(i[i.length-1]=[t.x,t.y])}for(let e=1;e<i.length-1;e++)i[e][1]>85.5?i[e][1]=85.5:i[e][1]<-85.5&&(i[e][1]=-85.5),i[e][0]>179.9999?i[e][0]=179.9999:i[e][0]<-179.9999&&(i[e][0]=-179.9999);j.has(c)?j.get(c).push(i):j.set(c,[i])}const f=j.get(c);W.has(c)||(W.set(c,new Map),K.set(c,new Map));const b=W.get(c),M=K.get(c);b.has(r.typeName)||(b.set(r.typeName,f.shift()),M.set(r.typeName,0));const C=b.get(r.typeName);M.set(r.typeName,M.get(r.typeName)+1);const k=new g({paths:[C]});if(r.feature.attributes[w.systemLayoutGeometryFieldName]=k,d.has(r.typeName)){const e=d.get(r.typeName);e?.set(r.feature.attributes[w.systemOidFieldName],r.feature)}else{const e=new Map;e.set(r.feature.attributes[w.systemOidFieldName],r.feature),d.set(r.typeName,e)}p.set(r.feature.attributes[w.systemOidFieldName],r.feature);const N=L.convertFromGeometry(r.feature.attributes[w.systemLayoutGeometryFieldName]);this.relationshipLinkChartDiagramLookup.set(r.feature.attributes[w.systemOidFieldName],r.feature.attributes[w.systemLayoutGeometryFieldName]?N:null);const T=o.getOrCreateMapValue(this.dataManager.inclusionModeDefinition.namedTypeDefinitions,r.typeName,()=>({useAllData:!1,members:new Map}));o.getOrCreateMapValue(T.members,r.feature.attributes[w.systemOidFieldName],()=>({id:r.feature.attributes[w.systemOidFieldName],linkChartLocation:void 0})).linkChartLocation=N}for(const e of l)e.feature.attributes[w.systemAggregationCountFieldName]=K.get(e.feature.attributes[w.systemOriginIdFieldName]+"-"+e.feature.attributes[w.systemDestinationIdFieldName])?.get(e.typeName)??null;return this._currentLinkChartConfig={layoutMode:e,layoutSettings:t?.layoutSettings?.clone()},{nodes:h,links:d,idMap:p}}async applyNewLinkChartLayout(e="organic-standard",t){const a=[];await this._calculateLayoutWithSublayerTimeInfo(e,t),this.layers.forEach(e=>{a.push(e.refreshCachedQueryEngine())}),this.membershipModified=!0,await Promise.all(a),this._refreshNamedTypes()}getCurrentNodeLocations(){const e=new Map;for(const[t,a]of this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.entries()??[])this.dataManager.relationshipTypeNames.has(t)||a?.members?.forEach(t=>{const a=t.linkChartLocation;let i;const n=t.id;a&&(i="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]},e.set(n,new m({x:i.x,y:i.y})))});return e}async refreshLinkChartCache(e){await this.dataManager.refreshCacheContent(e);const t=[];this.layers.forEach(e=>{t.push(e.refreshCachedQueryEngine())}),await Promise.all(t),this._refreshNamedTypes()}async connectBetweenEntities(e,t){if(!e.length)return{records:[]};let a=[];try{let i=[];for(const e of this.dataManager.relationshipTypeNames){const t=this.sublayerIdsCache.get(e);t&&(i=i.concat(Array.from(t.keys())))}a=await this.dataManager.getRelationshipsBetweenNodes(e,i,t),await this._handleNewRecords(a,t),s.throwIfAborted(t)}catch(e){throw s.isAbortError(e)&&this.removeRecords(a),e}return{records:a}}async connectFromEntities(e,t){if(!e.length)return{records:[]};let a=[];try{let i=[];for(const e of this.dataManager.relationshipTypeNames){const t=this.sublayerIdsCache.get(e);t&&(i=i.concat(Array.from(t.keys())))}let n=[];for(const e of this.dataManager.entityTypeNames){const t=this.sublayerIdsCache.get(e);t&&(n=n.concat(Array.from(t)))}a=await this.dataManager.getRelationshipsFromNodes(e,n,i,t),await this._handleNewRecords(a,t),a.length>0&&(this.membershipModified=!0),s.throwIfAborted(t)}catch(e){throw s.isAbortError(e)&&this.removeRecords(a),e}return{records:a}}getCurrentLayout(){return this._currentLinkChartConfig.layoutMode}async _calculateLayoutWithSublayerTimeInfo(e="organic-standard",t){const a=new Map;this.layers.forEach(e=>{a.set(e.objectType.name,e.timeInfo)}),await this.calculateLinkChartLayout(e,{timeInfoByTypeName:a,...t}),this.linkChart?.handleChronologicalOverlay()}async _handleNewRecords(e,t){const a=new Set,i=[],n=this.layers.concat(this.tables);for(const t of e)this._graphTypeLookup.has(t.typeName)&&(!1===n.some(e=>e.objectType.name===t.typeName)&&(this.dataManager.sublayerCaches.set(t.typeName,new Map),a.add(t.typeName)),o.getOrCreateMapValue(this.sublayerIdsCache,t.typeName,()=>new Set).add(t.id),i.push(t));this.dataManager.addToLayer(i);for(const e of a){const t=this._graphTypeLookup.get(e);if(t){const a=this._createSublayer(t);"entity"===t.type?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),a.geometryType?this.layers.push(a):this.tables.push(a)}}await k.initializeLayersFromClientData(this,Array.from(a),t),await this.dataManager.refreshCacheContent(e.map(e=>e.id),void 0,void 0,void 0,t);const r={layoutSettings:this._currentLinkChartConfig.layoutSettings,lockedNodeLocations:new Map};for(const[e,t]of this.entityLinkChartDiagramLookup.entries())t&&r.lockedNodeLocations.set(e,new m(t.coords[0],t.coords[1]));await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode,r)}_createSublayers(e,t,a){e.forEach(e=>{const i=this._createSublayer(e);a(i)&&t.push(i),this._updateSublayerCaches(e)})}_updateSublayers(e,t){t.forEach(t=>{t.parentCompositeLayer=this;const a=e.find(e=>e.type===t.graphType&&e.name===t.graphTypeName);a&&(t.objectType=a,t.read({title:a.name},{origin:"service"}),this._updateSublayerCaches(a))})}_updateSublayerCaches({name:e}){if(!e)return;const t=this.dataManager.sublayerCaches;t.has(e)||t.set(e,new Map)}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=3&&e<7}async _initializeDiagram(){this.initializationLinkChartConfig?this.initializationLinkChartConfig.doNotRecalculateLayout?(this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((e,t)=>{e?.members?.forEach(e=>{const a=e.linkChartLocation;let i;const n=e.id;if(!a)return;i="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]};const o=L.convertFromGeometry(i);this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(n,o):this.entityLinkChartDiagramLookup.set(n,o),this.linkChartExtent.xmin>i.x&&(this.linkChartExtent.xmin=i.x),this.linkChartExtent.xmax<i.x&&(this.linkChartExtent.xmax=i.x),this.linkChartExtent.ymin>i.y&&(this.linkChartExtent.ymin=i.y),this.linkChartExtent.ymax<i.y&&(this.linkChartExtent.ymax=i.y)})}),this.memberRelationshipTypes.forEach(e=>{e.name&&this.dataManager.sublayerCaches.get(e.name)?.forEach(e=>{const t=this.relationshipLinkChartDiagramLookup.get(e.attributes[w.systemOriginIdFieldName]),a=this.relationshipLinkChartDiagramLookup.get(e.attributes[w.systemDestinationIdFieldName]);if(t&&a){const i=L.convertFromGeometry(new g({paths:[[[t.coords[0],t.coords[1]],[a.coords[0],a.coords[1]]]]}));this.relationshipLinkChartDiagramLookup.set(e.attributes[w.systemOidFieldName],i)}else this.relationshipLinkChartDiagramLookup.set(e.attributes[w.systemOidFieldName],null)})})):await this._calculateLayoutWithSublayerTimeInfo(this.initializationLinkChartConfig.layoutMode,{lockedNodeLocations:this.getCurrentNodeLocations(),...this.initializationLinkChartConfig||{}}):await this._calculateLayoutWithSublayerTimeInfo("organic-standard",{lockedNodeLocations:this.getCurrentNodeLocations()})}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}_validateOrganicLayoutSettings(e,t){const a=e=>"number"==typeof e&&!isNaN(e),i=e=>a(e)&&e>=0,o={};if(!new Set(["organic-standard","organic-community","geographic-organic-standard","chronological-multi-timeline","chronological-mono-timeline"]).has(e)||!t)return o;const{computationBudgetTime:r,autoRepulsionRadius:s,repulsionRadiusMultiplier:l,absoluteIdealEdgeLength:h,multiplicativeIdealEdgeLength:d,idealEdgeLengthType:p}=t;var y,c,u;return a(y=r)&&y>=1?o.computationBudgetTime=r:r&&n.getLogger(this).warn("Invalid layout computationBudgetTime setting, will revert to default setting"),o.autoRepulsionRadius=s,!s&&a(c=l)&&c>=1?o.repulsionRadiusMultiplier=l:s||(o.autoRepulsionRadius=!0,n.getLogger(this).warn("Invalid layout repulsionRadiusMultiplier setting, will revert to default setting")),"geographic-organic-standard"===e&&(u=p,Object.values(b.IdealEdgeLengthTypeOptions).includes(u)?o.idealEdgeLengthType=p:void 0!==p&&n.getLogger(this).warn('Invalid layout idealEdgeLengthType setting, will revert to "multiplier" setting'),"absolute-value"===p&&i(h)?o.absoluteIdealEdgeLength=h:"absolute-value"===p&&void 0!==h?n.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting"):"multiplier"===p&&i(d)?o.multiplicativeIdealEdgeLength=d:"multiplier"===p&&void 0!==d&&n.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting")),o}_convertValidatedOrganicSettingsToCalculationSettings(e){let t=e.idealEdgeLengthType===b.IdealEdgeLengthTypeOptions.ABSOLUTE?e.absoluteIdealEdgeLength:e.multiplicativeIdealEdgeLength;return e.idealEdgeLengthType===b.IdealEdgeLengthTypeOptions.ABSOLUTE&&(void 0===t?t=-1:t*=-1),{computationBudgetTime:e.computationBudgetTime??void 0,repulsionRadiusMultiplier:e.repulsionRadiusMultiplier&&!e.autoRepulsionRadius?e.repulsionRadiusMultiplier:void 0,idealEdgeLengthMultiplier:t}}_createSublayer(e){return new C({objectType:e,parentCompositeLayer:this,graphType:e.type})}_handleSublayersChange(e,t){t&&(t.forEach(e=>{e.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(e=>{e.parent=this}),this.addHandles([e.on("after-add",({item:e})=>{e.parent=this}),e.on("after-remove",({item:e})=>{e.parent=null})],"sublayers-owner"))}_alignLayersDataModelAndInclusionDefinition(e){const t=new Set((e.entityTypes??[]).map(e=>e.name).concat((e.relationshipTypes??[]).map(e=>e.name))),i=new Set((e.entityTypes??[]).map(e=>e.name)),o=new Set((e.relationshipTypes??[]).map(e=>e.name));if(this.layers){for(const e of this.layers)!e.graphType&&t.has(e.graphTypeName)&&(e.graphType=i.has(e.graphTypeName)?"entity":"relationship");const e=this.layers.filter(e=>t.has(e.graphTypeName)&&("entity"===e.graphType?i.has(e.graphTypeName):o.has(e.graphTypeName)));this.setAtOrigin("layers",e,c.idToName(this.originIdOf("layers")))}else this.layers=new a;if(this.layers&&this._originalInclusionList){const e=new Set(this._originalInclusionList.namedTypeDefinitions.keys()),t=this.tables?.map(e=>e.graphTypeName)??[],a=this.layers.map(e=>e.graphTypeName).concat(t);for(const t of a)e.has(t)||this._originalInclusionList.namedTypeDefinitions.set(t,{useAllData:!1,members:new Map});const i=[];for(const e of this._originalInclusionList.namedTypeDefinitions.keys())a.includes(e)||(n.getLogger(this).warn(`A named type, ${e}, was in the serialized feature collection but did not have a sublayer config in the item, so will be removed`),i.push(e));for(const e of i)this._originalInclusionList.namedTypeDefinitions.delete(e)}}};return e.__decorate([h.property(x.url)],S.prototype,"url",void 0),e.__decorate([h.property()],S.prototype,"dataPreloadedInLocalCache",void 0),e.__decorate([h.property()],S.prototype,"initializationLinkChartConfig",void 0),e.__decorate([h.property()],S.prototype,"membershipModified",void 0),e.__decorate([h.property()],S.prototype,"dataManager",void 0),e.__decorate([h.property()],S.prototype,"initializationInclusionModeDefinition",null),e.__decorate([h.property()],S.prototype,"knowledgeGraph",void 0),e.__decorate([h.property({type:a.ofType(C),json:{write:{ignoreOrigin:!0}}})],S.prototype,"layers",void 0),e.__decorate([h.property({readOnly:!0})],S.prototype,"linkChart",null),e.__decorate([h.property()],S.prototype,"entityLinkChartDiagramLookup",void 0),e.__decorate([h.property()],S.prototype,"relationshipLinkChartDiagramLookup",void 0),e.__decorate([h.property()],S.prototype,"linkChartExtent",void 0),e.__decorate([h.property()],S.prototype,"memberEntityTypes",void 0),e.__decorate([h.property()],S.prototype,"memberRelationshipTypes",void 0),e.__decorate([h.property({type:["LinkChartLayer"]})],S.prototype,"operationalLayerType",void 0),e.__decorate([h.property()],S.prototype,"sublayerIdsCache",void 0),e.__decorate([h.property({type:a.ofType(C),json:{write:{ignoreOrigin:!0}}})],S.prototype,"tables",void 0),e.__decorate([h.property({json:{read:!1}})],S.prototype,"type",void 0),e.__decorate([h.property({json:{read:!1}})],S.prototype,"chronologicalAuxiliaryGraphics",void 0),S=e.__decorate([y.subclass("esri.layers.LinkChartLayer")],S),S});