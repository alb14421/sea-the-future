// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../chunks/tslib.es6","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","./bandIndexUtils","./BaseRasterFunction","./ExtractBandFunctionArguments"],function(t,n,e,s,r,a,i,o,l){"use strict";let u=class extends o{constructor(){super(...arguments),this.functionName="ExtractBand",this.functionArguments=null,this.rasterArgumentNames=["raster"]}_bindSourceRasters(){const{functionArguments:t,sourceRasterInfos:n}=this,e=n[0],{method:s,bandNames:r,bandWavelengths:a,bandIds:i,missingBandAction:o}=t,l=r?.length&&("name"===s||"id"!==s&&!i?.length),u=a?.length&&("wavelength"===s||"id"!==s&&!i?.length),c=1===o,d=l?function(t,n){const e=t.bandInfos.map(({name:t})=>t.toLowerCase()),s=[];for(let t=0;t<n.length;t++){const r=n[t].toLowerCase();let a=e.indexOf(r);if(-1===a&&"nearinfrared"===r&&(a=e.findIndex(t=>t.startsWith("nearinfrared_1")),-1===a&&(a=e.findIndex(t=>t.startsWith("nearinfrared")))),-1===a)return null;s.push(a)}return s}(e,r):u?function(t,n,{wavelengthMatchTolerance:e},s){const{bandInfos:r}=t,a=[];for(let t=0;t<r.length;t++){const{minWavelength:n,maxWavelength:e}=r[t];if(!n||!e)return null;a.push({minWavelength:n,maxWavelength:e})}const i=[];for(let t=0;t<n.length;t++){const r=n[t];let o=!1,l=-1,u=Number.MAX_VALUE;for(let t=0;t<a.length;t++){const n=a[t],e=r>=n.minWavelength&&r<=n.maxWavelength,s=Math.abs(r-(n.minWavelength+n.maxWavelength)/2);e?s<u&&(o=!0,l=t,u=s):!o&&s<u&&(l=t,u=s)}if(!o&&e&&u<e&&(o=!0),!o&&s)return null;i.push(l)}return i}(e,a,this.functionArguments,c):function(t,n,e){const{bandCount:s}=t;return!n?.length||e&&n.some(t=>t<0||t>=s)?null:n}(e,i,c);if(null==d)return{success:!1,supportsGPU:!1,error:`extract-band-function: Invalid ${l?"band names":u?"band wavelengths":"band ids"} for the imagery data source`};this.functionArguments.bandIds=d,this.functionArguments.method="id",this.outputPixelType=this._getOutputPixelType("f32");const h=e.clone();h.pixelType=this.outputPixelType,h.bandCount=d.length;const{statistics:g,histograms:m}=h;null!=g&&g.length&&(h.statistics=d.map(t=>g[t]||g[g.length-1])),null!=m&&m.length&&(h.histograms=d.map(t=>m[t]||m[m.length-1])),h.multidimensionalInfo&&h.multidimensionalInfo.variables.forEach(t=>{const{statistics:n,histograms:e}=t;null!=n&&n.length&&(t.statistics=d.map(t=>n[t]||n[n.length-1])),null!=e&&e.length&&(t.histograms=d.map(t=>e[t]||e[e.length-1]))});let p=h.keyProperties?.BandProperties;return p?.length&&(p=d.map(t=>t>=p.length?p[p.length-1]:p[t]),h.keyProperties={...h.keyProperties,BandProperties:p}),this.rasterInfo=h,{success:!0,supportsGPU:h.bandCount<=3}}_processPixels(t){const n=t.pixelBlocks?.[0];if(null==n)return null;const e=n.pixels.length,s=this.functionArguments.bandIds.map(t=>t>=e?e-1:t);return n.extractBands(s)}_getWebGLParameters(){let t;if(this.isInputBandIdsSwizzled)t=this.swizzledBandSelection.length?this.swizzledBandSelection:[0,1,2];else{t=[...this.functionArguments.bandIds],0===t.length?t=[0,1,2]:t.length<3&&(t[1]=t[1]??t[0],t[2]=t[2]??t[1]);for(let n=0;n<3;n++)t[n]=Math.min(t[n],2)}return{bandIndexMat3:i.getBandMatrix3(t)}}_getInputBandIds(t){const n=t.length;return this.functionArguments.bandIds.map(t=>t>=n?n-1:t).map(n=>t[n])}_swizzleBandIds(t){const n=this.functionArguments.bandIds.map(n=>t.indexOf(n));return this.isInputBandIdsSwizzled=!0,n[1]??=n[0],n[2]??=n[1],this.swizzledBandSelection=n,!1}};return t.__decorate([n.property({json:{write:!0,name:"rasterFunction"}})],u.prototype,"functionName",void 0),t.__decorate([n.property({type:l,json:{write:!0,name:"rasterFunctionArguments"}})],u.prototype,"functionArguments",void 0),t.__decorate([n.property()],u.prototype,"rasterArgumentNames",void 0),u=t.__decorate([a.subclass("esri.layers.support.rasterFunctions.ExtractBandFunction")],u),u});