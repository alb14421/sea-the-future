// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../chunks/tslib.es6","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../Field","../rasterFormats/pixelRangeUtils","./BaseRasterFunction","./changeDetectionUtils","./ComputeChangeFunctionArguments"],function(e,t,s,n,r,a,o,i,u,l,c){"use strict";let p=class extends u{constructor(){super(...arguments),this.functionName="ComputeChange",this.functionArguments=null,this.rasterArgumentNames=["raster","raster2"]}_bindSourceRasters(){const{method:e}=this.functionArguments,t=this.sourceRasterInfos[0].clone();if(this.outputPixelType=this._getOutputPixelType(t.pixelType),t.pixelType=this.outputPixelType,this._removeStatsHistColormapVAT(t),"categorical"===e){const e=this.sourceRasterInfos.map(e=>e.attributeTable),s=this._getFieldNames(e,"value"),n=e.map(e=>this._getClassFieldName(e));if(null==s[0]||null==s[1]||null==n[0]||null==n[1])return{success:!1,supportsGPU:!1,error:"both inputs must have proper attribute table with value and class fields"};this._updateAttributeTable(t,s,n)}return t.bandCount=1,this.rasterInfo=t,{success:!0,supportsGPU:"difference"===e||"relative-difference"===e}}_processPixels(e){const{pixelBlocks:t}=e;if(null==t?.[0]||null==t?.[1])return null;const{method:s}=this.functionArguments;return l.computeChange(t,s,this.outputPixelType,this._categoryConfig)}_getWebGLParameters(){const e=this.outputPixelType??"f32";let[t,s]=i.getPixelValueRange(e);const n=i.isIntegerPixelType(e);return n&&(t-=1e-4,s+=1e-4),{method:this.functionArguments.method,domainRange:[t,s],isOutputRounded:n}}_updateAttributeTable(e,t,s){const n=this.sourceRasterInfos.map(e=>e.attributeTable),r=n.map((e,s)=>e.features.map(e=>e.attributes[t[s]])),a=n.map((e,t)=>e.features.map(e=>e.attributes[s[t]])),i=r.map(e=>{const t=[];return e.forEach((e,s)=>t[e]=s),t}),{keepMethod:u}=this.functionArguments;this._categoryConfig={categoryIndexLookups:i,classNames:a,keepMethod:u};const l=n[0].clone();l.fields=[new o({name:"OID",type:"oid"}),new o({name:"Value",type:"integer"}),new o({name:"ClassName",type:"string"}),new o({name:"Class_From",type:"string"}),new o({name:"Class_To",type:"string"})];const c=this._getFieldNames(n,"red"),p=this._getFieldNames(n,"green"),m=this._getFieldNames(n,"blue"),d=[],g=2===c.length&&2===p.length&&2===m.length;g&&(d.push(...n.map((e,t)=>e.features.map(e=>[e.attributes[c[t]],e.attributes[p[t]],e.attributes[m[t]]]))),l.fields.push(new o({name:"Red",type:"integer"}),new o({name:"Green",type:"integer"}),new o({name:"Blue",type:"integer"})));const h=l.features[0].clone();h.geometry=null;const f=[],[y,_]=r.map(e=>e.length);let C=1;for(let e=0;e<y;e++){const t=a[0][e];for(let s=0;s<_;s++){const n=a[1][s];if("changed"===u&&t===n||"unchanged"===u&&t!==n)continue;const r=h.clone();r.attributes={OID:C++,Value:e*_+s,ClassName:t===n?t:`${t} -> ${n}`,Class_From:t,Class_To:n},g&&(r.attributes.Red=d[0][e][0]+d[1][s][0]>>1,r.attributes.Green=d[0][e][1]+d[1][s][1]>>1,r.attributes.Blue=d[0][e][2]+d[1][s][2]>>1),f.push(r)}}if("changed"===u){const e=h.clone();e.attributes={OID:C++,Value:y*_+1,ClassName:"No Change",Class_From:"Same",Class_To:"Same"},f.push(e)}else if("unchanged"===u){const e=h.clone();e.attributes={OID:C++,Value:y*_+2,ClassName:"Changed",Class_From:"Any",Class_To:"Any"},f.push(e)}l.features=f,e.attributeTable=l}_getFieldNames(e,t){return e.map(({fields:e})=>e.find(e=>e.name.toLowerCase()===t)?.name).filter(e=>e)}_getClassFieldName(e){const t=e.fields.find(e=>"string"===e.type&&e.name.toLowerCase().startsWith("class"))??e.fields.find(e=>"string"===e.type&&e.name.toLowerCase().includes("class")||e.name.toLowerCase().includes("type")||e.name.toLowerCase().includes("name"))??e.fields.find(e=>"string"===e.type);return t?.name}};return e.__decorate([t.property({json:{write:!0,name:"rasterFunction"}})],p.prototype,"functionName",void 0),e.__decorate([t.property({type:c,json:{write:!0,name:"rasterFunctionArguments"}})],p.prototype,"functionArguments",void 0),e.__decorate([t.property()],p.prototype,"rasterArgumentNames",void 0),e.__decorate([t.property({json:{write:!0}})],p.prototype,"_categoryConfig",void 0),p=e.__decorate([a.subclass("esri.layers.support.rasterFunctions.ComputeChangeFunction")],p),p});