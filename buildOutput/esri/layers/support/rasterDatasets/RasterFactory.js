// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../core/Error","./CovJSONRaster","./ImageAuxRaster","./ImageServerRaster","./InMemoryRaster","./MRFRaster","./TIFFRaster"],function(e,t,r,s,o,a,c){"use strict";const n=new Map;return n.set("MRF",{desc:"Meta Raster Format",constructor:a}),n.set("TIFF",{desc:"GeoTIFF",constructor:c}),n.set("RasterTileServer",{desc:"Raster Tile Server",constructor:s}),n.set("JPG",{desc:"JPG Raster Format",constructor:r}),n.set("PNG",{desc:"PNG Raster Format",constructor:r}),n.set("GIF",{desc:"GIF Raster Format",constructor:r}),n.set("BMP",{desc:"BMP Raster Format",constructor:r}),n.set("CovJSON",{desc:"COVJSON Raster Format",constructor:t}),n.set("MEMORY",{desc:"In Memory Raster Format",constructor:o}),class{static get supportedFormats(){const e=new Set;return n.forEach((t,r)=>e.add(r)),e}static async open(t){const{url:r,ioConfig:s,source:o,sourceJSON:a}=t;let c=t.datasetFormat??s?.datasetFormat;null==c&&(r.includes(".")?c=r.slice(r.lastIndexOf(".")+1).toUpperCase():"coverage"===o?.type?.toLowerCase()?c="CovJSON":o?.extent&&o.pixelblocks&&(c="MEMORY")),"OVR"===c||"TIF"===c?c="TIFF":"JPG"===c||"JPEG"===c||"JFIF"===c?c="JPG":"COVJSON"===c&&(c="CovJSON"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(c="RasterTileServer");const u={url:r,source:o,sourceJSON:a,datasetFormat:c,ioConfig:s??{bandIds:null,sampling:null}};if(Object.keys(u).forEach(e=>{null==u[e]&&delete u[e]}),c){if(!this.supportedFormats.has(c))throw new e("rasterfactory:open","not a supported format "+c);if("CRF"===c)throw new e("rasterfactory:open",`cannot open raster: ${r}`);const s=new(0,n.get(c).constructor)(u);return await s.open({signal:t.signal}),s}const l=Array.from(n.keys()).filter(e=>"CovJSON"!==e&&"Memory"!==e);let i=0;const F=()=>{if(c=l[i++],!c)return null;if("CRF"===c)return null;const e=new(0,n.get(c).constructor)(u);return e.open({signal:t.signal}).then(()=>e).catch(()=>F())};return F()}static register(e,t,r){n.has(e.toUpperCase())||n.set(e.toUpperCase(),{desc:t,constructor:r})}}});