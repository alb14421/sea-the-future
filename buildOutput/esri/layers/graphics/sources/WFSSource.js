// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/tslib.es6","../../../core/Error","../../../core/has","../../../core/Loadable","../../../core/Logger","../../../core/promiseUtils","../../../core/workers/workers","../../../core/accessorSupport/decorators/property","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../geometry/Extent","../../../geometry/support/typeUtils","./support/clientSideDefaults","../../ogc/wfsUtils","../../../rest/support/AttributeBinsFeatureSet","../../../rest/support/FeatureSet","../../../time/constants"],function(e,t,r,a,o,s,i,n,c,l,u,p,d,y,m,h,w,f){"use strict";e.WFSSource=class extends o.Loadable{constructor(){super(...arguments),this._connection=null,this._workerHandler=null,this.capabilities=y.createCapabilities(!1,!1),this.type="wfs",this.refresh=i.debounce(async()=>{await this.load();const e={customParameters:this.layer.customParameters,maxRecordCount:this.layer.maxRecordCount,maxTotalRecordCount:this.layer.maxTotalRecordCount,maxPageCount:this.layer.maxPageCount},{extent:t}=await this._workerHandler.refresh(e);return t&&(this.sourceJSON.extent=t),{dataChanged:!0,updates:{extent:this.sourceJSON.extent}}})}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this._startWorker({signal:t})),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null,this._workerHandler=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){const r=await this.queryFeaturesJSON(e,t);return w.fromJSON(r)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._workerHandler.queryFeatures(e?e.toJSON():void 0,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._workerHandler.queryFeatureCount(e?e.toJSON():void 0,t)}async queryObjectIds(e,t={}){return await this.load(t),this._workerHandler.queryObjectIds(e?e.toJSON():void 0,t)}async queryExtent(e,t={}){await this.load(t);const r=await this._workerHandler.queryExtent(e?e.toJSON():void 0,t);return{count:r.count,extent:p.fromJSON(r.extent)}}async querySnapping(e,t={}){return await this.load(t),this._workerHandler.querySnapping(e,t)}async queryAttributeBins(e,t={}){await this.load(t);const r=await this._workerHandler.queryAttributeBins(e?.toJSON(),t);return h.fromJSON(r)}async _createLoadOptions(e){const{url:t,customParameters:a,name:o,namespaceUri:s,fields:i,geometryType:n,maxRecordCount:c,maxPageCount:l,maxTotalRecordCount:u,swapXY:p}=this.layer,y="defaults"===this.layer.originOf("spatialReference")?void 0:this.layer.spatialReference;if(!t)throw new r("wfs-layer:missing-url","WFSLayer must be created with a url");this.wfsCapabilities||(this.wfsCapabilities=await m.getCapabilities(t,{customParameters:a,...e}));const h=["fields","geometryType","name","namespaceUri","swapXY"].some(e=>null==this.layer[e])?await m.getWFSLayerInfo(this.wfsCapabilities,o,s,{spatialReference:y,customParameters:a,signal:e?.signal}):{...m.prepareWFSLayerFields(i??[]),geometryType:n,name:o,namespaceUri:s,spatialReference:y,swapXY:p},w=m.findFeatureType(this.wfsCapabilities.readFeatureTypes(),h.name,h.namespaceUri),f=d.featureGeometryTypeKebabDictionary.toJSON(h.geometryType),{operations:S}=this.wfsCapabilities,g=S.GetFeature.url,F=S.GetFeature.outputFormat;return{customParameters:a,featureType:w,fields:h.fields?.map(e=>e.toJSON())??[],geometryField:h.geometryField,geometryType:f,getFeatureUrl:g,getFeatureOutputFormat:F,maxRecordCount:c,maxPageCount:l,maxTotalRecordCount:u,objectIdField:h.objectIdField,spatialReference:h.spatialReference?.toJSON(),swapXY:!!h.swapXY}}async _startWorker(e){const[t,r]=await i.eachAlways([this._createLoadOptions(e),n.open("WFSSourceWorker",{...e,strategy:a("feature-layers-workers")?"dedicated":"local",registryTarget:this})]),o=t.error||r.error||null,c=r.value||null;if(o)throw c&&c.close(),o;const l=t.value;this._connection=r.value,this._workerHandler=this._connection.createInvokeProxy();const u=await this._workerHandler.load(l,e);for(const e of u.warnings)s.getLogger(this.layer).warn("#load()",`${e.message} (title: '${this.layer.title||"no title"}', id: '${this.layer.id??"no id"}')`,{warning:e});this.sourceJSON={dateFieldsTimeReference:{timeZoneIANA:f.utc},extent:u.extent,fields:l.fields,geometryType:l.geometryType,objectIdField:l.objectIdField,geometryField:l.geometryField,drawingInfo:y.createDrawingInfo(l.geometryType),name:l.featureType.title,wfsInfo:{name:l.featureType.name,featureUrl:l.getFeatureUrl,maxFeatures:l.maxRecordCount,swapXY:l.swapXY,supportedSpatialReferences:l.featureType.supportedSpatialReferences,version:"2.0.0",wfsNamespace:l.featureType.namespaceUri}}}},t.__decorate([c.property()],e.WFSSource.prototype,"capabilities",void 0),t.__decorate([c.property({constructOnly:!0})],e.WFSSource.prototype,"layer",void 0),t.__decorate([c.property()],e.WFSSource.prototype,"sourceJSON",void 0),t.__decorate([c.property()],e.WFSSource.prototype,"type",void 0),t.__decorate([c.property()],e.WFSSource.prototype,"wfsCapabilities",void 0),e.WFSSource=t.__decorate([u.subclass("esri.layers.graphics.sources.WFSSource")],e.WFSSource),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});