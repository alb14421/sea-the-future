// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/tslib.es6","../../request","../../core/Error","../../core/Logger","../../core/promiseUtils","../../core/accessorSupport/decorators/property","../../core/has","../../core/RandomLCG","../../core/accessorSupport/decorators/reader","../../core/accessorSupport/decorators/subclass","../../core/accessorSupport/originUtils","../../geometry/Extent","../../geometry/HeightModelInfo","../../geometry/SpatialReference","../support/arcgisLayerUrl","../support/commonProperties","../support/I3SIndexInfo","../support/multiLayerServiceUtils","../support/schemaValidatorLoader","../../portal/Portal","../../portal/PortalItem","../../portal/support/jsonContext","../../webdoc/support/resourceUtils","../../webdoc/support/saveUtils"],function(e,t,r,o,i,a,s,n,l,p,c,d,u,y,h,m,f,v,S,g,_,w,x,I,b){"use strict";const N=-1e38;function R(e){if(null!=e.spatialReference)return h.fromJSON(e.spatialReference);const t=e.store,r=t.indexCRS||t.geographicCRS,o=r&&parseInt(r.slice(r.lastIndexOf("/")+1),10);return null!=o?new h(o):null}function L(e,t,r){e.typeKeywords||(e.typeKeywords=[]);const o=t.getTypeKeywords();for(const t of o)e.typeKeywords.push(t);e.typeKeywords&&(e.typeKeywords=e.typeKeywords.filter((e,t,r)=>r.indexOf(e)===t),1===r&&(e.typeKeywords=e.typeKeywords.filter(e=>"Hosted Service"!==e)))}const O="Scene Service",T={getTypeKeywords:()=>[],portalItemLayerType:"unknown",validationOptions:{enabled:!0,ignoreUnsupported:!1,failPolicy:"throw"}};e.SceneService=e=>{const n=e;let l=class extends n{constructor(){super(...arguments),this.spatialReference=null,this.fullExtent=null,this.heightModelInfo=null,this.minScale=0,this.maxScale=0,this.version={major:Number.NaN,minor:Number.NaN,versionString:""},this.copyright=null,this.sublayerTitleMode="item-title",this.title=null,this.layerId=null,this.url=null,this.indexInfo=null,this._debouncedSaveOperations=a.debounce(async(e,t,r)=>{switch(e){case 0:return this._save(t);case 1:return this._saveAs(r,t)}})}readSpatialReference(e,t){return R(t)}readFullExtent(e,t,r){if(null!=e&&"object"==typeof e){const o=null==e.spatialReference?{...e,spatialReference:R(t)}:e;return u.fromJSON(o,r)}const o=t.store,i=R(t);return null==i||null==o?.extent||!Array.isArray(o.extent)||o.extent.some(e=>e<N)?null:new u({xmin:o.extent[0],ymin:o.extent[1],xmax:o.extent[2],ymax:o.extent[3],spatialReference:i})}parseVersionString(e){const t={major:Number.NaN,minor:Number.NaN,versionString:e},r=e.split(".");return r.length>=2&&(t.major=parseInt(r[0],10),t.minor=parseInt(r[1],10)),t}readVersion(e,t){const r=t.store,o=null!=r.version?r.version.toString():"";return this.parseVersionString(o)}readTitlePortalItem(e){return"item-title"!==this.sublayerTitleMode?void 0:e}readTitleService(e,t){const r=this.portalItem?.title;if("item-title"===this.sublayerTitleMode)return this.url?m.titleFromUrlAndName(this.url,t.name):t.name;let o=t.name;if(!o&&this.url){const e=m.parse(this.url);null!=e&&(o=e.title)}return"item-title-and-service-name"===this.sublayerTitleMode&&r&&(o=r+" - "+o),m.cleanTitle(o)}get parsedUrl(){return S.normalizeParsedUrlObject(this,{separator:"layers"})}async _fetchIndexAndUpdateExtent(e,t){this.indexInfo=v.fetchIndexInfo(this.parsedUrl?.path??"",this.rootNode,e,this.customParameters,this.apiKey,i.getLogger(this),t),null==this.fullExtent||this.fullExtent.hasZ||this._updateExtent(await this.indexInfo)}_updateExtent(e){if("page"===e?.type){const t=e.rootIndex%e.pageSize,r=e.rootPage?.nodes?.[t];if(null==r?.obb?.center||null==r.obb.halfSize)throw new o("sceneservice:invalid-node-page","Invalid node page.");if(r.obb.center[0]<N||null==this.fullExtent||this.fullExtent.hasZ)return;const i=r.obb.halfSize,a=r.obb.center[2],s=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);this.fullExtent.zmin=a-s,this.fullExtent.zmax=a+s}else if("node"===e?.type){const t=e.rootNode?.mbs;if(!Array.isArray(t)||4!==t.length||t[0]<N)return;const r=t[2],o=t[3],{fullExtent:i}=this;i&&(i.zmin=r-o,i.zmax=r+o)}}async _fetchService(e){if(null==this.url)throw new o("sceneservice:url-not-set","Scene service can not be loaded without valid portal item or url");if(null==this.layerId&&/SceneServer\/*$/i.test(this.url)){const t=await this._fetchFirstLayerId(e);null!=t&&(this.layerId=t)}return this._fetchServiceLayer(e)}async _fetchFirstLayerId(e){const t=await r(this.url??"",{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:e});if(t.data&&Array.isArray(t.data.layers)&&t.data.layers.length>0)return t.data.layers[0].id}async _fetchServiceLayer(e){const t=await r(this.parsedUrl?.path??"",{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:e});t.ssl&&this.url&&(this.url=this.url.replace(/^http:/i,"https:"));let o=!1;if(t.data.layerType&&"Voxel"===t.data.layerType&&(o=!0),o)return this._fetchVoxelServiceLayer();const i=t.data;this.read(i,this._getServiceContext()),this.validateLayer(i)}async _fetchVoxelServiceLayer(e){const t=(await r(this.parsedUrl?.path+"/layer",{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:e})).data;this.read(t,this._getServiceContext()),this.validateLayer(t)}_getServiceContext(){return{origin:"service",portalItem:this.portalItem,portal:this.portalItem?.portal,url:this.parsedUrl}}async _ensureLoadBeforeSave(){await this.load(),"beforeSave"in this&&"function"==typeof this.beforeSave&&await this.beforeSave()}validateLayer(e){}async _saveAs(e,t){const r={...T,...t};let i=w.from(e);if(!i)throw new o("sceneservice:portal-item-required","_saveAs() requires a portal item to save to");i.id&&(i=i.clone(),i.id=null);const a=i.portal||_.getDefault();await this._ensureLoadBeforeSave(),i.type=O,i.portal=a;const s=x.createForItemWrite(i,"portal-item",!0),n={layers:[this.write({},s)]};return await Promise.all(s.resources.pendingOperations??[]),await this._validateAgainstJSONSchema(n,s,r),this.url&&(i.url=this.url),i.title||(i.title=this.title),L(i,r,1),await a.signIn(),await a.user.addItem({item:i,folder:r?.folder,data:n}),await I.saveResources(this.resourceReferences,s),this.portalItem=i,d.updateOrigins(s),s.portalItem=i,i}async _save(e){const t={...T,...e};if(!this.portalItem)throw new o("sceneservice:portal-item-not-set","Portal item to save to has not been set on this SceneService");if(this.portalItem.type!==O)throw new o("sceneservice:portal-item-wrong-type",`Portal item needs to have type "${O}"`);await this._ensureLoadBeforeSave();const r=x.createForItemWrite(this.portalItem,"portal-item",!0),i={layers:[this.write({},r)]};return await Promise.all(r.resources.pendingOperations??[]),await this._validateAgainstJSONSchema(i,r,t),this.url&&(this.portalItem.url=this.url),this.portalItem.title||(this.portalItem.title=this.title),L(this.portalItem,t,0),await I.updateItemWithResources(this.portalItem,i,this.resourceReferences,r),d.updateOrigins(r),this.portalItem}async _validateAgainstJSONSchema(e,t,r){const a=r?.validationOptions;b.evaluateWriteErrors(t,{errorName:"sceneservice:save"},{ignoreUnsupported:a?.ignoreUnsupported,supplementalUnsupportedErrors:["scenemodification:unsupported"]});const s=a?.enabled,n=g.getLoader();if(s&&n){const t=(await n()).validate(e,r.portalItemLayerType);if(!t.length)return;const s=`Layer item did not validate:\n${t.join("\n")}`;if(i.getLogger(this).error(`_validateAgainstJSONSchema(): ${s}`),"throw"===a.failPolicy){const e=t.map(e=>new o("sceneservice:schema-validation",e));throw new o("sceneservice-validate:error","Failed to save layer item due to schema validation, see `details.errors`.",{validationErrors:e})}}}};return t.__decorate([s.property(f.id)],l.prototype,"id",void 0),t.__decorate([s.property({type:h})],l.prototype,"spatialReference",void 0),t.__decorate([p.reader("spatialReference",["spatialReference","store.indexCRS","store.geographicCRS"])],l.prototype,"readSpatialReference",null),t.__decorate([s.property({type:u})],l.prototype,"fullExtent",void 0),t.__decorate([p.reader("fullExtent",["fullExtent","store.extent","spatialReference","store.indexCRS","store.geographicCRS"])],l.prototype,"readFullExtent",null),t.__decorate([s.property({readOnly:!0,type:y})],l.prototype,"heightModelInfo",void 0),t.__decorate([s.property({type:Number,json:{name:"layerDefinition.minScale",write:!0,origins:{service:{read:{source:"minScale"},write:!1}}}})],l.prototype,"minScale",void 0),t.__decorate([s.property({type:Number,json:{name:"layerDefinition.maxScale",write:!0,origins:{service:{read:{source:"maxScale"},write:!1}}}})],l.prototype,"maxScale",void 0),t.__decorate([s.property({readOnly:!0})],l.prototype,"version",void 0),t.__decorate([p.reader("version",["store.version"])],l.prototype,"readVersion",null),t.__decorate([s.property({type:String,json:{read:{source:"copyrightText"}}})],l.prototype,"copyright",void 0),t.__decorate([s.property({type:String,json:{read:!1}})],l.prototype,"sublayerTitleMode",void 0),t.__decorate([s.property({type:String})],l.prototype,"title",void 0),t.__decorate([p.reader("portal-item","title")],l.prototype,"readTitlePortalItem",null),t.__decorate([p.reader("service","title",["name"])],l.prototype,"readTitleService",null),t.__decorate([s.property({type:Number,json:{origins:{service:{read:{source:"id"}},"portal-item":{write:{target:"id",isRequired:!0,ignoreOrigin:!0},read:!1}}}})],l.prototype,"layerId",void 0),t.__decorate([s.property(S.urlProperty({separator:"layers"}))],l.prototype,"url",void 0),t.__decorate([s.property({readOnly:!0})],l.prototype,"parsedUrl",null),t.__decorate([s.property({readOnly:!0})],l.prototype,"store",void 0),t.__decorate([s.property({type:String,readOnly:!0,json:{read:{source:"store.rootNode"}}})],l.prototype,"rootNode",void 0),l=t.__decorate([c.subclass("esri.layers.mixins.SceneService")],l),l},e.sceneServiceItemType=O,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});