// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/tslib.es6","../../Graphic","../../request","../../core/deprecate","../../core/Error","../../core/lang","../../core/Logger","../../core/reactiveUtils","../../core/urlUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/accessorSupport/decorators/reader","../../core/accessorSupport/decorators/subclass","../../core/accessorSupport/decorators/writer","../../geometry/Extent","../../geometry/Polygon","../../geometry/SpatialReference","../../geometry/support/spatialReferenceUtils","../support/commonProperties","../support/DimensionalDefinition","../support/ExportImageServiceParameters","../support/Field","../support/FieldsIndex","../support/imageBitmapUtils","../support/imageryRendererUtils","../support/MosaicRule","../support/MultidimensionalSubset","../support/PixelBlock","../support/rasterEnums","../support/rasterFieldUtils","../support/RasterFunction","../support/RasterInfo","../support/rasterDatasets/multidimensionalUtils","../support/rasterFormats/RasterCodec","../support/rasterFunctions/pixelUtils","../support/rasterFunctions/vectorFieldUtils","../../renderers/support/rasterRendererHelper","../../renderers/support/RasterSymbolizer","../../renderers/support/rasterTypeUtils","../../rest/imageService","../../rest/imageService/fetchRasterInfo","../../rest/imageService/getCatalogItemRasterInfo","../../rest/query/executeForCount","../../rest/query/executeForIds","../../rest/query/executeQueryJSON","../../rest/support/FeatureSet","../../rest/support/ImageIdentifyParameters","../../rest/support/Query"],function(e,t,r,i,s,a,n,o,l,u,p,c,m,d,h,y,g,f,_,R,I,b,v,w,S,x,F,D,T,O,M,P,C,N,q,A,E,V,Q,J,U,j,B,L,z,H,G,k,W){"use strict";const K=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),$=c.ensureRange(c.ensureNumber,{min:0,max:255});e.ArcGISImageService=e=>{const X=e;let Y=class extends X{constructor(){super(...arguments),this._functionRasterInfos={},this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new b.ExportImageServiceParameters({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.length<1||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(e=>"number"==typeof e))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,r){null!=e&&"lerc"!==this.format&&(t[r]=e)}writeCompressionTolerance(e,t,r){"lerc"===this.format&&null!=e&&(t[r]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?F.fromJSON(t):null}get fieldsIndex(){return this.fields?new w(this.fields):null}set format(e){e&&K.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t?.mosaicMethod&&(t=F.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const r=e||t.mosaicRule;return r?F.fromJSON(r):this._isMosaicRuleSupported(t)?F.fromJSON(t):null}writeMosaicRule(e,t,r){const{mosaicRule:i}=this;this._isValidCustomizedMosaicRule(i)&&(t[r]=i.toJSON())}writeNoData(e,t,r){null!=e&&"number"==typeof e&&(t[r]=$(e))}readObjectIdField(e,t){if(!e){const r=t.fields.find(e=>"esriFieldTypeOID"===e.type||"oid"===e.type);e=r?.name}return e}get parsedUrl(){return u.urlToObject(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:t}=this;if(e){const r=t?.find(({name:t})=>t===e);return r?.renderer.clone()}return this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,t,r){const i=t?.layerDefinition?.drawingInfo?.renderer,s=J.read(i,r);return null==s?null:("vector-field"===s.type&&t.symbolTileSize&&!i.symbolTileSize&&(s.symbolTileSize=t.symbolTileSize),x.isSupportedRendererType(s)||o.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),s)}writeRenderer(e,t,r){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),"vector-field"===e.type&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.fields?.map(e=>e.clone())??[];e.push(M.getServicePixelValueField()),"mosaic-dataset"===this.sourceType&&this.fields?.length&&e.push(M.getItemPixelValueField()),this.version>=10.4&&null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.some(({name:e})=>"none"===e.toLowerCase())&&e.push(M.getRawServicePixelValueField()),null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.filter(({name:e})=>"none"!==e.toLowerCase()).forEach(({name:t})=>e.push(M.getProcessedServicePixelValueField(t)));const{rasterInfo:t}=this;if(this._isVectorDataSet()){const r=t?.multidimensionalInfo?.variables[0].unit?.trim(),i=M.getMagnitudeField(r),s=M.getDirectionField();e.push(i,s)}if(t?.multidimensionalInfo&&"raster-dataset"===this.sourceType){const r=M.getMultidimensionalFields(t.multidimensionalInfo);e.push(...r)}const r=t?.attributeTable;if(null!=r){const t=M.getRasterAttributeTableFields(r);e.push(...t)}return e}set rasterFunction(e){let t=e;t?.rasterFunction&&(t=P.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const r=t.rasterFunctionInfos;return t.renderingRule||r?.length&&"None"!==r[0].name?this._isRFTJson(t.renderingRule)?P.fromJSON({rasterFunctionDefinition:t.renderingRule}):P.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const r=e||t.extent.spatialReference;return r?f.fromJSON(r):null}writePixelType(e,t,r){null!=this.serviceRasterInfo&&this.pixelType===this.serviceRasterInfo.pixelType||(t[r]=O.pixelTypeKebabDict.toJSON(e))}readVersion(e,t){let r=t.currentVersion;return r||(r=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),r}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let r=e,{renderer:i,symbolizer:s,pixelFilter:a}=this;const{isRawData:n}=e;if(n&&"lerc"!==this.format&&(i??=V.createDefaultRenderer(this.rasterInfo,{bandIds:this.bandIds,variableName:this.rasterFunction?null:this.mosaicRule?.multidimensionalDefinition?.[0].variableName}),s||(this.symbolizer=new Q({rendererJSON:i.toJSON(),rasterInfo:this.rasterInfo}),s=this.symbolizer)),(n||!this._isPicture())&&i&&s&&!a){await this._updateSymbolizer(s,i);const{bandIds:a}=this;r=await this._symbolize({pixelData:e,bandIds:a,symbolizer:s},t)}return r}async highlightPixels(e,t){const r=e.highlightOptions.toJSON(),{bandId:i}=r;if(null==i)r.bandId=0;else{const e=this.bandIds?.length?this.bandIds.indexOf(i):i;if(e<0||e>2)return;r.bandId=e}const s=this._rasterJobHandler;s?await s.highlightPixels({...e,highlightOptions:r},t):A.highlightPixels(e.pixelBlock,e.renderedPixelBlock,r)}destroy(){this._shutdownJobHandler()}async calculateVolume(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsCalculateVolume)throw new a("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=n.clone(e),this.mosaicRule&&null==e.mosaicRule&&(e.mosaicRule=this.mosaicRule),U.calculateVolume(this.url,e,this._getRequestOptions(t))}async computeAngles(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeAngles)throw new a("imagery-layer:compute-angles","this operation is not supported on the input image service");return U.computeAngles(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputePixelLocation)throw new a("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return U.computePixelSpaceLocations(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeHistograms)throw new a("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=n.clone(e),this._applyMosaicAndRenderingRules(e),U.computeHistograms(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeStatisticsHistograms)throw new a("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=n.clone(e),this._applyMosaicAndRenderingRules(e),U.computeStatisticsHistograms(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const r=await this._fetchCapabilities(t?.signal);if(!("base-and-top"===e.operationType?r.mensuration.supportsHeightFromBaseAndTop:"base-and-top-shadow"===e.operationType?r.mensuration.supportsHeightFromBaseAndTopShadow:r.mensuration.supportsHeightFromTopAndTopShadow))throw new a("imagery-layer:measure-height","this operation is not supported on the input image service");return e=n.clone(e),this._applyMosaicRule(e),U.measureHeight(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const r=await this._fetchCapabilities(t?.signal);if(!r.mensuration.supportsAreaAndPerimeter||e.is3D&&!r.mensuration.supports3D)throw new a("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=n.clone(e),this._applyMosaicRule(e),U.measureAreaAndPerimeter(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const r=await this._fetchCapabilities(t?.signal);if(!r.mensuration.supportsDistanceAndAngle||e.is3D&&!r.mensuration.supports3D)throw new a("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=n.clone(e),this._applyMosaicRule(e),U.measureDistanceAndAngle(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const r=await this._fetchCapabilities(t?.signal);if(!r.mensuration.supportsPointOrCentroid||e.is3D&&!r.mensuration.supports3D)throw new a("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=n.clone(e),this._applyMosaicRule(e),U.measurePointOrCentroid(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new a("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if("polyline"!==e.geometry.type)throw new a("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return U.measureLengthFromImage(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new a("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if("polygon"!==e.geometry.type)throw new a("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return U.measureAreaFromImage(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return null!=t?t.get(e):void 0}getFieldDomain(e,t){const r=this.getField(e);return r?r.domain:null}fetchImage(e,t,r,i={}){if(s.deprecatedFunction(o.getLogger(this),"`ImageryLayer.fetchImage` is deprecated in favor of 'ImageryLayer.fetchPixels'.",{replacement:"ImageryLayer.fetchPixels",version:"4.33",warnOnce:!0}),null==e||null==t||null==r)throw new a("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");return this.internalFetchImage(e,t,r,i)}async internalFetchImage(e,t,r,i={}){await this._updateCurrentRasterInfo();const{exportImageServiceParameters:s}=this;let a=!1;i.requestRawData&&(await this._initJobHandler(),await this._updateCurrentRasterInfo(),s.requestRawData||"lerc"===this.format||(a=!0,s.requestRawData=!0));const n=this.getExportImageServiceParameters(e,t,r,i.timeExtent);if(a&&(s.requestRawData=!1),null==n){if(i.requestAsImageElement&&this._canRequestImageElement(this.format)){const e=document.createElement("canvas");return e.width=t,e.height=r,i.returnImageBitmap?{imageBitmap:await S.createBitmap(e,`${Z(this.parsedUrl)}/exportImage`,i.signal)}:{imageOrCanvasElement:e}}const{bandIds:s,rasterInfo:a}=this,n=(s?.length||a.bandCount)??0,o=t*r,l=a.pixelType,u=[];for(let e=0;e<n;e++)u.push(T.createEmptyBand(l,o));return{pixelData:{pixelBlock:new T({width:t,height:r,pixels:u,mask:new Uint8Array(o),pixelType:l}),extent:e}}}const o=!!i.requestAsImageElement&&!this.pixelFilter,l=o&&!!i.returnImageBitmap,u={imageServiceParameters:n,imageProps:{extent:e,width:t,height:r,format:this.format},requestAsImageElement:o,returnImageBitmap:l,signal:i.signal};return this._requestArrayBuffer(u)}async fetchPixels(e,t,r,i={}){await this._initJobHandler(),i.applyRendering&&this._updateCurrentRasterInfo();const s=i.applyRendering?void 0:new b.ExportImageServiceParameters({layer:this,requestRawData:!0,interpolation:i.interpolation??"nearest",bandIds:i.bandIds??[]}),a=this.getExportImageServiceParameters(e,t,r,i.timeExtent,s);if(null==a)return{extent:e,pixelBlock:null};delete a.pixelType,delete a.bandIds,delete a.compressionQuality;const n={imageServiceParameters:a,imageProps:{extent:e,width:t,height:r,format:this.format},requestAsImageElement:!1,returnImageBitmap:!1,signal:i.signal},{pixelData:o}=await this._requestArrayBuffer(n);return o??{extent:e,pixelBlock:null}}fetchKeyProperties(e){return i(Z(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(e=>e.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new a("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):i(Z(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(e=>G.fromJSON(e.data))}getCatalogItemRasterInfo(e,t){const r={...t,query:this._getQueryParams()};return B.getCatalogItemRasterInfo(Z(this.parsedUrl),e,r)}async getCatalogItemICSInfo(e,t){const{data:r}=await i(Z(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),s=r?.ics;if(!s)return;let a=null;try{a=(await i(Z(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!a?.spatialReference)return{ics:s,icsToPixelTransform:null,icsExtent:null,northDirection:null};const n=this.version>=10.7?i(Z(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(e=>e.data).catch(()=>({})):{},o=a.spatialReference,l={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[a]}),inSR:_.srToRESTValue(o),outSR:"0:"+e},u=i(Z(this.parsedUrl)+"/project",{query:this._getQueryParams(l),...t}).then(e=>e.data).catch(()=>({})),p=(a.xmin+a.xmax)/2,c=(a.ymax-a.ymin)/6,m=a.ymin+c,d=[];for(let e=0;e<5;e++)d.push({x:p,y:m+c*e});const h={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:d}),inSR:_.srToRESTValue(o),outSR:"0:"+e},g=i(Z(this.parsedUrl)+"/project",{query:this._getQueryParams(h),...t}).then(e=>e.data).catch(()=>({})),R=await Promise.all([n,u,g]);let I=R[0].ipxf;if(null==I){const e=s.geodataXform?.xf_0;"topup"===e?.name?.toLowerCase()&&6===e?.coefficients?.length&&(I={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const b=y.fromJSON(R[1]?.geometries?.[0]);b&&(b.spatialReference=new f({wkid:0,imageCoordinateSystem:s}));const v=R[2].geometries?R[2].geometries.filter(e=>null!=e?.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y):[],w=v.length;if(w<3)return{ics:s,icsToPixelTransform:I,icsExtent:b,northDirection:null};let S=0,x=0,F=0,D=0;for(let e=0;e<w;e++)S+=v[e].x,x+=v[e].y,F+=v[e].x*v[e].x,D+=v[e].x*v[e].y;const T=(w*D-S*x)/(w*F-S*S);let O=0;const M=v[4].x>v[0].x,P=v[4].y>v[0].y;return T===1/0?O=P?90:270:0===T?O=M?0:180:T>0?O=M?180*Math.atan(T)/Math.PI:180*Math.atan(T)/Math.PI+180:T<0&&(O=P?180+180*Math.atan(T)/Math.PI:360+180*Math.atan(T)/Math.PI),{ics:s,icsToPixelTransform:I,icsExtent:b,northDirection:O}}async generateRasterInfo(e,t){e=c.ensureClass(P,e);const r={...t,query:this._getQueryParams()};if(!e||"none"===e.functionName?.toLowerCase()||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??j.fetchServiceRasterInfo(Z(this.parsedUrl),this.sourceJSON,r);const i=function(e){const t=JSON.stringify(e),r=t.includes('"rasterFunctionDefinition":{'),i=r?t.match(/"type":"(.*?FunctionArguments")/gi):t.match(/"rasterFunction":"(.*?")/gi),s=i?.map(e=>r?e.slice(8,-18):e.slice(18,-1));return s?s.join("/"):null}(e);if(!i)throw new a("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[i])return this._functionRasterInfos[i];const s=j.generateRasterInfo(Z(this.parsedUrl),e,r);this._functionRasterInfos[i]=s;try{return await s}catch(e){throw this._functionRasterInfos[i]=null,e}}getExportImageServiceParameters(e,t,r,i,s){e=e.clone().shiftCentralMeridian();const a=U.getImageSpatialReferenceQueryParameter(e.spatialReference,Z(this.parsedUrl));s??=this.exportImageServiceParameters;const n=s.toJSON(),{bandIds:o,noData:l}=n;let{renderingRule:u}=n;const p=this.rasterFunction?.rasterFunctionDefinition,c=this.renderer?.type,m=!c||"raster-stretch"===c||"raster-colormap"===c||"unique-value"===c||"class-breaks"===c||"raster-shaded-relief"===c;if(o?.length&&this._hasRasterFunction(this.rasterFunction)&&!p&&m){const e={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:o}};if("Stretch"===u.rasterFunction)e.rasterFunctionArguments.Raster=u.rasterFunctionArguments.Raster,u.rasterFunctionArguments.Raster=e;else if("Colormap"===u.rasterFunction){const t=u.rasterFunctionArguments.Raster;"Stretch"===t?.rasterFunction?(e.rasterFunctionArguments.Raster=t.rasterFunctionArguments.Raster,t.rasterFunctionArguments.Raster=e):(e.rasterFunctionArguments.Raster=t,u.rasterFunctionArguments.Raster=e)}else e.rasterFunctionArguments.Raster=u,u=e;n.bandIds=void 0}else n.bandIds=o?.join(",");Array.isArray(l)&&l.length>0&&(n.noData=l.join(","));const d=this._processMultidimensionalIntersection(null,i,s.mosaicRule);if(d.isOutSide)return null;n.mosaicRule=null!=d.mosaicRule?JSON.stringify(d.mosaicRule):null,i=d.timeExtent,n.renderingRule=this._getRenderingRuleString(P.fromJSON(u));const h={};if(null!=i){const{start:e,end:t}=i.toJSON();e&&t&&e===t?h.time=""+e:null==e&&null==t||(h.time=`${e??"null"},${t??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:a,imageSR:a,size:t+","+r,...n,...h}}async getSamples(e,t){const r=await this._fetchCapabilities(t?.signal);if(!r?.operations.supportsGetSamples)throw new a("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=n.clone(e);const{raster:i}=this;return i&&null==e.raster&&(e.raster=i),U.getSamples(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsIdentify)throw new a("imagery-layer:identify","identify operation is not supported on the input image service");e=n.clone(e),this.version<10.91&&"extent"===e.geometry?.type&&(e.geometry=g.fromExtent(e.geometry));const r=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(r.isOutSide)throw new a("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=r.timeExtent,e.mosaicRule=r.mosaicRule;const{raster:i,rasterFunction:s}=this;return s&&null==e.rasterFunction&&(e.rasterFunction=s),i&&null==e.raster&&(e.raster=i),U.identify(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMap)throw new a("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return U.imageToMap(Z(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMapMultiray)throw new a("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return U.imageToMapMultiray(Z(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMapToImage)throw new a("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return U.mapToImage(Z(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsFindImages)throw new a("imagery-layer:find-images","findImages operation is not supported on the input image service");return U.findImages(Z(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsGetImageUrl)throw new a("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return U.getImageUrl(Z(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){return new W({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryBoundary)throw new a("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},U.queryBoundary(Z(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),H.executeQueryJSON(this.url,e,t)}async queryObjectIds(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),z.executeForIds(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryGPSInfo)throw new a("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},U.queryGPSInfo(Z(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),L.executeForCount(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new a("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:r,returnDomainValues:i,returnTopmostRaster:s,showNoDataRecords:n}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let o=!1,l=null,u=null;const p=M.commonRasterFieldNames.servicePixelValue.toLowerCase(),c=this._rasterFunctionNamesIndex;if(null!=e.outFields&&(o=e.outFields.some(e=>!e.toLowerCase().startsWith(p)),this.version>=10.4)){const t=e.outFields.filter(e=>e.toLowerCase().startsWith(p)&&e.length>p.length).map(e=>{const t=e.slice(p.length+1);return[this._updateRenderingRulesFunctionName(t,c),t]});l=t.map(e=>new P({functionName:e[0]})),u=t.map(e=>e[1]);const{rasterFunction:r}=this;0===l.length?r?.functionName?(l.push(r),u.push(r.functionName)):l=null:r?.functionName&&!l.some(e=>e.functionName===r.functionName)&&(l.push(r),u.push(r.functionName))}const m=null==e.outSpatialReference||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:d}=this;let h=e.timeExtent||this.timeExtent;if(d){const{isOutside:t,intersection:r}=N.intersectMultimensionalSubset(d,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(t)throw new a("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");null!=r?.timeExtent&&(h=r.timeExtent)}const y=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,h);let f=e.geometry;this.version<10.91&&"extent"===f?.type&&(f=g.fromExtent(f));const _=this._getQueryParams({geometry:f,timeExtent:h,mosaicRule:y,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:l,pixelSize:r,returnCatalogItems:o,returnGeometry:m,raster:this.raster,maxItemCount:s?1:null});delete _.f;const R=new k(_);try{await this._generateRasterInfo(this.rasterFunction);const r=await U.identify(this.url,R,{signal:t?.signal,query:{...this.customParameters}}),s=e.outFields,a=null!=r.value&&r.value.toLowerCase().includes("nodata"),l=o&&!m&&r?.catalogItems?.features.length&&(n||!a),p=this.multidimensionalInfo&&"raster-dataset"===this.sourceType?N.getEffectiveMultidimensionalDefinition({rasterInfo:this.rasterInfo,multidimensionalDefinition:y?.multidimensionalDefinition,timeExtent:h,multidimensionalSubset:this.multidimensionalSubset}):null;if(!l)return this._processVisibleRastersResponse(r,{returnDomainValues:i,templateRRFunctionNames:u,showNoDataRecords:n,templateFields:s,effectiveMultidimensionalDefinition:p});const c=this.objectIdField||"ObjectId",d=r.catalogItems?.features??[],g=d.map(e=>e.attributes?.[c]),f=new W({objectIds:g,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[c]}),_=await this.queryRasters(f);return _?.features?.length&&_.features.forEach(t=>{d.forEach(r=>{r.attributes[c]===t.attributes[c]&&t.geometry&&(r.geometry=t.geometry.clone(),null!=e.outSpatialReference&&(r.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(r,{returnDomainValues:i,templateRRFunctionNames:u,showNoDataRecords:n,templateFields:s,effectiveMultidimensionalDefinition:p})}catch{throw new a("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const r=i(Z(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(e=>e.data?.statistics),s=i(Z(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(e=>e.data?.histograms),a=await Promise.all([r,s]);return a[0]&&a[0].forEach(e=>{e.avg=e.mean,e.stddev=e.standardDeviation}),{statistics:a[0]||null,histograms:a[1]||null}}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return N.getSubsetVariablesFromMdInfo(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,r=null!=this.serviceRasterInfo?Promise.resolve(this.serviceRasterInfo):j.fetchServiceRasterInfo(Z(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(e=>(this._set("serviceRasterInfo",e),this._set("multidimensionalInfo",e.multidimensionalInfo),j.patchServiceInfo(e,t),e)),i=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,s=this._getRasterFunctionInfos();return Promise.all([r,i,s]).then(e=>{e[1]?this._set("rasterInfo",e[1]):this._set("rasterInfo",e[0]),e[2]&&this._set("rasterFunctionInfos",e[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),o.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([l.watch(()=>this.rasterFunction,e=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(e).then(e=>{e&&(this.rasterInfo=e)})})]);const{serviceRasterInfo:t}=this;null!=t.multidimensionalInfo&&this._updateMultidimensionalDefinition(t)})}_combineMosaicRuleWithTimeExtent(e,t){const r=this.timeInfo,{multidimensionalInfo:i}=this.serviceRasterInfo;if(null==e||null==i||null==t||null==r?.startField)return e;const{startField:s}=r,a=i.variables.some(e=>e.dimensions.some(e=>e.name===s))?s:"StdTime";if(e=e.clone(),"mosaic-dataset"===this.sourceType)return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter(e=>e.dimensionName!==a),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const n=e.multidimensionalDefinition.filter(e=>e.dimensionName===a),o=null!=t.start?t.start.getTime():null,l=null!=t.end?t.end.getTime():null,u=null==o||null==l||o===l,p=u?[o||l]:[[o,l]],c=this.version>=10.8;if(n.length)n.forEach(e=>{e.dimensionName===a&&(c?(e.dimensionName=null,e.isSlice=!1,e.values=[]):(e.isSlice=u,e.values=p))});else if(!c){const t=e.multidimensionalDefinition.filter(e=>null!=e.variableName&&null==e.dimensionName);t.length?t.forEach(e=>{e.dimensionName=a,e.isSlice=u,e.values=p}):e.multidimensionalDefinition.push(new I({variableName:"",dimensionName:a,isSlice:u,values:p}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return null==e?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(e=>!(!e.variableName&&!e.dimensionName)),0===e.multidimensionalDefinition.length&&(e.multidimensionalDefinition=null)),"mosaic-dataset"!==this.sourceType&&null==e.multidimensionalDefinition?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQuery)throw new a("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=null!=e?c.ensureClass(W,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:r}=this;return"unique-value"===e.type&&this._hasRasterFunction(r)&&1===t?.bandCount&&["u8","s8"].includes(t.pixelType)||null!=t&&null!=e&&V.getSupportedRendererTypes(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let t=this.sourceJSON;if(!t){const{data:r,ssl:s}=await i(Z(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=r,this.sourceJSON=t,s&&(this.url=this.url.replace(/^http:/i,"https:"))}if(t.capabilities?.toLowerCase().split(",").map(e=>e.trim()).indexOf("tilesonly")>-1)throw new a("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?"esriImageServiceSourceTypeMosaicDataset"===e.serviceSourceType:e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const t=this._isMosaicDataset(e),r=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return t||r}_isVectorFieldResampleFunction(e){if(null==e)return!1;const{functionName:t,functionArguments:r}=e,i="resample"===t?.toLowerCase(),s=r?.ResampleType||r?.resampleType;return i&&(7===s||10===s)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const t=this._isPicture(),{rasterInfo:r}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){const t=this.mosaicRule?.multidimensionalDefinition?.[0].variableName,i=V.matchPresetRenderer({variableName:t,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&r.bandCount>=3){const e=i?.bandIds??V.getDefaultBandCombination(r);!e||3===r.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}e||(e=i?.renderer??V.createDefaultRenderer(r,{bandIds:this.bandIds,variableName:this.rasterFunction?null:t}));const s=V.normalizeRendererJSON(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=s,this.symbolizer.rasterInfo=r):this.symbolizer=new Q({rendererJSON:s,rasterInfo:r}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:null!=e.pixelBlock?e.pixelBlock.clone():null}}_getQueryParams(e){null!=e?.renderingRule&&"string"!=typeof e.renderingRule&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:r}=this;return{raster:t,viewId:r,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,t,r){return this._rasterJobHandler?this._rasterJobHandler.decode({data:e,options:t}):q.decode(e,t,r)}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;if(this.loaded)return t;if(t&&this.version>=10.3){if(1===t.length&&"none"===t[0].name.toLowerCase())return t;const r=await i(Z(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e});return r.data?.rasterFunctionInfos}return null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:r,returnImageBitmap:s,signal:n}=e;if(r&&this._canRequestImageElement(t.format)){const r=`${Z(this.parsedUrl)}/exportImage`,{data:a}=await i(r,{responseType:s?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:n});return a instanceof Blob?{imageBitmap:await S.createBitmap(a,r,n),params:t}:{imageOrCanvasElement:a,params:t}}const o=this._initJobHandler(),l=i(Z(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:n}),u=(await Promise.all([l,o]))[0].data,p=t.format||"jpgpng";let c=p;if("bsq"!==c&&"bip"!==c&&(c=q.getFormat(u)),!c)throw new a("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(u)));const m={signal:n},d="gif"===p||"bmp"===p||p.includes("png")&&("png"===c||"jpg"===c)?q.decode(u,{useCanvas:!0,...t},m):this._decodePixelBlock(u,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:p},m);return{pixelData:{pixelBlock:await d,extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch(()=>null)}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=N.getDefaultMultidimensionalDefinition(e,{multidimensionalSubset:this.multidimensionalSubset});if(null!=t&&t.length>0){this.mosaicRule=this.mosaicRule||new F;const e=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&"none"!==this.rasterFunction.functionName?.toLowerCase()&&t.forEach(e=>e.variableName=""),t=t.filter(({variableName:e,dimensionName:t})=>e&&"*"!==e||t),!e?.length&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const i=e.value,{templateRRFunctionNames:s,showNoDataRecords:a,returnDomainValues:n,templateFields:o}=t,l=e.processedValues;let u=e.catalogItems?.features,p=e.properties?.Values?.map(e=>e.replaceAll(/ /gi,", "))||[];const c=this.objectIdField||"ObjectId",m="string"==typeof i&&i.toLowerCase().includes("nodata"),d=[];if(i&&!u&&(!m||a)){const e={};e[c]=0,p=[i],u=[new r({geometry:this.fullExtent,attributes:e})],this.multidimensionalInfo&&"raster-dataset"===this.sourceType&&M.addMultidimensionalFieldValues(this.rasterFields,e,t.effectiveMultidimensionalDefinition)}if(!u)return[];this._updateResponseFieldNames(u,o),m&&!a&&(u=[]);const{itemPixelValue:h,servicePixelValue:y}=M.commonRasterFieldNames,g=this.rasterFields.some(e=>e.name===h);for(let e=0;e<u.length;e++){const t=u[e];if(null!=i){const r=p[e],n=this.rasterFunction&&l&&l.length>0&&s&&s.length>0&&s.includes(this.rasterFunction.functionName)?l[s.indexOf(this.rasterFunction.functionName)]:i;if("nodata"===r.toLowerCase()&&!a)continue;g&&(t.attributes[h]=r),t.attributes[y]=n,this._updateFeatureWithMagDirValues(t,r);const o=this.fields&&this.fields.length>0;let u=this.rasterFunction&&null!=this.serviceRasterInfo.attributeTable?o?r:i:n;this.rasterFunction||(u=o?r:i),this._updateFeatureWithRasterAttributeTableValues(t,u)}if(t.sourceLayer=t.layer=this,n&&this._updateFeatureWithDomainValues(t),s&&l&&s.length===l.length)for(let e=0;e<s.length;e++){const r=`${M.commonRasterFieldNames.servicePixelValue}.${s[e]}`;t.attributes[r]=l[e]}d.push(u[e])}return d}_processMultidimensionalIntersection(e,t,r){const{multidimensionalSubset:i}=this;if(!i)return{isOutSide:!1,timeExtent:t,mosaicRule:r=this._combineMosaicRuleWithTimeExtent(r,t)};if(i){const{isOutside:r,intersection:s}=N.intersectMultimensionalSubset(i,{geometry:e,timeExtent:t});if(r)return{isOutSide:!0,timeExtent:null,mosaicRule:null};null!=s?.timeExtent&&(t=s.timeExtent)}if(r=this._combineMosaicRuleWithTimeExtent(r,t),r?.multidimensionalDefinition){const{isOutside:e}=N.intersectMultimensionalSubset(i,{multidimensionalDefinition:r.multidimensionalDefinition});if(e)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:r}}_updateFeatureWithRasterAttributeTableValues(e,t){const r=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(null==r)return;const{features:i,fields:s}=r,a=s.map(e=>e.name).find(e=>"value"===e.toLowerCase());if(!a)return;const n=i.filter(e=>e.attributes[a]===(null!=t?parseInt(t,10):null));n&&n[0]&&s.forEach(t=>{const r=M.rasterFieldPrefix+t.name;e.attributes[r]=n[0].attributes[t.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const r=t.split(/,\s*/).map(e=>parseFloat(e)),i=r.map(e=>[e]),s=r.map(e=>({minValue:e,maxValue:e,noDataValue:null})),a=new T({height:1,width:1,pixelType:"f32",pixels:i,statistics:s});null!=this.pixelFilter&&this.pixelFilter({pixelBlock:a,extent:new y(0,0,0,0,this.spatialReference)});const n="esriImageServiceDataTypeVector-MagDir"===this.serviceDataType?[a.pixels[0][0],a.pixels[1][0]]:E.uvComponentToVector([a.pixels[0][0],a.pixels[1][0]]);e.attributes[M.commonRasterFieldNames.magnitude]=n[0],e.attributes[M.commonRasterFieldNames.direction]=n[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter(e=>e.domain&&"coded-value"===e.domain.type);null!=t&&t.forEach(t=>{const r=e.attributes[t.name];if(null!=r){const i=t.domain.codedValues.find(e=>e.code===r);i&&(e.attributes[t.name]=i.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const r=this.fieldsIndex;null!=r&&e.forEach(e=>{if(e?.attributes)for(const i of t){const t=r.get(i)?.name;t&&t!==i&&(e.attributes[i]=e.attributes[t],delete e.attributes[t])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return null!=e?.functionName&&"none"!==e.functionName.toLowerCase()}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const r=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(r)?t.get(r):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return"esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:r,rasterFunction:i}=this;i&&null==e.rasterFunction&&(e.rasterFunction=i),r&&null==e.mosaicRule&&(e.mosaicRule=r),t&&null==e.raster&&(e.raster=t)}async _updateCurrentRasterInfo(e){if(this.renderer||this.symbolizer){const t=await this._generateRasterInfo(this.rasterFunction,{signal:e});t&&(this.rasterInfo=t)}}_applyMosaicRule(e){const{raster:t,mosaicRule:r}=this;r&&null==e.mosaicRule&&(e.mosaicRule=r),t&&null==e.raster&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(e=>e.trim()):["image","catalog"],{currentVersion:r,maxRecordCount:i}=e,s=t.includes("image"),a="esriImageServiceDataTypeElevation"===e.serviceDataType,n=!(!e.spatialReference&&!e.extent?.spatialReference),o=t.includes("edit"),l=t.includes("mensuration")&&n,u=null==e.mensurationCapabilities?[]:e.mensurationCapabilities.toLowerCase().split(",").map(e=>e.trim()),p=l&&u.includes("basic"),c=this._isMosaicDataset(e)&&t.includes("catalog"),m=t.includes("download"),d=r>=10.7&&a||r>=11.4&&(a||l&&u.includes("3d")),h=c&&e.fields&&e.fields.length>0,y=h&&e.supportsAdvancedQueries?e.advancedQueryCapabilities:void 0;return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:s,supportsExportImage:s,supportsIdentify:s,supportsImageToMap:r>=11.2&&c,supportsImageToMapMultiray:r>=11.2&&c,supportsMapToImage:r>=11.2&&c,supportsFindImages:r>=11.2&&c,supportsGetImageUrl:r>=11.3&&m,supportsMeasure:l,supportsMeasureFromImage:r>=11.2,supportsDownload:m,supportsQuery:h,supportsGetSamples:r>=10.2&&s,supportsProject:r>=10.3&&s,supportsComputeStatisticsHistograms:r>=10.4&&s,supportsQueryBoundary:r>=10.6&&s,supportsCalculateVolume:d,supportsComputePixelLocation:r>=10.7&&c,supportsComputeAngles:r>=10.91,supportsQueryGPSInfo:r>=11.2&&c,supportsAdd:o,supportsDelete:o,supportsEditing:o,supportsUpdate:o,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:i,maxRecordCountFactor:void 0,maxUniqueIDCount:void 0,supportsStatistics:!!y?.supportsStatistics,supportsOrderBy:!!y?.supportsOrderBy,supportsDistinct:!!y?.supportsDistinct,supportsPagination:!!y?.supportsPagination,supportsPaginationOnAggregatedQueries:!!y?.supportsPaginationOnAggregatedQueries,supportsStandardizedQueriesOnly:!!y?.useStandardizedQueries,supportsPercentileStatistics:!!y?.supportsPercentileStatistics,supportsCentroid:!!y?.supportsReturningGeometryCentroid,supportsCurrentUser:!1,supportsDistance:!!y?.supportsQueryWithDistance,supportsExtent:!!y?.supportsReturningQueryExtent,supportsGeometryProperties:!!y?.supportsReturningGeometryProperties,supportsHavingClause:!!y?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:y?.supportsSqlExpression??!!y,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!y?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:p,supportsAreaAndPerimeter:p,supportsPointOrCentroid:p,supportsHeightFromBaseAndTop:l&&u.includes("base-top height"),supportsHeightFromBaseAndTopShadow:l&&u.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:l&&u.includes("top-top shadow height"),supports3D:l&&u.includes("3d")}}}};function Z(e){return e?.path??""}return t.__decorate([p.property({clonable:!1})],Y.prototype,"_functionRasterInfos",void 0),t.__decorate([p.property({readOnly:!0})],Y.prototype,"_serviceSupportsMosaicRule",void 0),t.__decorate([m.reader("_serviceSupportsMosaicRule",["currentVersion","fields"])],Y.prototype,"readServiceSupportsMosaicRule",null),t.__decorate([p.property({readOnly:!0})],Y.prototype,"_rasterFunctionNamesIndex",null),t.__decorate([p.property()],Y.prototype,"adjustAspectRatio",void 0),t.__decorate([p.property({type:[c.Integer],json:{write:!0}})],Y.prototype,"bandIds",void 0),t.__decorate([m.reader("bandIds")],Y.prototype,"readBandIds",null),t.__decorate([p.property({readOnly:!0,json:{read:!1}})],Y.prototype,"capabilities",void 0),t.__decorate([m.reader("service","capabilities",["capabilities","currentVersion","serviceDataType"])],Y.prototype,"readCapabilities",null),t.__decorate([p.property({type:Number})],Y.prototype,"compressionQuality",void 0),t.__decorate([h.writer("compressionQuality")],Y.prototype,"writeCompressionQuality",null),t.__decorate([p.property({type:Number})],Y.prototype,"compressionTolerance",void 0),t.__decorate([h.writer("compressionTolerance")],Y.prototype,"writeCompressionTolerance",null),t.__decorate([p.property({json:{read:{source:"copyrightText"}}})],Y.prototype,"copyright",void 0),t.__decorate([p.property({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],Y.prototype,"defaultMosaicRule",void 0),t.__decorate([m.reader("defaultMosaicRule",["defaultMosaicMethod"])],Y.prototype,"readDefaultMosaicRule",null),t.__decorate([p.property({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],Y.prototype,"definitionExpression",void 0),t.__decorate([p.property({readOnly:!0,constructOnly:!0})],Y.prototype,"exportImageServiceParameters",void 0),t.__decorate([p.property()],Y.prototype,"rasterInfo",void 0),t.__decorate([p.property({readOnly:!0,type:[v]})],Y.prototype,"fields",void 0),t.__decorate([p.property({readOnly:!0})],Y.prototype,"fieldsIndex",null),t.__decorate([p.property({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],Y.prototype,"format",null),t.__decorate([m.reader("service","format",["serviceDataType"])],Y.prototype,"readFormat",null),t.__decorate([p.property({type:y})],Y.prototype,"fullExtent",void 0),t.__decorate([p.property({readOnly:!0})],Y.prototype,"hasMultidimensions",void 0),t.__decorate([p.property({json:{read:{source:"maxImageHeight"}}})],Y.prototype,"imageMaxHeight",void 0),t.__decorate([p.property({json:{read:{source:"maxImageWidth"}}})],Y.prototype,"imageMaxWidth",void 0),t.__decorate([p.property({type:String,json:{type:O.interpolationKebab.jsonValues,read:O.interpolationKebab.read,write:O.interpolationKebab.write}})],Y.prototype,"interpolation",void 0),t.__decorate([p.property()],Y.prototype,"minScale",void 0),t.__decorate([m.reader("service","minScale")],Y.prototype,"readMinScale",null),t.__decorate([p.property()],Y.prototype,"maxScale",void 0),t.__decorate([m.reader("service","maxScale")],Y.prototype,"readMaxScale",null),t.__decorate([p.property({type:F})],Y.prototype,"mosaicRule",null),t.__decorate([m.reader("mosaicRule",["mosaicRule","defaultMosaicMethod"])],Y.prototype,"readMosaicRule",null),t.__decorate([h.writer("mosaicRule")],Y.prototype,"writeMosaicRule",null),t.__decorate([p.property()],Y.prototype,"multidimensionalInfo",void 0),t.__decorate([p.property({type:D,json:{write:!0}})],Y.prototype,"multidimensionalSubset",void 0),t.__decorate([p.property({json:{type:c.Integer}})],Y.prototype,"noData",void 0),t.__decorate([h.writer("noData")],Y.prototype,"writeNoData",null),t.__decorate([p.property({type:String,json:{type:O.noDataInterpretationKebab.jsonValues,read:O.noDataInterpretationKebab.read,write:O.noDataInterpretationKebab.write}})],Y.prototype,"noDataInterpretation",void 0),t.__decorate([p.property({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],Y.prototype,"objectIdField",void 0),t.__decorate([m.reader("objectIdField")],Y.prototype,"readObjectIdField",null),t.__decorate([p.property({readOnly:!0})],Y.prototype,"geometryType",void 0),t.__decorate([p.property({})],Y.prototype,"typeIdField",void 0),t.__decorate([p.property({})],Y.prototype,"types",void 0),t.__decorate([p.property({readOnly:!0})],Y.prototype,"parsedUrl",null),t.__decorate([p.property({type:Function})],Y.prototype,"pixelFilter",void 0),t.__decorate([p.property()],Y.prototype,"raster",void 0),t.__decorate([p.property({readOnly:!0})],Y.prototype,"sourceType",void 0),t.__decorate([m.reader("sourceType",["serviceSourceType","fields"])],Y.prototype,"readSourceType",null),t.__decorate([p.property()],Y.prototype,"viewId",void 0),t.__decorate([p.property()],Y.prototype,"renderer",null),t.__decorate([p.property({types:J.rasterRendererTypes,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:J.websceneRasterRendererTypes,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],Y.prototype,"internalRenderer",null),t.__decorate([m.reader("internalRenderer")],Y.prototype,"readRenderer",null),t.__decorate([h.writer("internalRenderer")],Y.prototype,"writeRenderer",null),t.__decorate([p.property({clonable:!1})],Y.prototype,"symbolizer",void 0),t.__decorate([p.property(R.opacity)],Y.prototype,"opacity",void 0),t.__decorate([p.property({readOnly:!0})],Y.prototype,"rasterFields",null),t.__decorate([p.property({constructOnly:!0})],Y.prototype,"rasterFunctionInfos",void 0),t.__decorate([p.property({type:P,json:{name:"renderingRule"}})],Y.prototype,"rasterFunction",null),t.__decorate([m.reader("rasterFunction",["renderingRule","rasterFunctionInfos"])],Y.prototype,"readRasterFunction",null),t.__decorate([p.property({readOnly:!0})],Y.prototype,"serviceDataType",void 0),t.__decorate([p.property({readOnly:!0,type:f})],Y.prototype,"spatialReference",void 0),t.__decorate([m.reader("spatialReference",["spatialReference","extent"])],Y.prototype,"readSpatialReference",null),t.__decorate([p.property({type:O.pixelTypeKebabDict.apiValues,json:{read:O.pixelTypeKebabDict.read,type:O.pixelTypeKebabDict.jsonValues}})],Y.prototype,"pixelType",void 0),t.__decorate([h.writer("pixelType")],Y.prototype,"writePixelType",null),t.__decorate([p.property({constructOnly:!0,type:C})],Y.prototype,"serviceRasterInfo",void 0),t.__decorate([p.property()],Y.prototype,"sourceJSON",void 0),t.__decorate([p.property(R.url)],Y.prototype,"url",void 0),t.__decorate([p.property({readOnly:!0})],Y.prototype,"version",void 0),t.__decorate([m.reader("version",["currentVersion","fields","timeInfo"])],Y.prototype,"readVersion",null),Y=t.__decorate([d.subclass("esri.layers.mixins.ArcGISImageService")],Y),Y},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});