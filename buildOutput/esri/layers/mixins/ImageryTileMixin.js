// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../chunks/tslib.es6","../../request","../../core/Error","../../core/Logger","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/has","../../core/RandomLCG","../../core/accessorSupport/decorators/enumeration","../../core/accessorSupport/decorators/reader","../../core/accessorSupport/decorators/subclass","../../geometry/Point","../../geometry/SpatialReference","../../geometry/support/spatialReferenceUtils","../support/arcgisLayerUrl","../support/commonProperties","../support/DimensionalDefinition","../support/MultidimensionalSubset","../support/rasterEnums","../support/RasterFunction","../support/TileInfo","../support/rasterDatasets/datasetUtils","../support/rasterDatasets/FunctionRaster","../support/rasterDatasets/multidimensionalUtils","../support/rasterFunctions/clipUtils","../support/rasterFunctions/rasterFunctionHelper","../support/rasterFunctions/rasterProjectionHelper","../support/rasterFunctions/stretchUtils","../../renderers/support/rasterRendererHelper","../../renderers/support/RasterSymbolizer","../../renderers/support/rasterTypeUtils","../../rest/support/ImageHistogramParameters","../../rest/support/ImageSample","../../rest/support/ImageSampleParameters","../../rest/support/ImageSampleResult"],function(e,t,r,i,n,s,o,a,l,u,c,d,p,m,h,f,y,g,R,b,_,I,S,x,F,v,w,D,J,T,N,O,P,z,H,C,E){"use strict";t.ImageryTileMixin=t=>{const l=t;let u=class extends l{constructor(...e){super(...e),this._isConstructedFromFunctionRaster=!1,this.bandIds=null,this.copyright=null,this.interpolation=null,this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=x.isFunctionRaster(e[0]?.raster)}destroy(){this._shutdownJobHandler()}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(e){this._set("multidimensionalDefinition",e),this.updateRenderer()}set rasterFunction(e){"none"===e?.functionName?.toLowerCase()&&(e=void 0),this._set("rasterFunction",e),this.updateRasterFunction()}set url(e){this._set("url",y.sanitizeUrl(e,s.getLogger(this)))}get renderer(){if("imagery-tile"!==this.type)return this.internalRenderer;const{activePresetRendererName:e,presetRenderers:t}=this;if(e){const r=t?.find(({name:t})=>t===e);return r?.renderer.clone()}return this.internalRenderer}set renderer(e){"imagery-tile"===this.type&&(this.activePresetRendererName=null),this.internalRenderer=e}set internalRenderer(e){null==e&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("internalRenderer",e),this.updateRenderer())}readRenderer(e,t,r){const i=t?.layerDefinition?.drawingInfo?.renderer;return P.read(i,r)||void 0}async computeStatisticsHistograms(e,t){await this.load(t),e=a.ensureClass(z,e).clone();const{serviceRasterInfo:r}=this;if(null==r)throw new n("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:i}=e;if(null==i)throw new n("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let s=i;const{spatialReference:o}=r;if(!i.spatialReference.equals(o)){await J.load();const e="extent"===i.type?J.projectExtent(i,o):J.projectPolygon(i,o);if(null==e)throw new n("imagery-tile-mixin:compute-statistics-histograms","geometry cannot be projected to the data source");s=e}const l=e.pixelSize??new m({x:r.pixelSize.x,y:r.pixelSize.y,spatialReference:o}),{extent:u,width:c,height:d}=w.snapToRaster(r,s,l),p=await this.fetchPixels(u,c,d,{...t,interpolation:"nearest"});if(null==p.pixelBlock)throw new n("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const h=await w.clip(p.pixelBlock,u,s),f=this._rasterJobHandler;return f?f.computeStatisticsHistograms({pixelBlock:h},t):T.computeStatisticsHistograms(h)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.serviceRasterInfo??{};if(null==t)return e;const r=v.getEffectiveMultidimensionalDefinition({rasterInfo:this.raster.rasterInfo,multidimensionalDefinition:e.multidimensionalDefinition||this.multidimensionalDefinition,timeExtent:e.timeExtent??this.timeExtent,multidimensionalSubset:this.multidimensionalSubset});return{...e,multidimensionalDefinition:r,timeExtent:void 0}}async updateRasterFunction(){return this.loaded&&"imagery-tile"===this.type&&(this.rasterFunction||this._cachedRasterFunctionJson)&&JSON.stringify(this.rasterFunction)!==JSON.stringify(this._cachedRasterFunctionJson)?(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this._rasterFunctionUpdatePromise=this._updateRasterFunction(),this._rasterFunctionUpdatePromise):this._rasterFunctionUpdatePromise}async updateRenderer(){const{loaded:e,symbolizer:t,renderer:r}=this;if(!e||!t||!r)return;const{rasterInfo:i}=this.raster,n=v.getDefaultVariableInfo(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),s=n?.name,o=N.getVariableRasterInfo(i,s);return this._updateSymbolizer(t,r,s,o)}async applyRenderer(e,t,r){const i=e?.pixelBlock;if(!(null!=i&&i.pixels&&i.pixels.length>0))return null;await this.updateRenderer();const n=this.bandIds??[],{pixelBlock:s}=await this._symbolize({pixelData:e,simpleStretchParams:t,bandIds:n,symbolizer:this.symbolizer},r);return s}getTileUrl(e,t,r){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${r}`:""}getCompatibleTileInfo(e,t,r=!1){if(!this.loaded||null==t)return null;if(r&&e.equals(this.spatialReference))return this.tileInfo;const i=f.getInfo(e);return S.create({size:256,spatialReference:e,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,r,n={}){if(M(this),n.requestAsImageElement){const s=this.getTileUrl(e,t,r);return i(s,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then(e=>e.data)}const{serviceRasterInfo:s}=this;if(null!=s.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition){const i=n.tileInfo||s.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,r,i),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,r,n)}async fetchPixels(e,t,r,i={}){return null!=this.serviceRasterInfo.multidimensionalInfo&&null==(i=this.normalizeRasterFetchOptions(i)).multidimensionalDefinition?{extent:e,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),t=Math.round(t),r=Math.round(r),this.raster.fetchPixels(e,t,r,i))}async getSamples(e,t){if(await this.load(),(e=a.ensureClass(C,e).clone()).interpolation&&"nearest"!==e.interpolation)throw new n("imagery-tile-mixin:get-samples","only nearest interpolation is currently supported");const r=e.mosaicRule?.multidimensionalDefinition,i={...t,multidimensionalDefinition:r},s=(await this._getSampleLocations(e)).map(e=>this.identify(e,i).then(t=>(t.location=e,t))),o=(await Promise.all(s)).flatMap((e,t)=>this._convertRasterIdentifyResultToSample(e,t));return new E({samples:o})}async identify(e,t={}){await this.load();const{raster:r,serviceRasterInfo:i}=this;if(null!=i?.multidimensionalInfo&&(!i.hasMultidimensionalTranspose||!v.isMultiSliceOrRangeDefinition(t.multidimensionalDefinition)&&!t.transposedVariableName)&&null==(t=this.normalizeRasterFetchOptions(t)).multidimensionalDefinition)return{location:e,value:null};const s=this.multidimensionalSubset?.areaOfInterest;if(s&&!s.contains(e))throw new n("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");const o=this.serviceRasterInfo?.storageInfo.isBsqTile&&this.bandIds?.length?this.bandIds:void 0;return r.identify(e,{...t,bandIds:o})}hasStandardTime(){const e=this.serviceRasterInfo?.multidimensionalInfo;if(null==e||"standard-time"!==this.serviceRasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,r=t?.[0]?.variableName;return e.variables.some(e=>e.name===r&&(!t?.[0].dimensionName||e.dimensions.some(e=>"StdTime"===e.name)))}getStandardTimeValue(e){return new Date(v.convertOleDateTimeToEpoch(e)).toISOString()}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo?.multidimensionalInfo;return v.getSubsetVariablesFromMdInfo(this.multidimensionalSubset,t)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=v.getDefaultMultidimensionalDefinition(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&x.isFunctionRaster(this.raster)&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}async _initJobHandler(){if(!this._rasterJobHandler)return super._initJobHandler().then(async()=>{if(!this._rasterJobHandler)return;M(this);const{raster:e}=this;e.rasterJobHandler=this._rasterJobHandler,x.isFunctionRaster(e)&&e.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch(()=>{}),this.renderer&&this.updateRenderer()}).catch(()=>{})}_shutdownJobHandler(){super._shutdownJobHandler(),this.raster&&(this.raster.rasterJobHandler=null)}async _getSampleLocations(t){const{geometry:r}=t;if("point"===r.type)return[r];const{spatialReference:i,type:n}=r;if("multipoint"===n)return r.points.map(e=>new m({x:e[0],y:e[1],spatialReference:i}));if("polyline"===n){let n=r;if(t.sampleCount||t.sampleDistance){const i=await new Promise((t,r)=>e(["../../geometry/operators/densifyOperator"],t,r)),s=(await new Promise((t,r)=>e(["../../geometry/operators/lengthOperator"],t,r))).execute(r,{unit:"meters"}),o=Math.min(t.sampleCount||100,1e3);let a=t.sampleDistance;a||(a=s/(o+(2===n.paths[0].length?1:0))),n=i.execute(r,a,{unit:"meters"})}return n.paths.flatMap(e=>e.map(e=>new m({x:e[0],y:e[1],spatialReference:i})))}const s=Math.min(t.sampleCount||100,1e3),o="extent"===r.type,a=o?r:r.extent,l=Math.sqrt(a.width*a.height/s),u=a.height/l,c=a.width/l,{xmin:d,ymax:p}=a,h=[];for(let e=0;e<u;e++)for(let t=0;t<c;t++){const n=new m({x:d+(t+.5)*l,y:p-(e+.5)*l,spatialReference:i});(o||r.contains(n))&&h.push(n)}return h}_configDefaultInterpolation(){if(null==this.interpolation){M(this);const{raster:e}=this,t=N.getDefaultInterpolation(e.rasterInfo,e.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultRenderer(e="no"){M(this);const{rasterInfo:t}=this.raster,r=v.getDefaultVariableInfo(t,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),i=r?.name,n=N.matchPresetRenderer({variableName:i,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&t.bandCount>1&&(this.bandIds=n?.bandIds??N.getDefaultBandCombination(t)),!this.renderer||"override"===e){const e=N.getFunctionColorRamp(this.raster),r=n?.renderer??N.createDefaultRenderer(t,{bandIds:this.bandIds,variableName:i,rasterFunctionColorRamp:e}),s=t.statistics,o=s&&s.length>0?s[0]:null,a=o?.max??0,l=o?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===r.type&&(a>1e24||l<-1e24)&&(r.dynamicRangeAdjustment=!0,r.customStatistics=null,"none"===r.stretchType&&(r.stretchType="min-max")),this.renderer=r}const o=N.normalizeRendererJSON({...this.renderer.toJSON(),variableName:i}),a=N.getVariableRasterInfo(t,i);this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=a):this.symbolizer=new O({rendererJSON:o,rasterInfo:a});const l=this.symbolizer.bind();if(l.success){if("auto"===e){const{colormap:e}=this.raster.rasterInfo,t=this.renderer;if(null!=e&&"raster-colormap"===t.type){const e=N.createDefaultRenderer(this.raster.rasterInfo);JSON.stringify(e)!==JSON.stringify(t)&&this._configDefaultRenderer("override")}else if("raster-stretch"===t.type){const e=this.bandIds?.length,r=t.customStatistics?.length;!t.dynamicRangeAdjustment&&r&&e&&r!==e&&this._configDefaultRenderer("override")}}}else s.getLogger(this).warn("imagery-tile-mixin",l.error||"The given renderer is not supported by the layer."),"auto"===e&&this._configDefaultRenderer("override")}async _updateRasterFunction(){if(this._isConstructedFromFunctionRaster&&x.isFunctionRaster(this.raster)){const e=this.raster.rasterFunction.toJSON();return void(!this.rasterFunction&&e&&this._set("rasterFunction",I.fromJSON(e)))}let e,t=this.raster,r=!1;x.isFunctionRaster(t)?(e=t.primaryRasters.rasters,t=e[0],r=!0):e=[t];const{rasterFunction:i}=this;if(i){const r={raster:t};e.length>1&&e.forEach(e=>r[e.url]=e);const n=D.create(i.functionDefinition?.toJSON()??i.toJSON(),r),s=new F({rasterFunction:n});s.rasterJobHandler=this._rasterJobHandler,await s.open(),this.raster=s}else this.raster=t,await t.open();if(this._cachedRendererJson=void 0,!r&&!i)return;const{bandIds:n}=this,{bandCount:s}=this.raster.rasterInfo,o=n?.length?n.some(e=>e>=s):s>=3;n&&(o||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}_convertRasterIdentifyResultToSample(e,t){const{rasterInfo:r}=this.raster,i=r.storageInfo.pyramidScalingFactor**(e.pyramidLevel??0),n=(r.pixelSize.x+r.pixelSize.y)/2*i;if(!e.dataSeries?.length)return[new H({location:e.location,pixelValue:e.value,locationId:t,resolution:n})];const s=[];return e.dataSeries.forEach(({value:r,multidimensionalDefinition:i},o)=>{const a={Variables:i[0].variableName,Dimensions:i.flatMap(({dimensionName:e})=>e).join(",")};for(const{dimensionName:e,values:t}of i){a[e]=Array.isArray(t[0])?t[0][0]:t[0];const r=t[t.length-1];a[`${e}_Max`]=Array.isArray(r)?r[r.length-1]:r}const l=new H({location:e.location,pixelValue:r,rasterId:o,locationId:t,resolution:n,attributes:a});s.push(l)}),s}};function M(e){if(!e.raster||!e.serviceRasterInfo)throw new n("imagery-tile","no raster")}return r.__decorate([o.property({clonable:!1})],u.prototype,"_cachedRasterFunctionJson",void 0),r.__decorate([o.property({clonable:!1})],u.prototype,"_compatibleFullExtent",void 0),r.__decorate([o.property({clonable:!1})],u.prototype,"_isConstructedFromFunctionRaster",void 0),r.__decorate([o.property({clonable:!1})],u.prototype,"_rasterFunctionUpdatePromise",void 0),r.__decorate([o.property({type:[a.Integer],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],u.prototype,"bandIds",void 0),r.__decorate([o.property({json:{origins:{service:{read:{source:"copyrightText"}}}}})],u.prototype,"copyright",void 0),r.__decorate([o.property({json:{read:!1}})],u.prototype,"fullExtent",null),r.__decorate([o.property({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),c.enumeration(_.interpolationKebab)],u.prototype,"interpolation",void 0),r.__decorate([o.property()],u.prototype,"ioConfig",void 0),r.__decorate([o.property({type:[R],json:{write:!0}})],u.prototype,"multidimensionalDefinition",null),r.__decorate([o.property({type:b,json:{write:!0}})],u.prototype,"multidimensionalSubset",void 0),r.__decorate([o.property()],u.prototype,"raster",void 0),r.__decorate([o.property({type:I})],u.prototype,"rasterFunction",null),r.__decorate([o.property()],u.prototype,"serviceRasterInfo",void 0),r.__decorate([o.property()],u.prototype,"sourceJSON",void 0),r.__decorate([o.property({readOnly:!0,type:h,json:{read:!1}})],u.prototype,"spatialReference",void 0),r.__decorate([o.property({type:S})],u.prototype,"tileInfo",void 0),r.__decorate([o.property(g.url)],u.prototype,"url",null),r.__decorate([o.property()],u.prototype,"renderer",null),r.__decorate([o.property({types:P.rasterRendererTypes,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:P.websceneRasterRendererTypes,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],u.prototype,"internalRenderer",null),r.__decorate([d.reader("internalRenderer")],u.prototype,"readRenderer",null),r.__decorate([o.property({clonable:!1})],u.prototype,"symbolizer",void 0),u=r.__decorate([p.subclass("esri.layers.mixins.ImageryTileMixin")],u),u},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});