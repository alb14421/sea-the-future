// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../../chunks/tslib.es6","../../../core/arrayUtils","../../../core/Error","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../geometry/support/quantizationUtils","../../../layers/support/fieldType","../../../layers/support/fieldUtils","../../../rest/support/QuantizationParameters","../../statistics/support/predominanceUtils","../../statistics/support/statsWorker","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./LayerAdapter","./support/histogramUtils","./support/utils","../../../statistics/utils","../../../support/loadArcade"],function(e,t,a,r,i,s,o,n,l,u,m,y,c,d,p,h,f,w,g,F,S,V,q,v,x,_){"use strict";let z=null;return t.default=class extends V{constructor(){super(...arguments),this._hasLocalSource=!1,this.adapterName="in-memory-layer-adapter"}destroy(){this.workerClient?.destroy()}async _waitForLayerViewUpdate(e){if(!e)throw new i(`${this.adapterName}:insufficient-data`,"layerView is required to fetch the features");const t=new AbortController,a=l.whenOnce(()=>!e.updating,t.signal);await n.timeout(a,5e3,t).catch(e=>{throw s.getLogger(this).warn("LayerView is taking too long to update. Aborting fetch from layerView."),e})}async _fetchFeatureSetFromMemory(e,t,a){const r=this.layer;if(this._hasLocalSource&&"queryFeatures"in r)return r.queryFeatures(e);if(!t)throw new i(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=await t.whenLayerView(this.layer);return await this._waitForLayerViewUpdate(s),s.queryFeatures(e,{signal:a})}async _fetchFeaturesFromMemory(e,t,a,r){const s=this.layer,o="json"===r;if(this._hasLocalSource&&"queryFeatures"in s){const e=await s.queryFeatures(t);return o?v.ensureFeaturesJSON(e.features):e.features}if(await this._waitForLayerViewUpdate(e),o&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:r}=await e.queryFeaturesJSON(t,{signal:a});return r}if(!("queryFeatures"in e))throw new i(`${this.adapterName}:not-supported`,"'queryFeatures' is not supported on the layerView");const n=await e.queryFeatures(t,{signal:a});return o?v.ensureFeaturesJSON(n.features):n.features}_fetchFeaturesForStats(e,t){return S.getFieldsList({field:e.field,field2:e.field2,field3:e.field3,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then(a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,filter:e.filter,requiredFields:a,signal:e.signal},t))}async _summaryStatsFromClientQuery(e,t){const{view:a,signal:r}=e,i=v.getSummaryStatsQuery(this,e,t),s=await this._fetchFeatureSetFromMemory(i,a,r),o=v.getSummaryStatisticsFromFeatureSet(s,S.isAnyDateField(t)||p.isTimeOnlyField(t));return x.processSummaryStatisticsResult(o,e.outStatisticTypes)}async _getNormalizationTotalFromMemory(e,t,a){const{featuresJSON:r,graphics:s,layerView:o,query:n}=t,l={include:["sum"]},u=(!r&&!s&&o&&"querySummaryStatistics"in o?await o.querySummaryStatistics(n,{field:e},{signal:a}):r?await this.workerClient.summaryStatistics({field:e,outStatisticTypes:l},r):await w.summaryStatistics({attribute:{field:e,outStatisticTypes:l},features:s??[]})).sum;if(null==u)throw new i(`${this.adapterName}:invalid`,"invalid normalizationTotal");return u}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:o}=e,n={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,outStatisticTypes:e.outStatisticTypes},{featuresJSON:l,graphics:u,layerView:m,query:y,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return i&&a&&(l||u)&&(n.fieldType=t?.type?d.kebabDict.toJSON(t.type):null,n.viewInfoParams=v.getViewInfoParams(a),n.timeZone=a.timeZone,n.fieldInfos=c),"percent-of-total"===s&&null==e.normalizationTotal&&(n.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:m,query:y},o)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(y,n,{signal:o}):l?this.workerClient.summaryStatistics(n,l):w.summaryStatistics({attribute:n,features:u})}async _getFilteredFeatures(t,a){let r=t;const i=a?.geometry;if("intersects"===a?.spatialRelationship&&i){const a=await new Promise((t,a)=>e(["../../../geometry/operators/intersectionOperator"],t,a));r=t.filter(({geometry:e})=>!(!e||!a.execute(e,i)))}return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:r}:{featuresJSON:r}}async _processStatsFromMemoryParams(e){const{features:t,filter:a}=e;if(t?.length)return this._getFilteredFeatures(t,a);const{view:r,field:i,field2:s,field3:o,normalizationField:n,valueExpression:l,layerViewFunc:u,signal:m}=e;let y=e.returnGeometry;if(null==y&&l){if(!z){const{arcadeUtils:e}=await _.loadArcade();z=e}const e=z.hasGeometryOperations(l);e&&await z.enableGeometryOperations(),y=e}let c=null,d=null,p=null,h=null,f=null;if(r)try{const e="subtype-sublayer"===this.layer.type?this.layer.parent:this.layer;c=await r.whenLayerView(e),d=null!=u&&null!=c&&u in c&&"function"==typeof c[u]}catch{d=!1}if(d)try{await this._waitForLayerViewUpdate(c);const e=await S.getFieldsList({field:i,field2:s,field3:o,normalizationField:n,valueExpression:l});v.getMissingFields(this,e,c).length?d=!1:(p=this.layer.createQuery(),p.outFields=e,p.returnGeometry=!1,v.updateQueryWithFeatureFilter(p,a)),c.suspended&&(d=!1)}catch{d=!1}return d||(h=await this._fetchFeaturesForStats({field:i,field2:s,field3:o,valueExpression:l,normalizationField:n,returnGeometry:y,filter:a,view:r,signal:m},"json"),f=(await S.getFieldsList({valueExpression:l})).map(e=>this.getField(e)?.toJSON()).filter(Boolean)),{layerView:c,query:p,featuresJSON:h,fieldInfos:f}}async _uvFromClientQuery(e,t){const{view:a,signal:r}=e,i=v.getUVQuery(this,e),s=await this._fetchFeatureSetFromMemory(i,a,r),o=await v.getUniqueValuesFromFeatureSet(s,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:S.fieldDelimiter,view:e.view,signal:e.signal});return x.createUVResult(o,t,e.returnAllCodedValues,S.fieldDelimiter)}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:o}=e,{featuresJSON:n,graphics:l,layerView:u,query:m,fieldInfos:y}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),c={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:S.fieldDelimiter,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(n||l)&&(c.viewInfoParams=v.getViewInfoParams(a),c.timeZone=a.timeZone,c.fieldInfos=y),!n&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,c,{signal:o}):n?this.workerClient.uniqueValues(c,n):w.uniqueValues({attribute:c,features:l})}_histogramForField(e){let t=null;return t=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics({...e,outStatisticTypes:{include:["min","max","count"]}}).then(e=>{if(!e.count)throw new i(`${this.adapterName}:insufficient-data`,"Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}}),t.then(t=>v.getBins(this,{min:t.min,max:t.max},e.field,e.numBins??void 0,e.view,e.filter,e.signal))}async _histogramFromQueryAttributeBinsFromMemory(e){const{field:t,normalizationType:a,signal:r}=e,i=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAttributeBins"}),{featuresJSON:s,graphics:o,layerView:n,query:l}=i,u="percent-of-total"===a?e.normalizationTotal??await this._getNormalizationTotalFromMemory(t,i,r):void 0;if(!n||!("queryAttributeBins"in n)||s||o){const t=q.getHistogramAttributeDefinition(e,i,u);return s?this.workerClient.histogram(t,s):w.histogram({attribute:t,features:o})}const{query:m,min:y,max:c}=await q.getAttributeBinsQuery(e,this,u,l?.where);if(!m)return{bins:[],minValue:y,maxValue:c,normalizationTotal:u};const d=await n.queryAttributeBins(m,{signal:r});return q.processQueryAttributeBinsResult(d,t?this.getField(t):null,{minValue:y,maxValue:c,normalizationTotal:u})}async _histogramFromMemory(e){const{field:t,signal:a}=e,r=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),{featuresJSON:i,graphics:s,layerView:o,query:n}=r,l="percent-of-total"===e.normalizationType?e.normalizationTotal??await this._getNormalizationTotalFromMemory(t,r,a):void 0,u=q.getHistogramAttributeDefinition(e,r,l);return!i&&!s&&o&&"queryHistogram"in o?o.queryHistogram(n,u,{signal:a}):i?this.workerClient.histogram(u,i):w.histogram({attribute:u,features:s})}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:a}=e,r=e.numClasses||5,i=[],s=(a-t)/r;for(let e=0;e<r;e++){const a=t+e*s;i.push({minValue:a,maxValue:a+s})}i[r-1].maxValue=a;const o={classBreaks:i,normalizationTotal:e.normalizationTotal},n=x.resolveCBResult(o,e.classificationMethod);return Promise.resolve(n)}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:o,layerView:n,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||o)&&(m.viewInfoParams=v.getViewInfoParams(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:o,layerView:n,query:l},i)),!s&&!o&&n&&"queryClassBreaks"in n?n.queryClassBreaks(l,m,{signal:i}):s?this.workerClient.classBreaks(m,s):w.classBreaks({attribute:m,features:o})}async _heatmapStatsFromMemory(e){const{view:t,field:a,radius:r,signal:i}=e;o.assertIsSome(t,"InMemoryLayerAdapter: must have a view");try{const a=await t.whenLayerView(this.layer);if("queryHeatmapStatistics"in a&&!a.updating&&!e.filter)return await a.queryHeatmapStatistics({field:e.field,radius:e.radius})}catch{n.throwIfAborted(i)}const{featuresJSON:s,graphics:l}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0}),u=new h({extent:t.extent,tolerance:"2d"===t.type?t.state.resolution:t.pixelSizeAt?.(t.center)}),m={field:a,radius:r,transform:c.toQuantizationTransform(u),spatialReference:t.spatialReference?.toJSON(),size:t.size};return s?.length||l?.length?s?this.workerClient.heatmapStatistics(m,s):w.heatmapStatistics({attribute:m,features:l}):{min:null,max:null}}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}createQuery(){return this.layer.createQuery()}async summaryStatistics(e){const{field:t,valueExpression:a,sqlExpression:r,features:s,view:o}=e,n=t?this.getField(t):null,l=!!a,u="3d"===o?.type;if(!a&&r&&!this.supportsSQLExpression)throw new i(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return l||s||u?this._summaryStatsFromMemory(e,n):this._summaryStatsFromClientQuery(e,n)}async uniqueValues(e){const{valueExpression:t,sqlExpression:a,features:r,view:s}=e,o=await v.getDomainsForFields(e,this),n=!!t,l="3d"===s?.type;if(!t&&a&&!this.supportsSQLExpression)throw new i(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return n||r||l?this._uvFromMemory(e,o):this._uvFromClientQuery(e,o)}async histogram(e){const{features:t,valueExpression:a,normalizationType:r,sqlExpression:s}=e,o=t||!!a;if(!a&&s&&!this.supportsSQLExpression)throw new i(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return o||r?this._histogramFromMemory(e):this._histogramForField(e)}async classBreaks(e){return!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)}async queryFeatureCount(e){const{whereClause:t,view:a,signal:r}=e;if(!a)throw new i(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=this.layer.createQuery();s.where=g.mergeWhereClauses(s.where,t);const o=await a.whenLayerView(this.layer);return await l.whenOnce(()=>!o.updating,r),o.queryFeatureCount(s,{signal:r})}async generateRenderer(e,t){throw new i(`${this.adapterName}:not-supported`,"Layer does not support generateRenderer operation")}async predominantCategories(e){const{fields:t,view:a,signal:r,filter:i}=e,s=f.getArcadeForPredominantCategory(t),o=await this._uvFromMemory({valueExpression:s,view:a,signal:r,filter:i});return v.getPredominantCategoriesFromUVInfos(o.uniqueValueInfos,t)}async heatmapStatistics(e){return this._heatmapStatsFromMemory(e)}async getSampleFeatures(e,t){const{view:a,sampleSize:s,requiredFields:o,returnGeometry:n,filter:l,signal:u}=e,m=this.layer.createQuery();if(m.outSpatialReference=a?.spatialReference,m.returnGeometry=!!n,m.outFields=o,v.updateQueryWithFeatureFilter(m,l),!a)throw new i(`${this.adapterName}:not-supported`,"view is required to get sample features for Layer");const y=await a.whenLayerView(this.layer);if(v.getMissingFields(this,o,y).length)throw new i(`${this.adapterName}:not-supported`,"Required fields need to be passed in the outFields for Layer");const c=await this._fetchFeaturesFromMemory(y,m,u,t),d=null!=s&&s>0&&s<=c.length?s:c.length;return r.pickRandom(c,d,1)}load(e){const t=this.layer.load(e).then(async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression="stream"===t.type||!!t.capabilities?.query?.supportsSqlExpression,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent="fullExtent"in t?t.fullExtent:t.parent?.fullExtent,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=F.WorkerClient.getInstance(),await this.workerClient.open(e.signal)});return this.addResolvingPromise(t),Promise.resolve(this)}},a.__decorate([u.property({readOnly:!0})],t.default.prototype,"adapterName",void 0),a.__decorate([u.property({constructOnly:!0})],t.default.prototype,"layer",void 0),t.default=a.__decorate([y.subclass("esri.smartMapping.support.adapters.InMemoryLayerAdapter")],t.default),t.default});