// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/tslib.es6","../../../core/Error","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../rest/support/generateRendererUtils","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./FeatureLayerAdapter","./support/utils"],function(e,t,r,a,s,i,n,o,l,u,c,d,p,f){"use strict";return e.default=class extends p{constructor(){super(...arguments),this.adapterName="csv-layer-adapter"}async _createGenerateRendererResult(e,t,a,s,i){const n=e?.features,o=n?.length;if(!o)throw new r("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const c=f.ensureFeaturesJSON(n);let d=null;if("percent-of-total"===s&&(d=(await this.workerClient.summaryStatistics({field:t},c)).sum,null==d))throw new r("csv-layer-adapter:invalid","invalid normalizationTotal");if("class-breaks-definition"===i?.type){const e=(await u.getDataValues({field:t,normalizationType:s,normalizationField:a,normalizationTotal:d},c)).filter(e=>Number.isFinite(e));return l.createGenerateRendererClassBreaks({definition:i,values:e,normalizationTotal:d})}const p=(await u.getDataValues({field:t},c)).filter(e=>null!=e&&"string"==typeof e&&""!==e.trim());return l.createGenerateRendererUniqueValues(p)}generateRenderer(e,t){const r=e.classificationDefinition;let a=null,s=null,i=null;"class-breaks-definition"===r?.type?(a=r.classificationField,s=r.normalizationField,i=r.normalizationType):a=r?.attributeField;const n=this.layer;return d.getFieldsList({field:a,normalizationField:s}).then(o=>{const l=n.createQuery();return l.returnGeometry=!1,l.outFields=o,l.where=u.mergeWhereClauses(l.where,e.where),n.queryFeatures(l,{signal:t}).then(e=>this._createGenerateRendererResult(e,a,s,i,r))})}load(e){const t=this.layer.load(e).then(async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=c.WorkerClient.getInstance(),await this.workerClient.open(e.signal)});return this.addResolvingPromise(t),Promise.resolve(this)}},t.__decorate([a.property({readOnly:!0})],e.default.prototype,"adapterName",void 0),e.default=t.__decorate([o.subclass("esri.smartMapping.support.adapters.CSVLayerAdapter")],e.default),e.default});