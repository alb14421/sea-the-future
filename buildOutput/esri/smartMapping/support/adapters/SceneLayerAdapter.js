// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/tslib.es6","../../../Graphic","../../../core/arrayUtils","../../../core/Error","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/accessorSupport/decorators/subclass","../../../layers/support/fieldType","../../../layers/support/fieldUtils","../../../rest/support/FeatureSet","../../statistics/support/statsWorker","../../statistics/support/WorkerClient","../utils","./FeatureLayerAdapter","./LayerAdapter","./support/utils","../../../statistics/utils"],function(e,t,a,r,s,i,n,o,l,u,c,p,d,m,h,y,f,g,w,F,_){"use strict";return e.default=class extends w{constructor(e){super(e),this._featureLayerAdapter=null,this.workerClient=null,this.adapterName="scene-layer-adapter"}destroy(){this.workerClient?.destroy()}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!e||!a.length)return e;const r=this.layer.objectIdField,s=e.clone(),i=t.filter(e=>{const t=this.layer.getField(e);return!a.includes(t.name)}),n=i.some(e=>this.layer.getField(e).name===r);return s.outFields=n?i:[...i,r],s}async _fetchFeaturesFromMemory(e,t,a){if(!e)throw new s("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const r=await e.whenLayerView(this.layer),o=new AbortController,l=o.signal,u=n.whenOnce(()=>!r.updating,l);await i.timeout(u,5e3,o);const c=F.getMissingFields(this,a,r);i.throwIfAborted(l);const p=this._updateQuery(t,a??[],c),d=await r.queryFeatures(p,{signal:l});i.throwIfAborted(l);const m=d.features;return c.length?r.whenGraphicAttributes(m,c):m}async _fetchFeaturesJSONFromMemory(e,t,a){return this._fetchFeaturesFromMemory(e,t,a).then(F.ensureFeaturesJSON)}_fetchFeaturesForStats(e,t){return f.getFieldsList({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then(a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t))}async _processStatsFromMemoryParams(e){const t=e.features;if(t?.length)return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:t}:{featuresJSON:t};const{view:a,field:r,normalizationField:i,valueExpression:n,signal:o}=e,l=await this._fetchFeaturesForStats({field:r,valueExpression:n,normalizationField:i,view:a,signal:o},null);if(!l?.length)throw new s("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");return{graphics:l}}_getCachedStatistics(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new s("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):a.queryCachedStatistics(t?.name,{signal:e.signal}).then(e=>{const t=e.stats,{min:a,max:r,totalValuesCount:s}=t;let{avg:i,stddev:n,sum:o,variance:l,count:u}=t;return 0===a&&0===r||(i=0===i?null:i,o=0===o?null:o,n=0===n?null:n,l=0===l?null:l,u=0===u?null:u),null==u&&(null!=o&&null!=i?u=Math.round(o/i):null!=s&&(u=s)),{avg:i,count:u,max:r,min:a,stddev:n,sum:o,variance:l}})}async _getNormalizationTotal(e,t,a){const r={include:["sum"]},i=(t?await this.workerClient.summaryStatistics({field:e,outStatisticTypes:r},t):await h.summaryStatistics({attribute:{field:e,outStatisticTypes:r},features:a})).sum;if(null==i)throw new s("scene-layer-adapter:invalid","invalid normalizationTotal");return i}async _getSummaryStatisticsFromMemory(e,t){const{view:a,field:r,normalizationField:s,valueExpression:i}=e,{featuresJSON:n,graphics:o}=await this._processStatsFromMemoryParams(e),l={field:r,valueExpression:i,normalizationType:e.normalizationType,normalizationField:s,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,outStatisticTypes:e.outStatisticTypes};return e.valueExpression&&a&&n&&(l.fieldType=t?.type?p.kebabDict.toJSON(t.type):null,l.viewInfoParams=F.getViewInfoParams(a),l.timeZone=a.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotal(r,n,o)),n?this.workerClient.summaryStatistics(l,n):h.summaryStatistics({attribute:l,features:o})}_getCachedStatisticsForUniqueValues(e,t){const r=this.layer,i=t?.name,n=t&&e.field?this.getFieldDomain(e.field):null;return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new s("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):r.queryCachedStatistics(i,{signal:e.signal}).then(s=>{const n=s.stats;if(!n.mostFrequentValues)throw new Error;const o=s.labels?.labels,l={},u=[],c="countOF"+i;n.mostFrequentValues.forEach(e=>{const s=new a({attributes:{}});s.attributes[i]=t&&t.name!==r.objectIdField&&(d.isNumericField(t)||f.isAnyDateField(t))?Number(e.value):e.value,s.attributes[c]=e.count,u.push(s)}),o&&o.forEach(e=>{l[e.value]=e.label});const p=new m({features:u});return F.getUniqueValuesFromFeatureSet(p,{layer:this,field:e.field,labels:l,view:e.view,signal:e.signal})}).then(t=>_.createUVResult(t,[n],e.returnAllCodedValues))}async _getUniqueValuesFromMemory(e,t){const{view:a,field:r,field2:s,field3:i,valueExpression:n,returnAllCodedValues:o}=e,l={field:r,field2:s,field3:i,fieldDelimiter:f.fieldDelimiter,valueExpression:n,domains:t,returnAllCodedValues:o},{featuresJSON:u,graphics:c}=await this._processStatsFromMemoryParams(e);return e.valueExpression&&a&&u&&(l.viewInfoParams=F.getViewInfoParams(a),l.timeZone=a.timeZone),u?this.workerClient.uniqueValues(l,u):h.uniqueValues({attribute:l,features:c})}_getCachedStatisticsForHistogram(e,t){const r=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new s("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):r.queryCachedStatistics(t&&t.name,{signal:e.signal}).then(t=>{const r=t.stats,{minValue:s,maxValue:i}=e,n=null!=s?s:r.min,o=null!=i?i:r.max,l=e.numBins||10,u=function(e,t=e.minimum,r=e.maximum,s){const i=[];for(let e=0;e<s;e++)i[e]=0;const n=e.counts.length,o=e.minimum,l=e.maximum;for(let a=0;a<n;a++){const u=(a+.5)/n,c=((1-u)*o+u*l-t)/(r-t)*s;c>=0&&c<=s&&(i[c===s?s-1:Math.floor(c)]+=e.counts[a])}const u=[];return i.forEach((e,t)=>{const r=new a({attributes:{}});r.attributes.EXPR_1=t+1,r.attributes.countOFExpr=e,u.push(r)}),new m({features:u})}(r.histogram,n,o,l);return F.getHistogramFromFeatureSet(u,n,o,l)})}async _getClassBreaksFromMemory(e){const{view:t,field:a,normalizationField:r,valueExpression:s}=e,{featuresJSON:i,graphics:n}=await this._processStatsFromMemoryParams(e),o={field:a,valueExpression:s,normalizationType:e.normalizationType,normalizationField:r,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&i&&(o.viewInfoParams=F.getViewInfoParams(t),o.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotal(a,i,n)),i?this.workerClient.classBreaks(o,i):h.classBreaks({attribute:o,features:n})}async _getHistogramFromMemory(e){const{view:t,field:a}=e,{featuresJSON:r,graphics:s}=await this._processStatsFromMemoryParams(e),i={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&r&&(i.viewInfoParams=F.getViewInfoParams(t),i.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(i.normalizationTotal=await this._getNormalizationTotal(a,r,s)),r?this.workerClient.histogram(i,r):h.histogram({attribute:i,features:s})}getField(e){return this.layer.getField(e??"")}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}createQuery(){return this.layer.createQuery()}summaryStatistics(e){const t=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.summaryStatistics(e);if(e.filter)throw new s("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(t?.name)?this._getCachedStatistics(e,t).catch(()=>(i.throwIfAborted(e.signal),this._getSummaryStatisticsFromMemory(e,t))):this._getSummaryStatisticsFromMemory(e,t)}async uniqueValues(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.uniqueValues(e);if(e.filter)throw new s("scene-layer-adapter:not-supported","filter is not supported");const t=await F.getDomainsForFields(e,this),{field:a,field2:r}=e,n=a&&r,o=this.getField(a);return!n&&o&&this._hasCachedStatistics(o.name)?this._getCachedStatisticsForUniqueValues(e,o).catch(()=>(i.throwIfAborted(e.signal),this._getUniqueValuesFromMemory(e,t))):this._getUniqueValuesFromMemory(e,t)}histogram(e){const t=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.histogram(e);if(e.filter)throw new s("scene-layer-adapter:not-supported","filter is not supported");return t&&this._hasCachedStatistics(t.name)?this._getCachedStatisticsForHistogram(e,t).catch(()=>(i.throwIfAborted(e.signal),this._getHistogramFromMemory(e))):this._getHistogramFromMemory(e)}classBreaks(e){const t=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.classBreaks(e);if(e.filter)throw new s("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(t?.name)?Promise.reject(new s("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e):Promise.reject(new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,t):Promise.reject(new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e,t){if(e.filter)throw new s("scene-layer-adapter:not-supported","filter is not supported");const{view:a,sampleSize:n,requiredFields:o,returnGeometry:l,signal:u}=e,c="json"===t,p=this.createQuery();p.outFields=o,p.returnGeometry=!!l,p.where=null,p.num=n;let d=[];try{if(d=c?await this._fetchFeaturesJSONFromMemory(a,p,o):await this._fetchFeaturesFromMemory(a,p,o),d.length&&null!=n&&n>0&&n<=d.length)return r.pickRandom(d,n,1)}catch(e){i.throwIfAborted(u)}let m=null;if(this._featureLayerAdapter){const a={...e};delete a.view,m=await this._featureLayerAdapter.getSampleFeatures(a,t)}return m?.length?m:r.pickRandom(d,d.length,1)}load(e){const t=this.layer.load(e).then(async t=>{this.workerClient=y.WorkerClient.getInstance(),await this.workerClient.open(e.signal);const a=t.associatedLayer;if(this.geometryType=t.geometryType,null!=a)return this._featureLayerAdapter=new g({layer:a}),this._featureLayerAdapter.load(e).then(()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent});this.objectIdField=t.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=t.fullExtent});return this.addResolvingPromise(t),Promise.resolve(this)}},t.__decorate([o.property({readOnly:!0})],e.default.prototype,"adapterName",void 0),t.__decorate([o.property({constructOnly:!0})],e.default.prototype,"layer",void 0),e.default=t.__decorate([c.subclass("esri.smartMapping.support.adapters.SceneLayerAdapter")],e.default),e.default});