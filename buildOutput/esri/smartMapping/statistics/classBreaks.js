// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../core/Error","./support/utils","../support/binningUtils","../support/utils","../support/adapters/support/layerUtils"],function(a,e,i,s,r){"use strict";return async function(n){const{layerAdapter:l,...t}=await async function(n){if(!n?.layer||!n.field&&!n.valueExpression)throw new a("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(n.valueExpression&&!n.view)throw new a("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");n.forBinning&&i.verifyBinningParams(n,"class-breaks");const{layer:l,...t}=n,o=n.forBinning?r.binningCapableLayerTypes:r.featureCapableLayerTypes,p=r.createLayerAdapter(l,o,n.forBinning);if(!p)throw new a("class-breaks:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(o).join(", "));const u={layerAdapter:p,...t};u.normalizationType=s.getNormalizationType(u),u.numClasses=u.numClasses||5;const f=null!=u.signal?{signal:u.signal}:null;await p.load(f);const m=u.field,d=u.minValue,c=u.maxValue,w=null!=d||null!=c,y=u.classificationMethod,h="percent-of-total"===u.normalizationType,v=!1!==u.analyzeData,b=m?p.getField(m):null,g=await s.getFieldsList({field:u.field,normalizationField:u.normalizationField,valueExpression:u.valueExpression}),z=e.verifyBasicFieldValidity(p,g,"class-breaks:invalid-parameters");if(z)throw z;if(b){const a=e.verifyNumericField(p,b,"class-breaks:invalid-parameters");if(a)throw a}if(u.valueExpression&&u.normalizationType)throw new a("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");if(w)if(v){if(h&&null==u.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified")}else{if(null==d||null==c)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(d>=c)throw new a("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(y&&"equal-interval"!==y)throw new a("class-breaks:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(h&&null==u.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false")}else if(!v)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");u.filter&&!u.filter.spatialRelationship&&(u.filter.spatialRelationship="intersects");const k=e.verifyFilterValidity(u.filter,"class-breaks:invalid-parameters");if(k)throw k;return u}(n);return l.classBreaks(t)}});