// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../core/has","../../core/Error","../../core/screenUtils","../../geometry/support/scaleUtils","../../renderers/visualVariables/SizeVariable","../../renderers/visualVariables/support/SizeStop","./scaleRange","../support/binningUtils","../support/adapters/support/layerUtils"],function(e,n,l,s,a,i,t,r,o){"use strict";const c=[10,8,4,2],u=[100,100,60,30],p=[2,1,.75,.5],v=[32,18,12,6],f=[{level:0,resolution:156543.03392800014,scale:591657527.591555},{level:1,resolution:78271.51696399994,scale:295828763.795777},{level:2,resolution:39135.75848200009,scale:147914381.897889},{level:3,resolution:19567.87924099992,scale:73957190.948944},{level:4,resolution:9783.93962049996,scale:36978595.474472},{level:5,resolution:4891.96981024998,scale:18489297.737236},{level:6,resolution:2445.98490512499,scale:9244648.868618},{level:7,resolution:1222.992452562495,scale:4622324.434309},{level:8,resolution:611.4962262813797,scale:2311162.217155},{level:9,resolution:305.74811314055756,scale:1155581.108577},{level:10,resolution:152.87405657041106,scale:577790.554289},{level:11,resolution:76.43702828507324,scale:288895.277144},{level:12,resolution:38.21851414253662,scale:144447.638572},{level:13,resolution:19.10925707126831,scale:72223.819286},{level:14,resolution:9.554628535634155,scale:36111.909643},{level:15,resolution:4.77731426794937,scale:18055.954822},{level:16,resolution:2.388657133974685,scale:9027.977411},{level:17,resolution:1.1943285668550503,scale:4513.988705},{level:18,resolution:.5971642835598172,scale:2256.994353},{level:19,resolution:.29858214164761665,scale:1128.497176}];function w(e,l){const{view:s}=e;if(!s)throw new n("scale-range:invalid-parameters","'view' is required");const a=l.minScale||1e8,i=s.constraints&&"effectiveLODs"in s.constraints&&s.constraints.effectiveLODs||f,t=[];for(let e=0;e<i.length;e++){if(i[e].scale>a)continue;const n=Number(e),l=[n-3,n,n+3,n+6];for(const e of l)e>-1&&e<i.length&&t.push(i[e].scale);break}return t.sort((e,n)=>e-n)}return async function(e){const f=await async function(e){const{view:l}=e;if(!(e&&l&&e.layer))throw new n("size-range:missing-parameters","'view' and 'layer' parameters are required");e.forBinning&&r.verifyBinningParams(e,"size-range");const{layer:s,...a}=e,i=e.forBinning?o.binningCapableLayerTypes:o.featureCapableLayerTypes,t=o.createLayerAdapter(s,i,e.forBinning);if(!t)throw new n("size-range:invalid-parameters","'layer' must be one of these types: "+o.getLayerTypeLabels(i).join(", "));const c={layerAdapter:t,...a,view:l};await l.when();const u=null!=c.signal?{signal:c.signal}:null;await t.load(u);const p=t.geometryType;if("point"!==p&&"multipoint"!==p&&"polyline"!==p&&"polygon"!==p)throw new n("size-range:not-supported",`sizeRange is not supported for geometryType: ${p}`);return c}(e),{view:m,layerAdapter:g,signal:y,filter:S}=f,h=await t({layer:g,view:m,signal:y,filter:S});switch(g.geometryType){case"point":case"multipoint":return function(e,s){const{minScale:t,maxScale:r}=s,o=w(e,{minScale:t});if(!o.length)throw new n("scale-range:insufficient-info","not enough scale values");return{minSize:new a({valueExpression:"$view.scale",stops:o.map((e,n)=>new i({value:e,size:l.px2pt(c[n])}))}),maxSize:new a({valueExpression:"$view.scale",stops:o.map((e,n)=>new i({value:e,size:l.px2pt(u[n])}))})}}(f,h);case"polyline":return function(e,s){const{minScale:t,maxScale:r}=s,o=w(e,{minScale:t});if(!o.length)throw new n("scale-range:insufficient-info","not enough scale values");return{minSize:new a({valueExpression:"$view.scale",stops:o.map((e,n)=>new i({value:e,size:l.px2pt(p[n])}))}),maxSize:new a({valueExpression:"$view.scale",stops:o.map((e,n)=>new i({value:e,size:l.px2pt(v[n])}))})}}(f,h);case"polygon":return function(e,t){const{spatialStatistics:r,minScale:o,maxScale:c}=t;if(!("avgSize"in r)||!r.avgSize)throw new n("size-range:insufficient-info","average polygon size is invalid");const u=r.avgSize,{view:p}=e;if(!p)throw new n("scale-range:invalid-parameters","'view' is required");const{resolution:v,scale:f}=p,w=v/f,{scales:m,fullExtentScale:g}=function(e,l){const{view:a,layerAdapter:i}=e;if(!a)throw new n("scale-range:invalid-parameters","'view' is required");const t=i.fullExtent,r=i.minScale||1128.497176,o=i.maxScale||591657527.591555,c=l.minScale||0,u=l.maxScale||0;let p=null!=t?s.getScale(a,t):0;return p=p<r&&p>o?p:0,{scales:[r,o,c,u,p].map(Math.round).sort((e,n)=>e-n).filter((e,n,l)=>!!e&&l.indexOf(e)===n).filter((e,n,l)=>!n||Math.abs(e-l[n-1])>5),fullExtentScale:p}}(e,{minScale:o,maxScale:c}),y=[],S=[];return m.forEach((e,n)=>{const{min:s,max:a}=function(e,n){const l=Math.ceil(e/n);let s=Math.ceil(l/4);s<4?s=4:s>16&&(s=16);const a=5*s;return{min:s,max:a<50?50:a}}(u,w*e),t=m.indexOf(g),r=t>-1&&n>t?2:1;y.push(new i({value:e,size:l.px2pt(s/r)})),S.push(new i({value:e,size:l.px2pt(a/r)}))}),{minSize:new a({valueExpression:"$view.scale",stops:y}),maxSize:new a({valueExpression:"$view.scale",stops:S})}}(f,h);case"mesh":case"multipatch":return null}return null}});