// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","./SimpleGeometryCursor","./Geometry","./Envelope","./Envelope2D","./MultiPathImpl","./Point2D"],function(e,t,s,n,i,r,h){"use strict";function a(e,t,s,n,i){return o(e,t,null,s,n,i)}function o(e,t,r,h,o,l){const p=e.getGeometryType();if(p===s.GeometryType.enumPoint){const s=e.getXY();return t.contains(s)?e:e.createInstance()}if(p===s.GeometryType.enumEnvelope){const s=i.Envelope2D.constructEmpty();if(e.queryEnvelope(s),s.intersect(t)){const t=e.clone();return t.setEnvelope(s),t}return e.createInstance()}if(e.isEmpty())return e;if(t.isEmpty())return e.createInstance();const x=t.clone();{const t=new i.Envelope2D;if(e.queryLooseEnvelope(t),x.containsEnvelope(t))return e;if(!x.isIntersecting(t))return e.createInstance();0===o&&(t.intersect(x),t.inflate(Math.max(.1*t.maxDimension(),1)),t.intersect(x),x.assign(t))}let c=h;if((null!==r||Number.isNaN(c))&&(c=n.calculateToleranceFromGeometryForOp(r,x,!1).total()),p===s.GeometryType.enumGeometryCollection){const t=e,s=e.createInstance();for(let e=0,n=t.getGeometryCount();e<n;e++){const n=t.getGeometry(e);if(n.isEmpty())continue;const i=a(n,x,c,o,l);i.isEmpty()||(i===n?s.addGeometry(i.clone()):s.addGeometry(i))}return s}s.isMultiVertex(p)||s.throwInvalidArgumentException("Clip: geometry not supported");const u=e.getImpl().getAccelerators();if(null!==u){const e=u.getRasterizedGeometry();s.geometryReleaseAssert(null===e)}switch(p){case s.GeometryType.enumMultiPoint:{const t=e;let n;const i=t.getPointCount(),r=t.getImpl().getAttributeStreamRef(0);let h=0;for(let e=0;e<i;e++){const s=r.readPoint2D(2*e);x.contains(s)||(0===h&&(n=t.createInstance()),h<e&&n.addPoints(t,h,e),h=e+1)}return h>0&&n.addPoints(t,h,i),0===h?t:(s.geometryReleaseAssert(null!==n),n)}case s.GeometryType.enumPolygon:case s.GeometryType.enumPolyline:return function(e,t,s,n,i){return new m(t,i).clipMultiPath2(e,s,n)}(e,x,c,o,l);default:s.throwInternalErrorException("")}}class m{constructor(e,t){this.m_shape=new r.EditShape,this.m_geometry=r.nullHandle,this.m_verticesOnExtentIndex=-1,this.m_verticesOnExtent=[],this.m_progressCounter=0,this.m_extent=new i.Envelope2D(e),this.m_progressTracker=t}progress_(){}clipMultiPath2(e,t,n){return e.getGeometryType()===s.GeometryType.enumPolygon?this.clipPolygonOrProjectedPolyline2(e,n):this.clipPolyline(e,t)}clipPolygonOrProjectedPolyline2(e,t){const n=e.getGeometryType()===s.GeometryType.enumPolyline;if(0===this.m_extent.width()||0===this.m_extent.height())return e.createInstance();const a=i.Envelope2D.constructEmpty();e.queryLooseEnvelope(a),this.m_geometry=n?this.m_shape.addGeometry(e):this.m_shape.addGeometry(e,this.m_extent);const o=i.Envelope2D.constructEmpty(),l=i.Envelope2D.constructEmpty(),p=new h.Point2D,x=new h.Point2D,c=h.makePrimitiveArray(9,Number.NaN),u=h.makePrimitiveArray(9,Number.NaN),_=h.makeObjectArray(h.Point2D,9);let y=null;const g=new r.Line,d=[];let v=!1;for(let e=0;!v&&e<4;e++){let t=!1;const i=!!(1&e);let h=0;switch(e){case 0:h=this.m_extent.xmin,t=a.xmin<=h&&a.xmax>=h;break;case 1:h=this.m_extent.ymin,t=a.ymin<=h&&a.ymax>=h;break;case 2:h=this.m_extent.xmax,t=a.xmin<=h&&a.xmax>=h;break;case 3:h=this.m_extent.ymax,t=a.ymin<=h&&a.ymax>=h}if(t){v=!0;for(let t=this.m_shape.getFirstPath(this.m_geometry);t!==r.nullHandle;){let a=!0,P=-1,f=-1;const E=this.m_shape.getFirstVertex(t);let I=E;do{this.progress_(),y=this.m_shape.getSegment(I);let t=y;if(null===t){const e=this.m_shape.getNextVertex(I);if(e===r.nullHandle){s.geometryReleaseAssert(n),0===P&&d.push(I);break}this.m_shape.queryXY(I,p),g.setStartXY(p),this.m_shape.queryXY(e,x),g.setEndXY(x),t=g}t.queryLooseEnvelope(o);let E=m.checkSegmentIntersection(o,e,h);t.isCurve()&&0===E&&t.isCurve()&&(g.setStartXY(t.getStartXY()),g.setEndXY(t.getEndXY()),this.m_shape.replaceCurveWithLine(I),t=g,g.queryEnvelope(o),E=m.checkSegmentIntersection(o,e,h));let V=0,S=r.nullHandle;if(-1===E){const n=t.intersectionWithAxis2D(i,h,c,u);if(n>0){let e=null;if(t.isCurve()){e=_,s.geometryReleaseAssert(n<=9);for(let e=0;e<n;e++)i?_[e].setCoords(c[e],h):_[e].setCoords(h,c[e]);V=this.m_shape.splitSegmentAxisAware(I,u,n,e,i?1:0)}else V=this.m_shape.splitSegmentAxisAware(I,u,n,null,-1)}else V=0;V+=1;let r=I,o=this.m_shape.getNextVertex(r);t=null;for(let t=0;t<V;t++){this.m_shape.queryXY(r,p),this.m_shape.queryXY(o,x),y=this.m_shape.getSegment(r);let t=y;null===t&&(g.setStartXY(p),g.setEndXY(x),t=g),t.queryEnvelope(l);let s=m.checkSegmentIntersection(l,e,h);t.isCurve()&&0===s&&(this.m_shape.replaceCurveWithLine(r),g.setStartXY(p),g.setEndXY(x),t=g,t.queryEnvelope(l),s=m.checkSegmentIntersection(l,e,h)),-1===s&&(i?Math.abs(p.y-h)<Math.abs(x.y-h)?(p.y=h,this.m_shape.setXY(r,p)):(x.y=h,this.m_shape.setXY(o,x)):Math.abs(p.x-h)<Math.abs(x.x-h)?(p.x=h,this.m_shape.setXY(r,p)):(x.x=h,this.m_shape.setXY(o,x)),y=this.m_shape.getSegment(r),t=y,null===t&&(g.setStartXY(p),g.setEndXY(x),t=g),t.queryEnvelope(l),s=m.checkSegmentIntersection(l,e,h),-1===s&&(s=m.checkSegmentIntersectionLoose(l,e,h)));const n=P;P=s,-1===f&&(f=P),0===n&&1===P||1===n&&0===P||0===n&&0===P&&d.push(r),1===P&&(v=!1,a=!1),r=o,S=r,o=this.m_shape.getNextVertex(o)}}if(0===V){const e=P;P=E,-1===f&&(f=P),0===e&&P>=1||e>=1&&0===P||0===e&&0===P&&d.push(I),1===P&&(v=!1,a=!1),S=this.m_shape.getNextVertex(I)}if(I=S,d.length>=256){for(let e=1,t=d.length-1;e<t;e++){const t=d[e];n?this.m_shape.snapVertexForPoleClipping(t,h):this.m_shape.removeVertex(t,!1)}d[1]=d.at(-1),d.length=2}}while(I!==E);if(!a){0!==f||!n&&0!==P&&2!==P||d.push(E);for(let e=0,t=d.length;e<t;e++){const t=d[e];n?this.m_shape.snapVertexForPoleClipping(t,h):this.m_shape.removeVertex(t,!1)}}d.length=0,t=a||0===this.m_shape.getPathSize(t)?this.m_shape.removePath(t):this.m_shape.getNextPath(t)}}}if(v)return e.createInstance();y=null,n?this.removeSpikesAlongPoles():this.resolveBoundaryOverlaps(),t>0&&this.densifyAlongClipExtent(t);const P=this.m_shape.getGeometry(this.m_geometry);return P.getGeometryType()===s.GeometryType.enumPolygon&&P.setFillRule(e.getFillRule()),P}clipPolyline(e,t){const s=i.Envelope2D.constructEmpty(),n=i.Envelope2D.constructEmpty(),a=h.makePrimitiveArray(9,Number.NaN),o=h.makePrimitiveArray(9,Number.NaN),l=new r.SegmentBuffer;let p=e;const x=i.Envelope2D.constructEmpty();e.queryLooseEnvelope(x);for(let t=0;t<4;t++){let i=!1;const r=!!(1&t);let c=0;switch(t){case 0:c=this.m_extent.xmin,i=x.xmin<=c&&x.xmax>=c;break;case 1:c=this.m_extent.ymin,i=x.ymin<=c&&x.ymax>=c;break;case 2:c=this.m_extent.xmax,i=x.xmin<=c&&x.xmax>=c;break;case 3:c=this.m_extent.ymax,i=x.ymin<=c&&x.ymax>=c}if(!i)continue;const u=p;p=e.createInstance();const _=u.getImpl().querySegmentIterator();_.resetToFirstPath();const y=new h.Point2D,g=new h.Point2D;for(;_.nextPath();){let e=-1,i=!0;for(;_.hasNextSegment();){this.progress_();const h=_.nextSegment(),x=h.isDegenerate(0);h.queryLooseEnvelope(s);const u=m.checkSegmentIntersection(s,t,c);if(-1===u){const s=h.intersectionWithAxis2D(r,c,a,o);let u=0;y.assign(h.getStartXY());for(let _=0;_<=s;_++){const d=_<s?o[_]:1;if(u===d)continue;h.queryCut(u,d,l,!1);const v=l.get();let P=!1;if(v.getStartXY().equals(y)||(v.setStartXY(y),P=!0),_<s&&(r?(g.x=a[_],g.y=c):(g.x=c,g.y=a[_]),v.getEndXY().equals(g)||(v.setEndXY(g),P=!0)),P&&v.normalizeAfterEndpointChange(),!x&&v.isDegenerate(0))continue;v.queryEnvelope(n);let f=m.checkSegmentIntersection(n,t,c);if(-1===f){const e=v.getStartXY(),s=v.getEndXY();P=!1,r?Math.abs(e.y-c)<Math.abs(s.y-c)?(e.y=c,v.setStartXY(e),e.equals(v.getStartXY())||(v.setStartXY(e),P=!0)):(s.y=c,s.equals(v.getEndXY())||(v.setEndXY(s),P=!0)):Math.abs(e.x-c)<Math.abs(s.x-c)?(e.x=c,e.equals(v.getStartXY())||(v.setStartXY(e),P=!0)):(s.x=c,s.equals(v.getEndXY())||(v.setEndXY(s),P=!0)),P&&v.normalizeAfterEndpointChange(),v.queryEnvelope(n),f=m.checkSegmentIntersection(n,t,c),-1===f&&(f=m.checkSegmentIntersectionLoose(n,t,c))}y.assign(v.getEndXY()),u=d,e=f,e>=1?(p.addSegment(v,i),i=!1):i=!0}}else e=u,e>=1?(p.addSegment(h,i),i=!1):i=!0}}}return p}static checkSegmentIntersection(e,t,n){switch(t){case 0:return e.xmin<n&&e.xmax<=n?0:e.xmin>=n?e.xmax===n?2:1:-1;case 1:return e.ymin<n&&e.ymax<=n?0:e.ymin>=n?e.ymax===n?2:1:-1;case 2:return e.xmin>=n&&e.xmax>n?0:e.xmax<=n?e.xmin===n?2:1:-1;case 3:return e.ymin>=n&&e.ymax>n?0:e.ymax<=n?e.ymin===n?2:1:-1}return s.throwInternalErrorException(""),0}static checkSegmentIntersectionLoose(e,t,n){switch(t){case 0:{const t=Math.abs(e.xmin-n),i=Math.abs(e.xmax-n);return e.xmin<n?t>i?0:1:(s.throwInternalErrorException(""),1)}case 1:{const t=Math.abs(e.ymin-n),i=Math.abs(e.ymax-n);return e.ymin<n?t>i?0:1:(s.throwInternalErrorException(""),1)}case 2:{const t=Math.abs(e.xmin-n),i=Math.abs(e.xmax-n);return e.xmax>n?t<i?0:1:(s.throwInternalErrorException(""),1)}case 3:{const t=Math.abs(e.ymin-n),i=Math.abs(e.ymax-n);return e.ymax>n?t<i?0:1:(s.throwInternalErrorException(""),1)}}return s.throwInternalErrorException(""),0}resolveBoundaryOverlaps(){this.m_verticesOnExtentIndex=-1,this.splitSegments(!1,this.m_extent.xmin),this.splitSegments(!1,this.m_extent.xmax),this.splitSegments(!0,this.m_extent.ymin),this.splitSegments(!0,this.m_extent.ymax),this.m_verticesOnExtent.length=0,this.m_verticesOnExtentIndex=this.m_shape.createUserIndex();const e=new h.Point2D;for(let t=this.m_shape.getFirstPath(this.m_geometry);t!==r.nullHandle;t=this.m_shape.getNextPath(t)){let s=this.m_shape.getFirstVertex(t);for(let n=0,i=this.m_shape.getPathSize(t);n<i;n++,s=this.m_shape.getNextVertex(s))this.progress_(),this.m_shape.queryXY(s,e),this.m_extent.xmin!==e.x&&this.m_extent.xmax!==e.x&&this.m_extent.ymin!==e.y&&this.m_extent.ymax!==e.y||(this.m_shape.setUserIndex(s,this.m_verticesOnExtentIndex,this.m_verticesOnExtent.length),this.m_verticesOnExtent.push(s))}this.dbgCheckPathFirst(),this.resolveOverlaps(!1,this.m_extent.xmin),this.dbgCheckPathFirst(),this.resolveOverlaps(!1,this.m_extent.xmax),this.dbgCheckPathFirst(),this.resolveOverlaps(!0,this.m_extent.ymin),this.dbgCheckPathFirst(),this.resolveOverlaps(!0,this.m_extent.ymax),this.fixPaths()}densifyAlongClipExtent(e){const t=new h.Point2D(0,0),n=new h.Point2D(0,0),i=h.makePrimitiveArray(2048,Number.NaN);for(let a=this.m_shape.getFirstPath(this.m_geometry);a!==r.nullHandle;a=this.m_shape.getNextPath(a)){const r=this.m_shape.getFirstVertex(a);let o=r;do{const r=this.m_shape.getNextVertex(o);this.m_shape.queryXY(o,t);let a=-1;if(t.x===this.m_extent.xmin?(this.m_shape.queryXY(r,n),n.x===this.m_extent.xmin&&(a=1)):t.x===this.m_extent.xmax&&(this.m_shape.queryXY(r,n),n.x===this.m_extent.xmax&&(a=1)),t.y===this.m_extent.ymin?(this.m_shape.queryXY(r,n),n.y===this.m_extent.ymin&&(a=0)):t.y===this.m_extent.ymax&&(this.m_shape.queryXY(r,n),n.y===this.m_extent.ymax&&(a=0)),-1===a){o=r;continue}if(this.isCurve(o)){o=r;continue}const m=t.clone(),l=new h.Point2D(0,0);if(a){const s=t.y-this.m_extent.ymin;l.y=h.sign(n.y-t.y),m.y=e*h.copySign(Math.floor(Math.abs(s)/e),s)+this.m_extent.ymin,l.y<0&&(m.y+=e)}else{const s=t.x-this.m_extent.xmin;l.x=h.sign(n.x-t.x),m.x=e*h.copySign(Math.floor(Math.abs(s)/e),s)+this.m_extent.xmin,l.x<0&&(m.x+=e)}const p=a?n.y-t.y:n.x-t.x,x=Math.abs(p);if(x/e>65536&&s.throwInternalErrorException(""),x>0){const n=Math.trunc(x/e)+2;i.length<n&&(i.length=n);let r=0;for(let n=0;;n++){const h=m.add(l.mul(n*e)),o=(a?h.y-t.y:h.x-t.x)/p;if(o>=1)break;o<=0||(s.geometryReleaseAssert(r<=i.length),i[r]=o,r++)}0!==r&&this.m_shape.splitSegment(o,i,r)}o=r}while(o!==r)}}splitSegments(e,t){let s=-1;const n=new h.Point2D,i=[];for(let h=this.m_shape.getFirstPath(this.m_geometry);h!==r.nullHandle;h=this.m_shape.getNextPath(h)){let a=this.m_shape.getFirstVertex(h),o=r.nullHandle;for(let r=0,m=this.m_shape.getPathSize(h);r<m;r++,a=o)if(this.progress_(),o=this.m_shape.getNextVertex(a),this.m_shape.queryXY(a,n),(e?n.y===t:n.x===t)&&(this.m_shape.queryXY(o,n),e?n.y===t:n.x===t)){if(this.isCurve(a))continue;-1===s&&(s=this.m_shape.createUserIndex()),1!==this.m_shape.getUserIndex(a,s)&&(i.push(a),this.m_shape.setUserIndex(a,s,1)),1!==this.m_shape.getUserIndex(o,s)&&(i.push(o),this.m_shape.setUserIndex(o,s,1))}}if(-1!==s&&this.m_shape.removeUserIndex(s),i.length<3)return;i.sort((e,t)=>this.compareVertices(e,t));const a=new h.Point2D,o=new h.Point2D,m=new h.Point2D;o.setNAN();let l=-1,p=[],x=[];const c=this.m_shape.createUserIndex(),u=this.m_shape.createUserIndex();for(let s=0,r=i.length;s<r;s++){const r=i[s];if(this.m_shape.queryXY(r,n),!n.isEqualPoint2D(o)){if(-1===l){l=s,o.setCoordsPoint2D(n);continue}for(let n=l;n<s;n++){const s=i[n],r=this.m_shape.getNextVertex(s),h=this.m_shape.getPrevVertex(s);let m=!1;this.m_shape.queryXY(r,a),o.compare(a)<0&&(e?a.y===t:a.x===t)&&(this.isCurve(s)||(p.push(s),m=!0,this.m_shape.setUserIndex(s,u,1))),this.m_shape.queryXY(h,a),o.compare(a)<0&&(e?a.y===t:a.x===t)&&(this.isCurve(h)||(m||p.push(s),this.m_shape.setUserIndex(s,c,1)))}for(let e=0,t=p.length;e<t;e++){const t=p[e],s=this.m_shape.getUserIndex(t,c),i=this.m_shape.getUserIndex(t,u);if(1===s){const e=this.m_shape.getPrevVertex(t);this.m_shape.queryXY(e,m);let s=0;if(!m.isEqualPoint2D(n)){const i=h.Point2D.distance(o,m);s=h.Point2D.distance(m,n)/i,0===s?s=Number.EPSILON:1===s&&(s=1-Number.EPSILON),this.m_shape.splitSegment(e,[s],1);const r=this.m_shape.getPrevVertex(t);this.m_shape.setXY(r,n),x.push(r),this.m_shape.setUserIndex(r,c,1),this.m_shape.setUserIndex(r,u,-1)}}if(1===i){const e=this.m_shape.getNextVertex(t);this.m_shape.queryXY(e,m);let s=0;if(!m.isEqualPoint2D(n)){const e=h.Point2D.distance(o,m);s=h.Point2D.distance(o,n)/e,0===s?s=Number.EPSILON:1===s&&(s=1-Number.EPSILON),this.m_shape.splitSegment(t,[s],1);const i=this.m_shape.getNextVertex(t);this.m_shape.setXY(i,n),x.push(i),this.m_shape.setUserIndex(i,c,-1),this.m_shape.setUserIndex(i,u,1)}}}const r=p;p=x,x=r,x.length=0,l=s,o.setCoordsPoint2D(n)}}this.m_shape.removeUserIndex(c),this.m_shape.removeUserIndex(u)}resolveOverlaps(e,t){const n=new h.Point2D,i=[];let a=-1;for(let s=0,h=this.m_verticesOnExtent.length;s<h;s++){this.progress_();const h=this.m_verticesOnExtent[s];if(h===r.nullHandle)continue;const o=this.m_shape.getNextVertex(h);if(this.m_shape.queryXY(h,n),(e?n.y===t:n.x===t)&&(this.m_shape.queryXY(o,n),e?n.y===t:n.x===t)){if(this.isCurve(h))continue;-1===a&&(a=this.m_shape.createUserIndex()),-2!==this.m_shape.getUserIndex(h,a)&&(i.push(h),this.m_shape.setUserIndex(h,a,-2)),-2!==this.m_shape.getUserIndex(o,a)&&(i.push(o),this.m_shape.setUserIndex(o,a,-2))}}if(0===i.length)return void(-1!==a&&this.m_shape.removeUserIndex(a));s.geometryReleaseAssert(-1!==a),i.sort((e,t)=>this.compareVertices(e,t));for(let e=0,t=i.length;e<t;e++){const t=i[e];this.m_shape.setUserIndex(t,a,e)}const o=new h.Point2D,m=new h.Point2D;m.setNAN();let l=-1;for(let s=0,h=i.length;s<h;s++){this.progress_();const h=i[s];if(h!==r.nullHandle&&(this.m_shape.queryXY(h,n),!n.isEqualPoint2D(m))){if(-1!==l)for(;;){let n=!1;const h=s;for(let p=l;p<h;p++){const h=i[p];if(h===r.nullHandle)continue;let l=r.nullHandle;const x=this.m_shape.getNextVertex(h);this.m_shape.queryXY(x,o),m.compare(o)<0&&(e?o.y===t:o.x===t)&&(this.isCurve(h)||(l=x));let c=r.nullHandle;const u=this.m_shape.getPrevVertex(h);if(this.m_shape.queryXY(u,o),m.compare(o)<0&&(e?o.y===t:o.x===t)&&(this.isCurve(u)||(c=u)),l===r.nullHandle||c===r.nullHandle){if(l!==r.nullHandle||c!==r.nullHandle){for(let x=p+1;x<s;x++){const s=i[x];if(s===r.nullHandle)continue;const p=this.m_shape.getNextVertex(s);let u=r.nullHandle;this.m_shape.queryXY(p,o),m.compare(o)<0&&(e?o.y===t:o.x===t)&&(this.isCurve(s)||(u=p));const _=this.m_shape.getPrevVertex(s);let y=r.nullHandle;if(this.m_shape.queryXY(_,o),m.compare(o)<0&&(e?o.y===t:o.x===t)&&(this.isCurve(_)||(y=_)),u!==r.nullHandle&&y!==r.nullHandle){this.beforeRemoveVertex(s,i,a),this.m_shape.removeVertex(s,!1),this.beforeRemoveVertex(u,i,a),this.m_shape.removeVertex(u,!1),n=!0;break}if(l!==r.nullHandle&&y!==r.nullHandle){this.removeOverlap(i,h,l,s,y,a),n=!0;break}if(c!==r.nullHandle&&u!==r.nullHandle){this.removeOverlap(i,s,u,h,c,a),n=!0;break}}if(n)break}}else this.beforeRemoveVertex(h,i,a),this.m_shape.removeVertex(h,!1),this.beforeRemoveVertex(l,i,a),this.m_shape.removeVertex(l,!1),n=!0}if(!n)break}l=s,m.setCoordsPoint2D(n)}}this.m_shape.removeUserIndex(a)}beforeRemoveVertex(e,t,n){let i=this.m_shape.getUserIndex(e,n);s.geometryReleaseAssert(i>=0),t[i]=r.nullHandle,i=this.m_shape.getUserIndex(e,this.m_verticesOnExtentIndex),s.geometryReleaseAssert(i>=0),this.m_verticesOnExtent[i]=r.nullHandle;const h=this.m_shape.getPathFromVertex(e);h!==r.nullHandle&&this.m_shape.getFirstVertex(h)===e&&(this.m_shape.setFirstVertex(h,r.nullHandle),this.m_shape.setLastVertex(h,r.nullHandle))}removeOverlap(e,t,s,n,i,r){this.m_shape.setNextVertex(t,n),this.m_shape.setPrevVertex(n,t),this.m_shape.setPrevVertex(s,i),this.m_shape.setNextVertex(i,s),this.beforeRemoveVertex(n,e,r),this.m_shape.removeVertexInternal(n,!1),this.beforeRemoveVertex(i,e,r),this.m_shape.removeVertexInternal(i,!0)}removeSpikesAlongPoles(){this.removeSpikesOnPole(this.m_extent.ymin),this.removeSpikesOnPole(this.m_extent.ymax)}removeSpikesOnPole(e){for(let t=this.m_shape.getFirstPath(this.m_geometry);t!==r.nullHandle;t=this.m_shape.getNextPath(t)){const s=this.m_shape.getPathSize(t);if(s<3)continue;let n=this.m_shape.getFirstVertex(t);const i=new h.Point2D;this.m_shape.queryXY(n,i);let r=i.y===e&&!this.isCurve(n);n=this.m_shape.getNextVertex(n);const a=new h.Point2D;this.m_shape.queryXY(n,a);let o=a.y===e&&!this.isCurve(n);n=this.m_shape.getNextVertex(n);const m=new h.Point2D;for(let t=0,h=s-2;t<h;t++,n=this.m_shape.getNextVertex(n)){this.progress_(),this.m_shape.queryXY(n,m);const t=m.y===e;o&&r&&t&&(a.x-i.x)*(m.x-a.x)<=0?(this.m_shape.removeVertex(this.m_shape.getPrevVertex(n),!1),a.setCoordsPoint2D(m),o=t&&!this.isCurve(n)):(i.setCoordsPoint2D(a),r=o,a.setCoordsPoint2D(m),o=t&&!this.isCurve(n))}}}fixPaths(){for(let e=0,t=this.m_verticesOnExtent.length;e<t;e++){const t=this.m_verticesOnExtent[e];t!==r.nullHandle&&this.m_shape.setPathToVertex(t,r.nullHandle)}const e=this.m_shape.hasCurves();let t=0,n=0;for(let e=this.m_shape.getFirstPath(this.m_geometry);e!==r.nullHandle;){const s=this.m_shape.getFirstVertex(e);if(s===r.nullHandle||e!==this.m_shape.getPathFromVertex(s)){const t=e;e=this.m_shape.getNextPath(e),this.m_shape.setFirstVertex(t,r.nullHandle),this.m_shape.removePathOnly(t);continue}let i=s,h=0;do{this.m_shape.setPathToVertex(i,e),h++,i=this.m_shape.getNextVertex(i)}while(i!==s);this.m_shape.setRingAreaValid(e,!1),this.m_shape.setLastVertex(e,this.m_shape.getPrevVertex(s)),this.m_shape.setPathSize(e,h),n+=h,t++,e=this.m_shape.getNextPath(e)}for(let i=0,h=this.m_verticesOnExtent.length;i<h;i++){let h=this.m_verticesOnExtent[i];if(h===r.nullHandle)continue;let a=this.m_shape.getPathFromVertex(h);if(a!==r.nullHandle)continue;a=this.m_shape.insertPath(this.m_geometry,r.nullHandle);let o=!1,m=0;const l=h;do{this.m_shape.setPathToVertex(h,a),m++,e&&m<=2&&(o||=this.isCurve(h)),h=this.m_shape.getNextVertex(h)}while(h!==l);if(o?0===m:m<=2){let e=this.m_shape.getUserIndex(l,this.m_verticesOnExtentIndex);s.geometryReleaseAssert(e>=0),this.m_verticesOnExtent[e]=r.nullHandle;const t=this.m_shape.removeVertex(l,!1);2===m&&(e=this.m_shape.getUserIndex(t,this.m_verticesOnExtentIndex),e>=0&&(this.m_verticesOnExtent[e]=r.nullHandle),this.m_shape.removeVertex(t,!1));const n=a;a=this.m_shape.getNextPath(a),this.m_shape.setFirstVertex(n,r.nullHandle),this.m_shape.removePathOnly(n);continue}this.m_shape.setClosedPath(a,!0),this.m_shape.setPathSize(a,m),this.m_shape.setFirstVertex(a,l),this.m_shape.setLastVertex(a,this.m_shape.getPrevVertex(l)),this.m_shape.setRingAreaValid(a,!1),n+=m,t++}this.m_shape.setGeometryPathCount(this.m_geometry,t),this.m_shape.setGeometryVertexCount(this.m_geometry,n);let i=0;for(let e=this.m_shape.getFirstGeometry();e!==r.nullHandle;e=this.m_shape.getNextGeometry(e))i+=this.m_shape.getPointCount(e);this.m_shape.setTotalPointCount(i)}dbgCheckPathFirst(){}isCurve(e){return null!==this.m_shape.getSegment(e)}compareVertices(e,t){const s=new h.Point2D;this.m_shape.queryXY(e,s);const n=new h.Point2D;return this.m_shape.queryXY(t,n),s.compare(n)}clipPolesOut(e,t){return this.clipPolygonOrProjectedPolyline2(e,t)}}class l extends t.GeometryCursor{constructor(e,t,i,r){super(),this.m_progressTracker=r,this.m_index=-1,e||s.throwInvalidArgumentException(""),this.m_envelope=t,this.m_inputGeometryCursor=e,this.m_spatialRefImpl=i,this.m_tolerance=n.calculateToleranceFromGeometryForOp(i,t,!1).total()}next(){let e;return(e=this.m_inputGeometryCursor.next())?(s.throwIfMesh(e),this.m_index=this.m_inputGeometryCursor.getGeometryID(),a(e,this.m_envelope,this.m_tolerance,0,this.m_progressTracker)):null}getGeometryID(){return this.m_index}tock(){return!0}getRank(){return 1}}e.OperatorClip=class{getOperatorType(){return 10004}supportsCurves(){return!0}accelerateGeometry(e,t,s){return!1}canAccelerateGeometry(e){return!1}executeMany(e,t,s,n){return new l(e,t,s,n)}execute(e,t,s,n){return function(e,t,s,n){return o(e,t,s,Number.NaN,0,n)}(e,t,s,n)}},e.clip$1=a,e.clipPolesOut=function(e,t,s,n,r,h){const a=new m(t,h),o=new i.Envelope2D;return e.queryLooseEnvelope(o),t.containsEnvelope(o)?e:t.isIntersecting(o)?a.clipPolesOut(e,r):e.createInstance()}});