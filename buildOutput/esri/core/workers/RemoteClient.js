// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../kernel","../Error","../events","../handleUtils","../maybe","../promiseUtils","./InvokeHandler","./registry","./utils","../../support/revision"],function(e,s,t,o,r,n,i,l,a,h){"use strict";const{CLOSE:c,ABORT:_,INVOKE:p,RESPONSE:u,OPEN_PORT:d,ON:b}=a.MessageType;class g{constructor(e){this._invoke=e,this._timer=null,this._cancelledJobIds=new Set,this._invokeMessages=[],this._timer=null,this._process=this._process.bind(this)}push(e){e.type===_?this._cancelledJobIds.add(e.jobId):(this._invokeMessages.push(e),null===this._timer&&(this._timer=setTimeout(this._process,0)))}clear(){this._invokeMessages.length=0,this._cancelledJobIds.clear(),this._timer=null}_process(){this._timer=null;for(const e of this._invokeMessages)this._cancelledJobIds.has(e.jobId)||this._invoke(e);this._cancelledJobIds.clear(),this._invokeMessages.length=0}}class v{static{this.kernelInfo={buildDate:h.buildDate,fullVersion:e.fullVersion,revision:h.commitHash}}static{this.clients=new Map}static connect(e,s){const t=new MessageChannel;let o;o="function"==typeof e?new e:"default"in e&&"function"==typeof e.default?new e.default:e;const r=new v(t.port1,{channel:t,client:o,schedule:s});return"object"==typeof o&&"remoteClient"in o&&(o.remoteClient=r),v.clients.set(r,o),t.port2}static loadWorker(e){const s=l.registry[e];return s?s():Promise.resolve(null)}constructor(e,s,t,o){this._port=e,this._jobQueue=t,this._lowPriorityJobQueue=o,this._outJobs=new Map,this._inJobs=new Map,this._invokeQueue=new g(e=>this._onInvokeMessage(e)),this._client=s.client,this._onMessage=this._onMessage.bind(this),this._channel=s.channel,this._schedule=s.schedule,this._port.addEventListener("message",this._onMessage),this._port.start()}close(){this._post({type:c}),this._close()}isBusy(){return this._outJobs.size>0}invoke(e,s,t){return this.apply(e,[s],t)}apply(e,t,o){const i=o?.signal,l=o?.transferList;if(!this._port)return Promise.reject(new s(a.portClosedErrorName,`Cannot call invoke('${e}'), port is closed`,{methodName:e,data:t}));const h=a.newJobId();return new Promise((s,o)=>{if(n.isAborted(i))return this._processWork(),void o(n.createAbortError());const a=n.onAbort(i,()=>{const e=this._outJobs.get(h);e&&(this._outJobs.delete(h),this._processWork(),r.removeMaybe(e.abortHandle),this._post({type:_,jobId:h}),o(n.createAbortError()))}),c={resolve:s,reject:o,abortHandle:a,debugInfo:e};this._outJobs.set(h,c),this._post({type:p,jobId:h,methodName:e,abortable:null!=i},t,l)})}createInvokeProxy(e){return i.createInvokeProxy(this,e)}on(e,s){const t=new MessageChannel;function r(e){s(e.data)}return this._port.postMessage({type:b,eventType:e,port:t.port2},[t.port2]),t.port1.addEventListener("message",r),t.port1.start(),o.makeHandle(()=>{t.port1.postMessage({type:c}),t.port1.close(),t.port1.removeEventListener("message",r)})}jobAdded(){this._processWork()}openPort(){const e=new MessageChannel;return this._post({type:d,port:e.port2}),e.port1}_processWork(){if(this._outJobs.size>=2)return;const e=this._jobQueue?.pop()??this._lowPriorityJobQueue?.pop();if(!e)return;const{methodName:s,data:t,invokeOptions:o,resolver:r}=e;this.apply(s,t,o).then(e=>r.resolve(e)).catch(e=>r.reject(e))}_close(){this._channel&&(this._channel=void 0),this._port.removeEventListener("message",this._onMessage),this._port.close(),this._outJobs.forEach(e=>{r.removeMaybe(e.abortHandle),e.reject(n.createAbortError(`Worker closing, aborting job calling '${e.debugInfo}'`))}),this._inJobs.clear(),this._outJobs.clear(),this._invokeQueue.clear(),this._port=null,this._client=null,this._schedule=null,this._onMessage=null,this._channel=null,this._jobQueue=void 0,this._invokeQueue=void 0,this._lowPriorityJobQueue=void 0}_onMessage(e){null!=this._schedule?this._schedule(()=>this._processMessage(e,!0)):this._processMessage(e,!1)}_processMessage(e,s){const t=a.receiveMessage(e);if(t)switch(t.type){case u:this._onResponseMessage(t);break;case p:s?this._onInvokeMessage(t):this._invokeQueue.push(t);break;case _:this._onAbortMessage(t);break;case c:this._onCloseMessage();break;case d:this._onOpenPortMessage(t);break;case b:this._onOnMessage(t)}}_onAbortMessage(e){const s=this._inJobs,t=e.jobId,o=s.get(t);this._invokeQueue.push(e),o&&(o.controller&&o.controller.abort(),s.delete(t))}_onCloseMessage(){const e=this._client;this._close(),e&&"destroy"in e&&v.clients.get(this)===e&&e.destroy(),v.clients.delete(this),e?.remoteClient&&(e.remoteClient=null)}_onInvokeMessage(e){const{methodName:s,jobId:t,data:o=[],abortable:r}=e,i=r?new AbortController:null,l=this._inJobs;let h,c=this._client,_=c[s];try{if(!_&&s&&s.includes(".")){const e=s.split(".");for(let s=0;s<e.length-1;s++)c=c[e[s]],_=c[e[s+1]]}if("function"!=typeof _)throw new TypeError(`${s} is not a function`);o.push({client:this,signal:i?i.signal:null}),h=_.apply(c,o)}catch(e){return void this._post({type:u,jobId:t,error:a.toInvokeError(e)})}n.isPromiseLike(h)?(l.set(t,{controller:i,promise:h}),h.then(e=>{l.has(t)&&(l.delete(t),this._post({type:u,jobId:t},e))},e=>{l.has(t)&&(l.delete(t),n.isAbortError(e)||this._post({type:u,jobId:t,error:a.toInvokeError(e||{message:`Error encountered at method ${s}`})}))})):this._post({type:u,jobId:t},h)}_onOpenPortMessage(e){new v(e.port,{client:this._client})}_onOnMessage(e){const{port:s}=e,o=this._client.on(e.eventType,e=>{s.postMessage(e)}),r=t.on(e.port,"message",e=>{const t=a.receiveMessage(e);t?.type===c&&(r.remove(),o.remove(),s.close())})}_onResponseMessage(e){const{jobId:t,error:o,data:n}=e,i=this._outJobs;if(!i.has(t))return;const l=i.get(t);i.delete(t),this._processWork(),r.removeMaybe(l.abortHandle),o?l.reject(s.fromJSON(JSON.parse(o))):l.resolve(n)}_post(e,s,t){return a.postMessage(this._port,e,s,t)}}return v});