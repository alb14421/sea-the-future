// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","./DateOnly","./errorSupport","./SqlTimestampOffset","./TimeOnly","../../chunks/datetime"],function(n,l,e,t,r,a){"use strict";const u={min:{minParams:1,maxParams:1,evaluate:n=>m(n[0],"min")},max:{minParams:1,maxParams:1,evaluate:n=>m(n[0],"max")},avg:{minParams:1,maxParams:1,evaluate:n=>i(n[0])},sum:{minParams:1,maxParams:1,evaluate:n=>function(n){if(null===n)return null;let l=0;for(let t=0;t<n.length;t++){const r=n[t];if(null!==r){if(!o(r))throw new e.SqlError("InvalidValueForAggregateFunction");l+=r}}return l}(n[0])},stddev:{minParams:1,maxParams:1,evaluate:n=>function(n){if(null===n)return null;const l=s(n);return null===l?null:Math.sqrt(l)}(n[0])},count:{minParams:1,maxParams:1,evaluate:n=>null==n[0]?null:n[0].length},var:{minParams:1,maxParams:1,evaluate:n=>s(n[0])}};function i(n){if(null===n)return null;let l=0,t=0;for(let r=0;r<n.length;r++){const a=n[r];if(null!==a){if(!o(a))throw new e.SqlError("InvalidValueForAggregateFunction");t++,l+=a}}return 0===t?null:l/n.length}function o(n){return"number"==typeof n}function m(n,e){if(null===n)return null;let u=null,i=null;for(const o of n){let n=o;n=l.DateOnly.isDateOnly(o)||r.TimeOnly.isTimeOnly(o)?o.toNumber():a.DateTime.isDateTime(o)?o.toMillis():t.SqlTimeStampOffset.isTimestampOffset(o)?o.toMilliseconds():o,(null===u||"max"===e&&null!==i&&null!==n&&i<=n||"min"===e&&null!==i&&null!==n&&i>=n)&&(u=o,i=n)}return u}function s(n){if(null===n)return null;if(0===(n=n.filter(n=>null!==n)).length)return null;const l=i(n);if(null===l)return null;let t=0;for(const r of n){if(!o(r))throw new e.SqlError("InvalidValueForAggregateFunction");t+=(l-r)**2}return t/(n.length-1)}n.aggregateFunction=function(n,l){const t=u[n.toLowerCase()];if(null==t)throw new e.SqlError("FunctionNotRecognized");if(l.length<t.minParams||l.length>t.maxParams)throw new e.SqlError("InvalidParameterCount",{name:n.toUpperCase()});return t.evaluate(l)},n.isAggregate=function(n,l){const e=u[n.toLowerCase()];return null!=e&&l>=e.minParams&&l<=e.maxParams},Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});