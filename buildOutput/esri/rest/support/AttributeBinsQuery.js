// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/tslib.es6","../../core/Clonable","../../core/jsonMap","../../core/JSONSupport","../../core/Logger","../../core/accessorSupport/decorators/property","../../core/accessorSupport/ensureType","../../core/has","../../core/RandomLCG","../../core/accessorSupport/decorators/enumeration","../../core/accessorSupport/decorators/subclass","../../geometry/SpatialReference","../../geometry/support/jsonUtils","../../geometry/support/typeUtils","../../layers/graphics/data/queryUtils","./AutoIntervalBinParameters","./BinParametersBase","./DateBinParameters","./FixedBoundariesBinParameters","./FixedIntervalBinParameters","./spatialRelationships","./StatisticDefinition","../../chunks/TimeExtent","../../time/timeZoneUtils"],function(e,t,r,o,i,a,n,s,p,l,d,u,c,y,m,f,_,h,v,S,b,w,g,j,T){"use strict";const B=new o.JSONMap({asc:"ascending",desc:"descending"}),R={base:h,key:"type",typeMap:{"auto-interval":_,date:v,"fixed-boundaries":S,"fixed-interval":b}};return e.default=class extends(r.ClonableMixin(i.JSONSupport)){constructor(e){super(e),this.binParameters=null,this.binOrder="ascending",this.cacheHint=void 0,this.datumTransformation=null,this.defaultSpatialReference=null,this.distance=void 0,this.geometry=null,this.lowerBoundaryAlias=null,this.outSpatialReference=null,this.outStatistics=null,this.returnDistinctValues=null,this.spatialRelationship="intersects",this.timeExtent=null,this.upperBoundaryAlias=null,this.units=null,this.where="1=1"}set outTimeZone(e){this._set("outTimeZone",e),e&&!T.isTimeZoneValid(e)&&a.getLogger(this).warn("#outTimeZone",`the parsed value '${e}' may not be a valid IANA time zone`)}},t.__decorate([n.property({types:R,json:{name:"bin",write:!0}})],e.default.prototype,"binParameters",void 0),t.__decorate([d.enumeration(B)],e.default.prototype,"binOrder",void 0),t.__decorate([n.property({type:Boolean,json:{write:!0}})],e.default.prototype,"cacheHint",void 0),t.__decorate([n.property({json:{write:!0}})],e.default.prototype,"datumTransformation",void 0),t.__decorate([n.property({type:c,json:{name:"defaultSR",write:!0}})],e.default.prototype,"defaultSpatialReference",void 0),t.__decorate([n.property({type:Number,json:{write:{overridePolicy:e=>({enabled:e>0})}}})],e.default.prototype,"distance",void 0),t.__decorate([n.property({types:m.geometryTypes,json:{read:y.fromJSON,write:!0}})],e.default.prototype,"geometry",void 0),t.__decorate([n.property({type:String,json:{write:!0}})],e.default.prototype,"lowerBoundaryAlias",void 0),t.__decorate([n.property({type:c,json:{name:"outSR",write:!0}})],e.default.prototype,"outSpatialReference",void 0),t.__decorate([n.property({type:[g],json:{write:{enabled:!0,overridePolicy(){return{enabled:null!=this.outStatistics&&this.outStatistics.length>0}}}}})],e.default.prototype,"outStatistics",void 0),t.__decorate([n.property({value:null,json:{name:"outTimeReference",read:{reader:e=>e.ianaTimeZone},write:{writer:(e,t,r)=>{e&&(t[r]={ianaTimeZone:e})}}}})],e.default.prototype,"outTimeZone",null),t.__decorate([n.property({type:Boolean,json:{write:!0}})],e.default.prototype,"returnDistinctValues",void 0),t.__decorate([d.enumeration(w.spatialRelKebabDict,{name:"spatialRel"})],e.default.prototype,"spatialRelationship",void 0),t.__decorate([n.property({type:j.TimeExtent,json:{write:!0}})],e.default.prototype,"timeExtent",void 0),t.__decorate([n.property({type:String,json:{write:!0}})],e.default.prototype,"upperBoundaryAlias",void 0),t.__decorate([n.property({type:String,json:{read:f.unitsKebabDict.read,write:{writer:f.unitsKebabDict.write,overridePolicy(e){return{enabled:null!=e&&null!=this.distance}}}}})],e.default.prototype,"units",void 0),t.__decorate([n.property({type:String,json:{write:!0}})],e.default.prototype,"where",void 0),e.default=t.__decorate([u.subclass("esri.rest.support.AttributeBinsQuery")],e.default),e.default.from=s.ensureType(e.default),e.default});