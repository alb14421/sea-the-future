// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/tslib.es6","../../core/Clonable","../../core/jsonMap","../../core/JSONSupport","../../core/accessorSupport/decorators/property","../../core/has","../../core/Logger","../../core/RandomLCG","../../core/accessorSupport/decorators/subclass","../../core/accessorSupport/decorators/writer","../../geometry/Point","../../geometry/support/jsonUtils","../../geometry/support/typeUtils","../../layers/support/MosaicRule"],function(e,t,o,r,s,p,a,i,c,u,l,n,d,y,m){"use strict";const g=new r.JSONMap({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});return e.default=class extends(o.ClonableMixin(s.JSONSupport)){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(e,t,o){e?.length&&(t.geometryType=d.getJsonType(e[0]),t.geometries=e.map(e=>e.toJSON()))}},t.__decorate([p.property({types:[y.geometryTypes]})],e.default.prototype,"geometries",void 0),t.__decorate([l.writer("geometries")],e.default.prototype,"writeGeometries",null),t.__decorate([p.property({type:m,json:{write:!0}})],e.default.prototype,"mosaicRule",void 0),t.__decorate([p.property({type:n,json:{write:!0}})],e.default.prototype,"pixelSize",void 0),t.__decorate([p.property({json:{write:!0}})],e.default.prototype,"constantZ",void 0),t.__decorate([p.property({type:g.apiValues,json:{read:g.read,write:g.write}})],e.default.prototype,"baseType",void 0),e.default=t.__decorate([u.subclass("esri.rest.support.ImageVolumeParameters")],e.default),e.default});