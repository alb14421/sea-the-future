// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../chunks/tslib.es6","../../Color","../../core/handleUtils","../../core/iteratorUtils","../../core/memoize","../../core/reactiveUtils","../../core/unitUtils","../../core/accessorSupport/decorators/property","../../core/has","../../core/Logger","../../core/RandomLCG","../../core/accessorSupport/decorators/subclass","../../chunks/vec32","../../core/libs/gl-matrix-2/factories/vec3f64","../../geometry/ellipsoidUtils","../../geometry/support/ray","../../layers/support/ElevationQuery","../../views/3d/support/hitTest","../../views/3d/webgl-engine/lib/Intersector","../../views/3d/webgl-engine/lib/intersectorUtilsConversions","./ElevationProfileLine"],function(e,t,r,i,o,n,s,l,c,a,u,p,d,y,_,v,h,f,w,m,g){"use strict";let I=class extends g{constructor(e){super(e),this.type="view",this.color=new t("#cf4ccf"),this.viewVisualizationEnabled=!0,this.include=null,this.exclude=null,this.numSamplesForPreview=50,this.numSamplesPerChunk=25,this._getQueryElevationDependencies=o.memoize((e,t,r,i,o,n,s)=>({inputGraphicUid:null!=e?D(e):null,visibleLayers:t,maxIntersectionDistance:r,intersectOptions:i,view:o,stationary:n,spatialReference:s})),this._vecA=y.create(),this._vecB=y.create(),this._ray=v.create()}get minDemResolution(){const e=this._viewModel?.view;if(null==e||"3d"!==e.type)return null;const t=e.pointsOfInterest?.focus?.worldUnitsPerContentPixel;return null==t?null:t*s.getMetersPerVerticalUnitForSR(e.spatialReference)}get queryElevationDependencies(){const e=this._view;return e?this._getQueryElevationDependencies(this._viewModel?.input,this._visibleLayers,this._maxIntersectionDistance,this._intersectOptions,e,e.stationary,e.spatialReference):null}get _visibleLayers(){return this._view?.map?.allLayers?.filter(e=>e.visible).toArray()??[]}get _intersectOptions(){const e=this._view;return null==e||e.destroyed?{}:f.externalToInternalIntersectOptions(e,{include:this.include,exclude:[...this._pointCloudLayers,...i.isIterable(this.exclude)?this.exclude:this.exclude?[this.exclude]:[]]})}get _pointCloudLayers(){const e=this._view;return null==e?[]:e.allLayerViews.toArray().filter(e=>"point-cloud"===e.layer?.type).map(e=>e.layer)}get _view(){const e=this._viewModel?.view;return null!=e&&"3d"===e.type?e:null}get _maxIntersectionDistance(){const e=this._view;return e?.renderCoordsHelper?_.getReferenceEllipsoid(e.spatialReference).radius/e.renderCoordsHelper.unitInMeters:Number.POSITIVE_INFINITY}get _intersector(){const e=this._view;if(null==e)return null;const t=new w.Intersector(e.state.viewingMode),r=t.options;return r.hud=!1,r.invisibleTerrain=!1,r.backfacesTerrain=!1,r.selectionMode=!1,r.store=2,t}async queryElevation(e,{noDataValue:t,signal:r}){const i=this.queryElevationDependencies;if(null==i)throw new Error("ElevationProfileLineInput: no dependencies");const o=this._intersector;if(null==o)throw new Error("ElevationProfileLineInput: no view");const{intersectOptions:n,view:s,spatialReference:l}=i,c=s.renderCoordsHelper,a=s.sceneIntersectionHelper,u=this._vecA,p=this._vecA,y=this._vecB,_=this._ray;if(!l)return{geometry:e,noDataValue:t};const f=await h.GeometryDescriptor.fromGeometry(e).project(l,r);if(!f)return{geometry:e,noDataValue:t};const w=f.coordinates,m=w.length;for(let e=0;e<m;++e){const r=w[e];d.set(y,r.x,r.y,r.z??0),c.toRenderCoords(y,l,y),c.setAltitude(u,2e5,y);const s=v.fromPoints(u,y,_);a.computeIntersection(s,o,!0,n);const h=b(i,o.results.all);h?(h.getIntersectionPoint(p),c.fromRenderCoords(p,p,l),r.z=p[2]):r.z=t}return{geometry:f.export(),noDataValue:t}}attach(e){const t=()=>this._onChange();return r.handlesGroup([super.attach(e),n.watch(()=>this.queryElevationDependencies,t),n.on(()=>e.elevationProvider,"elevation-change",t,{onListenerAdd:t,onListenerRemove:t})])}};function b({view:e,inputGraphicUid:t,maxIntersectionDistance:r},i){for(const o of i){if(!o.withinDistance(r))continue;const i=m.toGraphic(o,e);if(null==i||D(i)!==t)return o}return null}function D(e){if(e.layer&&"objectIdField"in e.layer){const t=e.attributes[e.layer.objectIdField];if(t)return`o-${e.layer.id}-${t}`}return`u-${e.uid}`}return e.__decorate([l.property({type:t,nonNullable:!0})],I.prototype,"color",void 0),e.__decorate([l.property()],I.prototype,"viewVisualizationEnabled",void 0),e.__decorate([l.property()],I.prototype,"include",void 0),e.__decorate([l.property()],I.prototype,"exclude",void 0),e.__decorate([l.property({readOnly:!0})],I.prototype,"minDemResolution",null),e.__decorate([l.property()],I.prototype,"queryElevationDependencies",null),e.__decorate([l.property()],I.prototype,"_visibleLayers",null),e.__decorate([l.property()],I.prototype,"_intersectOptions",null),e.__decorate([l.property()],I.prototype,"_pointCloudLayers",null),e.__decorate([l.property()],I.prototype,"_view",null),e.__decorate([l.property()],I.prototype,"_maxIntersectionDistance",null),e.__decorate([l.property()],I.prototype,"_intersector",null),I=e.__decorate([p.subclass("esri.widgets.ElevationProfile.ElevationProfileLineView")],I),I});