// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","../chunks/tslib.es6","../core/Logger","../core/reactiveUtils","../core/accessorSupport/decorators/property","../core/has","../core/RandomLCG","../core/accessorSupport/decorators/subclass","../intl/locale","./Widget","./Daylight/css","./Daylight/DaylightViewModel","./Daylight/VisibleElements","./Daylight/support/daylightUtils","./Daylight/support/SliderWithDropdown","./Slider/css","../chunks/componentsUtils","./support/globalCss","./support/Heading","./support/timeWidgetUtils","./support/widgetUtils","./support/decorators/messageBundle","./support/decorators/vmEvent","./support/jsxFactory"],function(e,t,s,i,l,o,a,n,r,d,c,h,p,g,u,y,m,b,_,v,S,w,k,C){"use strict";const x="date";let P=class extends d{constructor(e,t){super(e,t),this.headingLevel=3,this.viewModel=new h,this.visibleElements=new p,this.dateOrSeason=x,this._timeSlider=new u({viewModel:this.viewModel.timeSliderViewModel,steps:this.timeSliderSteps,labelInputsEnabled:!1,visibleElements:{labels:!0},tickConfigs:[{mode:"position",values:[0,360,720,1080,1439],labelsVisible:!0,tickCreatedFunction:(e,t,s)=>v.onPrimaryTickCreated({tickElement:t,labelElement:s,tickClasses:D,onClick:this._makeGoToTime(e)})},{mode:"position",values:[120,240,480,600,840,960,1200,1320],tickCreatedFunction:(e,t)=>v.onSecondaryTickCreated({tickElement:t,tickClasses:D,onClick:this._makeGoToTime(e)})}]}),this._onPlayDayClick=()=>{this.viewModel.toggleDayPlaying()},this._onDateChange=e=>{const t=e.currentTarget.valueAsDate;this.viewModel.onDateChange(Array.isArray(t)?t[0]:t)},this._onYearPlayClick=()=>{this.viewModel.toggleYearPlaying()},this._onSeasonChange=e=>{this.viewModel.currentSeason=e.currentTarget.value},this._onSunLightingCheckboxChange=()=>{this.viewModel.toggleSunLightingEnabled()},this._onShadowCheckboxChange=()=>{this.viewModel.toggleDirectShadowsEnabled()}}get icon(){return"brightness"}set icon(e){this._overrideIfSome("icon",e)}get label(){return this.messages?.title??""}set label(e){this._overrideIfSome("label",e)}get playSpeedMultiplier(){return this.viewModel.playSpeedMultiplier}set playSpeedMultiplier(e){this.viewModel.playSpeedMultiplier=e}get timeSliderSteps(){return this._timeSlider?.steps??5}set timeSliderSteps(e){this._timeSlider.steps=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}postInitialize(){this.viewModel.isSupported&&(this.addHandles([i.watch(()=>this.viewModel.timeSliderViewModel,e=>this._timeSlider.viewModel=e,i.syncAndInitial),i.watch(()=>this.visibleElements?.timezone,e=>this._timeSlider.showDropDown=e,i.syncAndInitial),i.watch(()=>!this.viewModel.sunLightingEnabled,e=>{this._timeSlider.disabled=e},i.syncAndInitial),r.onLocaleChange(()=>this._adjustTimeSliderPadding())]),this._adjustTimeSliderPadding())}destroy(){this._timeSlider.destroy()}render(){const{messages:e,viewModel:t,visibleElements:s}=this,i=t.isSupported;return C.tsx("div",{class:this.classes(c.css.base,b.globalCss.widget)},i?C.tsx(C.tsxFragment,null,s.header?C.tsx(_.Heading,{level:this.headingLevel},e.title):null,this._renderTimeOptions(),s.datePicker?this._renderDateOrSeason():null,s.sunLightingToggle?this._renderSunLightingToggle():null,s.shadowsToggle?this._renderShadowsToggle():null):C.tsx("div",{class:c.css.panelError,key:"unsupported"},C.tsx("p",null,e.unsupported)))}loadDependencies(){return m.loadCalciteComponents({button:()=>new Promise((t,s)=>e(["../chunks/index2"],t,s)),checkbox:()=>new Promise((t,s)=>e(["../chunks/index44"],t,s)),label:()=>new Promise((t,s)=>e(["../chunks/index5"],t,s)),"input-date-picker":()=>new Promise((t,s)=>e(["../chunks/index27"],t,s)),option:()=>new Promise((t,s)=>e(["../chunks/index8"],t,s)),select:()=>new Promise((t,s)=>e(["../chunks/index9"],t,s))})}_adjustTimeSliderPadding(){v.adjustTimeSliderForLocale(this.domNode?.querySelector(`.${y.css.base}`))}_renderTimeOptions(){const{viewModel:e,visibleElements:t,messages:s}=this,{dayPlaying:i}=e,l=!e.sunLightingEnabled;return C.tsx("div",{class:this.classes(c.css.dayContainer,{[c.css.sliderDateOn]:t.datePicker,[c.css.sliderDateOff]:!t.datePicker,[c.css.sliderAmPmOn]:v.useAmPm(),[c.css.containerDisabled]:l}),key:"daylight-time-options"},this._timeSlider.render(),t.playButtons?this._renderPlayPauseButton({playing:i,disabled:l,label:s.playDay,onClick:this._onPlayDayClick}):null)}_renderDateOptions(){const{viewModel:e,visibleElements:t,messages:s}=this,{yearPlaying:i}=e,l=!e.sunLightingEnabled;return C.tsx("div",{class:this.classes(c.css.dateContainer,l&&c.css.containerDisabled),key:c.css.dateContainer},C.tsx("calcite-input-date-picker",{class:c.css.datePicker,"data-testid":"daylight-date-picker",disabled:l,key:c.css.datePicker,overlayPositioning:"fixed",placement:"bottom",valueAsDate:e.localDate,onCalciteInputDatePickerChange:this._onDateChange}),t.playButtons?this._renderPlayPauseButton({playing:i,disabled:l,label:s.playYear,onClick:this._onYearPlayClick}):null)}_renderPlayPauseButton({playing:e,disabled:t,label:s,onClick:i}){return C.tsx("calcite-button",{appearance:"solid",class:c.css.playPauseButton,disabled:t,iconStart:e?"pause-f":"play-f",label:s,onclick:i,round:!0,title:s,type:"button"})}_renderSeasonSelect(){const{messages:e,viewModel:t}=this,s=!t.sunLightingEnabled;return C.tsx("calcite-select",{class:this.classes(c.css.seasonPicker),disabled:s,label:e.season,onCalciteSelectChange:this._onSeasonChange},g.orderedSeasons.map(s=>C.tsx("calcite-option",{selected:t.currentSeason===s,value:s},e[s])))}_renderDateOrSeason(){return"date"===this.dateOrSeason?this._renderDateOptions():this._renderSeasonSelect()}_renderSunLightingToggle(){const e=this.messages?.sunLightingToggle;return C.tsx("calcite-label",{key:"date-time-toggle",layout:"inline",scale:"s",title:e?.tooltip},C.tsx("calcite-checkbox",{checked:this.viewModel.sunLightingEnabled,class:c.css.sunLightingCheckbox,onCalciteCheckboxChange:this._onSunLightingCheckboxChange}),e?.label)}_renderShadowsToggle(){const e=this.messages.shadowsToggle;return C.tsx("calcite-label",{key:"shadow-toggle",layout:"inline",scale:"s",title:e?.tooltip},C.tsx("calcite-checkbox",{checked:this.viewModel.directShadowsEnabled,class:c.css.shadowsCheckbox,onCalciteCheckboxChange:this._onShadowCheckboxChange}),e.label)}_makeGoToTime(e){return()=>{this.viewModel.timeSliderPosition=e}}};t.__decorate([l.property(),w.messageBundle("esri/widgets/Daylight/t9n/Daylight")],P.prototype,"messages",void 0),t.__decorate([l.property(),w.messageBundle("esri/widgets/support/t9n/timezone")],P.prototype,"timezoneMessages",void 0),t.__decorate([l.property()],P.prototype,"headingLevel",void 0),t.__decorate([l.property()],P.prototype,"icon",null),t.__decorate([l.property()],P.prototype,"label",null),t.__decorate([l.property()],P.prototype,"playSpeedMultiplier",null),t.__decorate([l.property()],P.prototype,"timeSliderSteps",null),t.__decorate([l.property()],P.prototype,"view",null),t.__decorate([k.vmEvent("user-date-time-change"),l.property({type:h})],P.prototype,"viewModel",void 0),t.__decorate([l.property({type:p,nonNullable:!0})],P.prototype,"visibleElements",void 0),t.__decorate([l.property({cast(e){return"season"===e||"date"===e?e:(s.getLogger(this).warn(`"${e}" is not a valid option. Acceptable values are only "date" or "season". Defaulting to "${x}".`),x)}})],P.prototype,"dateOrSeason",void 0),t.__decorate([l.property()],P.prototype,"_timeSlider",void 0),P=t.__decorate([n.subclass("esri.widgets.Daylight")],P);const D=[b.globalCss.interactive,b.globalCss.anchor];return P});