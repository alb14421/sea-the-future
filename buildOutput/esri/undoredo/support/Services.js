// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../chunks/tslib.es6","../../kernel","../../core/Collection","../../core/Error","../../core/Evented","../../core/Loadable","../../core/Logger","../../core/MapUtils","../../core/Promise","../../core/promiseUtils","../../core/ReactiveMap","../../core/reactiveUtils","../../core/urlUtils","../../core/accessorSupport/decorators/property","../../core/has","../../core/RandomLCG","../../core/accessorSupport/decorators/subclass","../../core/support/UpdatingHandles","../../layers/support/arcgisLayerUrl","../../layers/support/layerUtils","../../portal/Portal","../../portal/support/utils","../../rest/featureService/FeatureService","./ServiceVersionInfo"],function(e,i,n,r,s,t,o,a,d,c,v,l,p,u,h,g,f,m,y,w,S,_,I,b,L,V){"use strict";const A=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"})),U=new Map;i.Services=class extends(a.LoadableMixin(v.EsriPromiseMixin(o.EventedAccessor))){constructor(e){super(e),this._updatingHandles=new w.UpdatingHandles,this.items=new s,this.tablesAndLayersLookup=new p,this.additionalLayers=new s,this._debouncedCheckAndUpdateServiceInfos=l.debounce(async()=>{const e=[];for(const i of this.items){if(0===i.layersAndTables.length)continue;const n=i.layersAndTables.getItemAt(0);n?.gdbVersion!==i.versionInfo?.versionIdentifier.name&&e.push(i)}0!==e.length&&(await u.whenOnce(()=>!this.updating),await this._updateVersionInfos(e))}),this._debouncedLayersChanged=l.debounce(async()=>{const e=this._detectNewLayersAndTables();0!==e.length&&(await u.whenOnce(()=>!this._updatingHandles.updating),await this._updatingHandles.addPromise((async()=>{const i=new Set;for(const n of e)if("feature"===n.type||"subtype-group"===n.type){if(!n.url)continue;const e=S.parse(n.url).url.path,r=this._findServiceInfo(e);if(r)this.tablesAndLayersLookup.set(n,r),n.isTable?r.tables.push(n):r.layers.push(n);else if(!i.has(e))try{await this._addServiceInfo(e,n)}catch(i){d.getLogger(this).error(`Failed to load feature service: ${e}`,i)}finally{i.add(e)}}})()))}),this._processed=new Set}destroy(){this._set("view",null),this.items.removeAll(),this.tablesAndLayersLookup.clear()}async load(e){return l.throwIfAborted(e),this.addHandles([u.watch(()=>this.view.map,()=>{this._reset()}),u.watch(()=>this._allLayersAndTables,()=>{this._debouncedLayersChanged().catch(e=>{d.getLogger(this).warn("Failed to update service info",e)})}),u.watch(()=>this.items.map(e=>e.layersAndTables.map(e=>e.gdbVersion??"").join(",")),()=>{this.checkAndUpdateServiceInfos().catch(e=>{d.getLogger(this).warn("Failed to update service info",e)})})]),this.addResolvingPromise(this._debouncedLayersChanged()),this}get updating(){return"loading"===this.loadStatus||this._updatingHandles.updating}checkAndUpdateServiceInfos(){return this._debouncedCheckAndUpdateServiceInfos()}changeVersion(e,i,n){return this._updatingHandles.addPromise((async()=>{await this._changeVersionInternal(e,i,n)})())}createVersion(e){return this._updatingHandles.addPromise((async()=>{const i=e.featureServerUrl,n=this._findServiceInfo(i);if(!n?.versionService)throw new t("services:no-version-management-service","No version management service");const r=n.hasAdvancedEditingUserTypeExtension,s=n.loggedInServiceUser.toUpperCase(),o=(a=e.ownerName)&&0!==a.trim().length?e.ownerName?.trim().toUpperCase():s;var a;if(o!==s){if(n.featureServiceVersion<=11.1)throw new t("services:versioning-api-error","Version management API too old");if(!r)throw new t("services:no-advanced-editing-user-type-extension","No advanced editing extension on service")}if("SDE"===o?.toUpperCase()&&"DEFAULT"===e.versionName.toUpperCase())throw new t("services:no-valid-version-name","No valid version name");{const i=await n.versionService.getVersionInfos();if(i?.find(i=>i.versionIdentifier.name.toUpperCase()===(o+"."+e.versionName).toUpperCase()||i.versionIdentifier.name.toUpperCase()===(s+"."+e.versionName).toUpperCase()))throw new t("services:no-valid-version-name","No valid version name")}const d=await n.versionService.createVersion({versionName:e.versionName,access:o!==s?"public":e.access,description:e.description});if(o!==s){const{guid:i,name:r}=d.versionIdentifier;await n.versionService.alterVersion({guid:i,name:r},{ownerName:o,access:e.access})}e.switchToVersion&&await this._changeVersionInternal(i,d.versionIdentifier.name,d.versionIdentifier.guid),this.emit("version-created",{versionIdentifier:d.versionIdentifier,versionManagementService:n.versionService})})())}deleteVersion(e,i,n){return this._updatingHandles.addPromise((async()=>{const r=this._findServiceInfo(e);if(!r?.versionService)throw new t("services:no-version-management-service","No version management service");if(r.featureServiceVersion<=11.1)throw new t("services:versioning-api-error","Version management API too old");if(!r.hasAdvancedEditingUserTypeExtension)throw new t("services:no-advanced-editing-user-type-extension","No advanced editing extension on service");const s={name:i,guid:n};await r.versionService.deleteVersion(s)&&(await this._updateVersionInfo(r),this.emit("version-deleted",{versionIdentifier:s,versionManagementService:r.versionService}))})())}startEditing(e){return this._updatingHandles.addPromise((async()=>{const i=this._findServiceInfo(e);if(!i?.versionService)throw new t("services:no-version-management-service","No version management service");if(!i.hasAdvancedEditingUserTypeExtension)throw new t("services:no-advanced-editing-user-type-extension","No advanced editing extension on service");const n=i.versionInfo?.versionIdentifier??{name:i.versionService.defaultVersionIdentifier.name,guid:i.versionService.defaultVersionIdentifier.guid};let r=!0;("none"!==i.versionService.getLockType(n)||(r=await i.versionService.startReading(n),r))&&(r=await i.versionService.startEditing(n),i.updateLockType())})())}finishEditing(e,i){return this._updatingHandles.addPromise((async()=>{const n=this._findServiceInfo(e);if(!n?.versionService)throw new t("services:no-version-management-service","No version management service");if(!n.hasAdvancedEditingUserTypeExtension)throw new t("services:no-advanced-editing-user-type-extension","No advanced editing extension on service");const r=n.versionInfo?.versionIdentifier??{name:n.versionService.defaultVersionIdentifier.name,guid:n.versionService.defaultVersionIdentifier.guid},s=n.versionService.getLockType(r);if("none"!==s)return"read"===s?(await n.versionService.stopReading(r),void n.updateLockType()):"edit"===s?(await n.versionService.stopEditing(r,i),await n.versionService.stopReading(r),void n.updateLockType()):void 0})())}async _changeVersionInternal(e,i,n){const r=this._findServiceInfo(e);if(!r?.versionService)throw new t("services:no-version-management-service","No version management service");const s=r.versionInfo?.versionIdentifier??{name:r.versionService.defaultVersionIdentifier.name,guid:r.versionService.defaultVersionIdentifier.guid},o={name:i,guid:n};await r.versionService.changeVersion(this.view?.map,s,o)&&await this._updateVersionInfo(r)}async _updateVersionInfo(e){const i=e.versionService;if(!i)return;if(0===e.layersAndTables.length)return;const n=e.layersAndTables.getItemAt(0)?.gdbVersion,r=n?await i.getVersionIdentifierFromName(n):i.defaultVersionIdentifier;e.versionInfo=await i.getVersionInfoExtended(r)}_findServiceInfo(e){return this.items.find(i=>i.featureService.url===e)??null}_removeFeatureService(e){this.items.remove(e)}_reset(){this.additionalLayers.removeAll(),this._processed.clear(),this.tablesAndLayersLookup.clear(),this.items.removeAll()}async _findPortal(e){const i=r.id?.findServerInfo(e??"");if(!i?.owningSystemUrl)return null;const n=`${i.owningSystemUrl}/sharing/rest`,s=I.getDefault();return s?.loaded&&h.normalize(s.restUrl)===h.normalize(n)?s:new I({authMode:"immediate",url:i.owningSystemUrl}).load()}_updateVersionInfos(e){return this._updatingHandles.addPromise((async()=>{for(const i of e)await this._updateVersionInfo(i).catch(e=>{d.getLogger(this).error("Failed to update version details",e)})})())}async _addServiceInfo(i,n){const r=new L({url:i});await r.load();const t=await this._findPortal(i),o=t?.user?.username;let a=!1;o&&(a=await b.hasUserTypeExtension(t,o,"advediting"));let d=null;r.versionManagementServiceUrl&&(d=new(0,(await new Promise((i,n)=>e(["../../versionManagement/VersionManagementService"],e=>i(A(e)),n))).default)({url:r.versionManagementServiceUrl}),await d.load());const c=n.isTable?[]:[n],v=n.isTable?[n]:[],l=new V.ServiceVersionInfo({loggedInServiceUser:o??"",hasAdvancedEditingUserTypeExtension:a,versionInfo:null,lockType:"none",canEditVersionedData:!0,canCreateVersion:!0,featureService:r,versionService:d,layers:new s(c),tables:new s(v)});return d&&await this._updateVersionInfo(l),this.items.push(l),this.tablesAndLayersLookup.set(n,l),n.isTable?l.tables.push(n):l.layers.push(n),l}get _allLayersAndTables(){return[...this.view.map?.allLayers??[],...this.view.map?.allTables??[],...this.additionalLayers]}_detectNewLayersAndTables(){const e=new Set(this._allLayersAndTables),i=[];for(const n of e)"feature"!==n.type&&"subtype-group"!==n.type||this._processed.has(n)||i.push(n);for(const i of this._processed)if(!e.has(i)&&(_.isSubtypeGroupLayer(i)||_.isFeatureLayer(i))){const e=this.tablesAndLayersLookup.get(i);if(!e)continue;this.tablesAndLayersLookup.delete(i),i.isTable?e.tables.remove(i):e.layers.remove(i),0===e.layersAndTables.length&&this._removeFeatureService(e)}return this._processed=e,i}},n.__decorate([g.property({constructOnly:!0})],i.Services.prototype,"view",void 0),n.__decorate([g.property()],i.Services.prototype,"items",void 0),n.__decorate([g.property()],i.Services.prototype,"tablesAndLayersLookup",void 0),n.__decorate([g.property()],i.Services.prototype,"additionalLayers",void 0),n.__decorate([g.property()],i.Services.prototype,"updating",null),n.__decorate([g.property()],i.Services.prototype,"_allLayersAndTables",null),i.Services=n.__decorate([y.subclass("esri.undoredo.support.Services")],i.Services),i.getServices=function(e){return c.getOrCreateMapValue(U,e,()=>{const n=new i.Services({view:e});return e.addHandles({remove(){U.delete(e),n.destroy()}}),n.load().catch(e=>{d.getLogger("esri.views.Services").error("Failed to load service metadata",e)}),n})},Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});