// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../core/ObjectStack","../../core/libs/gl-matrix-2/math/mat4","../../chunks/vec32","../../core/libs/gl-matrix-2/factories/vec3f64","../../chunks/vec42","../../core/libs/gl-matrix-2/factories/vec4f64","./clipRay","./plane","./vectorStacks"],function(e,t,r,n,c,o,i,a,s,f){"use strict";function u(){return[c.create(),c.create(),c.create(),c.create(),c.create(),c.create(),c.create(),c.create()]}function l(e,t){s.fromPoints(t[4],t[0],t[3],e[0]),s.fromPoints(t[1],t[5],t[6],e[1]),s.fromPoints(t[4],t[5],t[1],e[2]),s.fromPoints(t[3],t[2],t[6],e[3]),s.fromPoints(t[0],t[1],t[2],e[4]),s.fromPoints(t[5],t[4],t[7],e[5])}function m(e,t){for(let r=0;r<p;r++)if(!s.clip(e[r],t))return!1;return!0}const p=6,g=[i.fromValues(-1,-1,-1,1),i.fromValues(1,-1,-1,1),i.fromValues(1,1,-1,1),i.fromValues(-1,1,-1,1),i.fromValues(-1,-1,1,1),i.fromValues(1,-1,1,1),i.fromValues(1,1,1,1),i.fromValues(-1,1,1,1)],P=new t.ObjectStack(a.create),y=u();e.computePlanes=l,e.copy=function(e,t){for(let r=0;r<p;r++)s.copy(e[r],t[r]);return e},e.create=function(e){return e?[s.create(e[0]),s.create(e[1]),s.create(e[2]),s.create(e[3]),s.create(e[4]),s.create(e[5])]:[s.create(),s.create(),s.create(),s.create(),s.create(),s.create()]},e.createPoints=u,e.fromMatrix=function(e,t,c,i=y){const a=r.multiply(f.sm4d.get(),t,e);r.invert(a,a);for(let e=0;e<8;++e){const t=o.transformMat4(f.sv4d.get(),g[e],a);n.set(i[e],t[0]/t[3],t[1]/t[3],t[2]/t[3])}l(c,i)},e.intersectClipRay=function(e,t){for(let r=0;r<p;r++){const n=e[r];if(!s.clipInfinite(n,t))return!1}return!0},e.intersectsLineSegment=function(e,t,r){return m(e,a.fromLineSegmentAndDirection(t,r,P.get()))},e.intersectsPoint=function(e,t){for(let r=0;r<p;r++)if(s.signedDistance(e[r],t)>0)return!1;return!0},e.intersectsRay=function(e,t){return m(e,a.fromRay(t,P.get()))},e.intersectsSphere=function(e,t){for(let r=0;r<p;r++){const n=e[r];if(n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]>=t[3])return!1}return!0},e.numPlanes=p,e.numPoints=8,e.planePointIndices={bottom:[5,1,0,4],near:[0,1,2,3],far:[5,4,7,6],right:[1,5,6,2],left:[4,0,3,7],top:[7,3,2,6]},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});