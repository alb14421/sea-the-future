// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../colorUtils","../../../../../core/Logger","../../../../../core/MapUtils","../../../../../core/mathUtils","../../../../../core/libs/gl-matrix-2/math/quat","../../../../../core/libs/gl-matrix-2/factories/quatf64","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../MeshMaterialMetallicRoughness","../../vertexSpaceConversion","./buffer","./geometry","./imageutils","../../../../../views/3d/glTF/internal/resourceUtils","../../../../../views/webgl/enums"],function(e,t,s,r,a,i,n,o,l,c,u,h,f,d,p,m){"use strict";const g=()=>s.getLogger("esri.geometry.support.meshUtils.exporters.gltf.gltf");function x(e,t){if(null!=e)for(let s=1,r=2;s<e.length;s+=t,r+=t){const t=e[s],a=e[r];e[s]=a,e[r]=-t}}function T(e){return e**t.colorGamma}e.GLTF=class{constructor(e,t){this.options=t,this._materialMap=new Array,this._imageMap=new Map,this._textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{output:t.output,binChunkBuffer:null,promises:[]}},this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras,s=2===t.output.buffer||2===t.output.image;s&&(t.binChunkBuffer=new h.Buffer(this.gltf)),e.forEachScene(e=>{this._addScene(e)}),s&&t.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode(e=>{t.nodes||(t.nodes=[]),t.nodes.push(...this._addNodes(e))}),this.gltf.scenes.push(t)}_addNodes(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;o.exactEquals(s,l.ZEROS)||(t.translation=l.clone(s));const r=e.rotation;i.exactEquals(r,n.IDENTITY)||(t.rotation=n.clone(r));const a=e.scale;o.exactEquals(a,l.ONES)||(t.scale=l.clone(a));const c=this.gltf.nodes.length;if(this.gltf.nodes.push(t),e.mesh&&e.mesh.vertexAttributes.position){const s=this._createMeshes(e.mesh),r=[c];if(1===s.length)this._addMesh(t,s[0]);else for(const e of s){const t={};this._addMesh(t,e),r.push(this.gltf.nodes.length),this.gltf.nodes.push(t)}return r}return e.forEachNode(e=>{t.children||(t.children=[]),t.children.push(...this._addNodes(e))}),[c]}_addMesh(e,t){this.gltf.meshes??=[];const s=this.gltf.meshes.length;this.gltf.meshes.push(t),e.mesh=s}_createMeshes(e){const t=this.gltf.extras,s=2===t.output.buffer;let r;r=s?t.binChunkBuffer:new h.Buffer(this.gltf);const a=this.options.origin,i=e.vertexSpace.clone();i.origin=[a.x,a.y,a.z??0];const n=u.convertVertexSpace({vertexAttributes:e.vertexAttributes,vertexSpace:e.vertexSpace,transform:this.options?.ignoreLocalTransform?null:e.transform,spatialReference:e.spatialReference},i,{targetUnit:this.options.unitConversionDisabled?void 0:"meters"});if(!n)return[];f.smoothNormals(e,n),function({position:e,normal:t,tangent:s}){x(e,3),x(t,3),x(s,4)}(n);const{position:o,normal:l,tangent:c}=n,{uv:d,color:p}=e.vertexAttributes,g=r.addBufferView(m.DataType.FLOAT,"VEC3",34962);let b,_,M,A;l&&(b=r.addBufferView(m.DataType.FLOAT,"VEC3",34962)),d&&(_=r.addBufferView(m.DataType.FLOAT,"VEC2",34962)),c&&(M=r.addBufferView(m.DataType.FLOAT,"VEC4",34962)),p&&(A=r.addBufferView(m.DataType.FLOAT,"VEC4",34962)),g.startAccessor("POSITION"),b&&b.startAccessor("NORMAL"),_&&_.startAccessor("TEXCOORD_0"),M&&M.startAccessor("TANGENT"),A&&A.startAccessor("COLOR_0");const O=n.position.length/3;for(let e=0;e<O;++e)g.push(o[3*e]),g.push(o[3*e+1]),g.push(o[3*e+2]),b&&null!=l&&(b.push(l[3*e]),b.push(l[3*e+1]),b.push(l[3*e+2])),_&&null!=d&&(_.push(d[2*e]),_.push(d[2*e+1])),M&&null!=c&&(M.push(c[4*e]),M.push(c[4*e+1]),M.push(c[4*e+2]),M.push(c[4*e+3])),A&&null!=p&&(A.push(T(p[4*e]/255)),A.push(T(p[4*e+1]/255)),A.push(T(p[4*e+2]/255)),A.push(p[4*e+3]/255));const w=g.endAccessor(),v=this._addAccessor(g.index,w);let S,y,N,R,C;if(b){const e=b.endAccessor();S=this._addAccessor(b.index,e)}if(_){const e=_.endAccessor();y=this._addAccessor(_.index,e)}if(M){const e=M.endAccessor();N=this._addAccessor(M.index,e)}if(A){const e=A.endAccessor();R=this._addAccessor(A.index,e)}const E=[];return e.components&&e.components.length>0&&e.components[0].faces?(C=r.addBufferView(m.DataType.UNSIGNED_INT,"SCALAR",34963),this._addMeshVertexIndexed(C,e.components,E,v,S,y,N,R)):this._addMeshVertexNonIndexed(e.components,E,v,S,y,N,R),g.finalize(),b?.finalize(),_?.finalize(),M?.finalize(),C?.finalize(),A?.finalize(),s||r.finalize(),E}_addMaterial(e){if(null==e)return;const t=this._materialMap.indexOf(e);if(-1!==t)return t;this.gltf.materials||(this.gltf.materials=[]);const s={};switch(e.alphaMode){case"mask":s.alphaMode="MASK";break;case"auto":case"blend":s.alphaMode="BLEND"}s.alphaCutoff=e.alphaCutoff,e.doubleSided&&(s.doubleSided=e.doubleSided),s.pbrMetallicRoughness={};const r=e=>{const t=e.toRgba();return t[0]=T(t[0]/255),t[1]=T(t[1]/255),t[2]=T(t[2]/255),t};if(null!=e.color&&(s.pbrMetallicRoughness.baseColorFactor=r(e.color)),null!=e.colorTexture&&(s.pbrMetallicRoughness.baseColorTexture=this._createTextureInfo(e.colorTexture,e.colorTextureTransform)),null!=e.normalTexture&&(s.normalTexture=this._createTextureInfo(e.normalTexture,e.normalTextureTransform)),e instanceof c){if(null!=e.emissiveTexture&&(s.emissiveTexture=this._createTextureInfo(e.emissiveTexture,e.emissiveTextureTransform)),null!=e.emissiveColor){const t=r(e.emissiveColor);s.emissiveFactor=[t[0],t[1],t[2]]}null!=e.occlusionTexture&&(s.occlusionTexture=this._createTextureInfo(e.occlusionTexture,e.occlusionTextureTransform)),null!=e.metallicRoughnessTexture&&(s.pbrMetallicRoughness.metallicRoughnessTexture=this._createTextureInfo(e.metallicRoughnessTexture,e.metallicRoughnessTextureTransform)),s.pbrMetallicRoughness.metallicFactor=e.metallic,s.pbrMetallicRoughness.roughnessFactor=e.roughness}else s.pbrMetallicRoughness.metallicFactor=1,s.pbrMetallicRoughness.roughnessFactor=1,g().warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");const a=this.gltf.materials.length;return this.gltf.materials.push(s),this._materialMap.push(e),a}_createTextureInfo(e,t){const s={index:this._addTexture(e)};return t?(s.extensions||(s.extensions={}),s.extensions.KHR_texture_transform={scale:t.scale,offset:t.offset,rotation:a.deg2rad(t.rotation)},s):s}_addTexture(e){const t=this.gltf.textures??[];return this.gltf.textures=t,r.getOrCreateMapValue(this._textureMap,e,()=>{const s={sampler:this._addSampler(e),source:this._addImage(e)},r=t.length;return t.push(s),r})}_addImage(e){const t=this._imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{const t=e.data;s.extras=t;for(let e=0;e<this.gltf.images.length;++e)if(t===this.gltf.images[e].extras)return e;const r=this.gltf.extras;switch(r.output.image){case 2:{const e=r.binChunkBuffer.addBufferView(m.DataType.UNSIGNED_BYTE,"SCALAR");if(p.isEncodedMeshTexture(t))null!=t.data&&e.writeOutToBuffer(t.data,0);else{const a=d.imageToArrayBuffer(t,this.options.signal).then(({data:e,type:t})=>(s.mimeType=t,e));r.promises.push(e.writeAsync(a).then(()=>e.finalize()))}s.bufferView=e.index;break}case 1:if(p.isEncodedMeshTexture(t)){g().warnOnce("Image export for basis compressed textures not available.");break}s.uri=d.imageToDataURI(t);break;default:if(p.isEncodedMeshTexture(t)){g().warnOnce("Image export for basis compressed textures not available.");break}r.promises.push(d.imageToArrayBuffer(t,this.options.signal).then(({data:e,type:t})=>{s.uri=e,s.mimeType=t}))}}const r=this.gltf.images.length;return this.gltf.images.push(s),this._imageMap.set(e,r),r}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=10497,s=10497;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=33071,s=33071;break;case"mirror":t=33648,s=33648}else{switch(e.wrap.vertical){case"clamp":s=33071;break;case"mirror":s=33648}switch(e.wrap.horizontal){case"clamp":t=33071;break;case"mirror":t=33648}}const r={wrapS:t,wrapT:s};for(let e=0;e<this.gltf.samplers.length;++e)if(JSON.stringify(r)===JSON.stringify(this.gltf.samplers[e]))return e;const a=this.gltf.samplers.length;return this.gltf.samplers.push(r),a}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const r=this.gltf.accessors.length;return this.gltf.accessors.push(s),r}_addMeshVertexIndexed(e,t,s,r,a,i,n,o){const l=new Map;for(const c of t){if(e.startAccessor("INDICES"),c.faces)for(let t=0;t<c.faces.length;++t)e.push(c.faces[t]);const t=e.endAccessor(),u={attributes:{POSITION:r},indices:this._addAccessor(e.index,t),material:this._addMaterial(c.material)};a&&"flat"!==c.shading&&(u.attributes.NORMAL=a),i&&(u.attributes.TEXCOORD_0=i),n&&"flat"!==c.shading&&(u.attributes.TANGENT=n),o&&(u.attributes.COLOR_0=o);const h=l.get(c.name);if(h)h.primitives.push(u);else{const e={name:c.name,primitives:[u]};l.set(c.name,e),s.push(e)}}}_addMeshVertexNonIndexed(e,t,s,r,a,i,n){const o={primitives:[]};t.push(o);const l={attributes:{POSITION:s}};r&&(l.attributes.NORMAL=r),a&&(l.attributes.TEXCOORD_0=a),i&&(l.attributes.TANGENT=i),n&&(l.attributes.COLOR_0=n),e&&(l.material=this._addMaterial(e[0].material)),o.primitives.push(l)}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});