// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../../core/compilerUtils","../../../core/Error","../../../core/promiseUtils","../../../core/urlUtils","../../Point"],function(e,t,s,r,n,o,l){"use strict";function i(e){const t=o.removeFile(e.url);return s=>{const r=o.makeRelative(s,t,t),n=r?r.replace(/^ *\.\//,""):null;return(n?e.files.get(n):null)??s}}function a(e){return h.fromBlob(e,w(e.name,e.type))}const c=/^model\/gltf\+json$/,u=/^model\/gltf-binary$/,f=/\.gltf$/i,m=/\.glb$/i;function d({mimeType:e,source:t,name:s}){return c.test(e)||f.test(s)?{url:t.url,type:"gltf"}:u.test(e)||m.test(s)?{url:t.url,type:"glb"}:null}function p(e){const t=new Map;let s=null,n=null;for(const r of e){const{source:e,name:o}=r;s??=d(r),"ESRI3DO_NORM.glb"===o&&(n=d(r)),t.set(o,e.url),e.files.forEach((e,s)=>t.set(s,e))}const o=n??s;if(null==o)throw new r("mesh-load-external:missing-files","Missing files to load external mesh source");return new h(o.url,()=>e.forEach(({source:e})=>e.dispose()),t,o.type)}class h{constructor(e,t=()=>{},s=new Map,r){this.url=e,this.dispose=t,this.files=s,this.type=r}static fromBlob(e,t){const s=URL.createObjectURL(e);return new h(s,()=>URL.revokeObjectURL(s),void 0,t)}}function w(e,t){return c.test(t)||f.test(e)?"gltf":u.test(t)||f.test(e)?"glb":void 0}t.loadExternal=async function(t,o,c){switch(o.source.type){case"client":case"service":return async function(t,s,o){const{source:c}=s,{loadGLTFMesh:u}=await n.whenOrAbort(new Promise((t,s)=>e(["./loadGLTFMesh"],t,s)),o),f=await async function(e,t){switch(e.type){case"client":return Array.isArray(e.files)?function(e){if(!e.length)throw new r("mesh-load-external:missing-assets","There must be at least one file to load");return p(e.map(e=>({name:e.name,mimeType:e.type,source:a(e)})))}(e.files):a(e.files);case"service":return async function(e,t){if(!e.length)throw new r("mesh-load-external:missing-assets","There must be at least one file to load");const s=await n.allSettledValues(e.map(async e=>{const s=await async function(e,t){const{parts:s,assetMimeType:r,assetName:o}=e;if(1===s.length)return new h(s[0].partUrl);const l=await e.toBlob(t);return n.throwIfAborted(t),h.fromBlob(l,w(o,r))}(e);return n.throwIfAborted(t),{name:e.assetName,mimeType:e.assetMimeType,source:s}}));if(n.isAborted(t))throw s.forEach(e=>e.source.dispose()),n.createAbortError();return p(s)}(e.assets,t);default:throw new r("mesh-load-external:invalid-source","Invalid source type")}}(c,o);n.throwIfAborted(o);const m=u(new l({x:0,y:0,z:0,spatialReference:t.spatialReference}),f.url,{resolveFile:i(f),signal:o?.signal,expectedType:f.type,unitConversionDisabled:s.unitConversionDisabled});m.then(()=>f.dispose(),()=>f.dispose());const{vertexAttributes:d,components:y}=await m;t.vertexAttributes=d,t.components=y}(t,o,c);case"loadable":return o.source.load(t,c);default:s.neverReached(o.source)}},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});