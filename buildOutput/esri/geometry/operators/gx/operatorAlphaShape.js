// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/SimpleGeometryCursor","../../../chunks/Geometry","../../../chunks/Point2D","../../../chunks/MultiPathImpl"],function(t,e,i,n,s){"use strict";function o(t,e,i,o,r,h){const g=o-e;if(g<=h)return s.nthElement(t,e,i,o,r),i;const d=function(t,e,i,s,o){const r=[];!function(t,e,i){const s=Math.trunc(e/2);let o=BigInt(s);const r=BigInt(e);for(let e=0;e<i;++e)t.push(Number(o%r)),o=6364136223846793005n*o+1442695040888963407n&0x7fffffffffffffffn,o=BigInt.asUintN(64,o);n.numericSort(t);const h=n.unique(t,(t,e)=>t===e);t.length=h}(r,i-e,o);const h=[];for(let i=0,s=r.length;i<s;i++){const s=r[i];h.push(n.makePair(t[e+s],s))}const g=Math.trunc(h.length/2);return h.sort((t,e)=>s(t.first,e.first)?-1:1),e+h[g].second}(t,e,o,r,Math.min(Math.max(g>>1,3),100)),a=t[d];t[e]=n.swap(t[d],t[d]=t[e]);let c=e+1,l=!1;for(let i=e+1;i!==o;++i)r(t[i],a)&&(t[c]=n.swap(t[i],t[i]=t[c]),++c,l=!0);if(!l)for(let s=e+1;s<i;++s)r(a,t[s])||(s!==c&&(t[c]=n.swap(t[s],t[s]=t[c])),++c);return--c,t[c]=n.swap(t[e],t[e]=t[c]),c}function r(){return{p:new n.Point2D,userData:Number.NaN,edge:null}}class h{constructor(){this.info=0,this.mask=!1,this.p=null,this.a=[null,null],this.twin=null}nextFreeEdge(){return this.twin}setIndex(t){this.info=t,this.mask=!1}getIndex(){return this.info}setMask(){this.mask=!0}getMask(){return this.mask}}function g(t,e){return{first:t,second:e}}function d(t,e){t.first=e.first,t.second=e.second}function a(){return this.i1-this.i0}function c(){return{i0:Number.NaN,i1:Number.NaN,nextFreeEdgeIndex:[-1],box:[g(null,null),g(null,null)],size:a}}function l(){return{p:[new n.Point2D,new n.Point2D],points:[null,null]}}function u(){return{p:[null,null,null]}}class m{constructor(){this.m_nextFreePairEdge=g(null,null),this.m_points=[],this.m_pointZero=null,this.m_edges=[],this.m_voronoiToEdge=[],this.m_nextFreeEdge=0}clear(){this.m_nextFreePairEdge=g(null,null),this.m_points.length=0,this.m_pointZero=null,this.m_edges.length=0,this.m_voronoiToEdge.length=0,this.m_nextFreeEdge=0}reservePoints(t){i.geometryReleaseAssert(t>1)}prepare(t){{const e=r();e.p.x=Number.POSITIVE_INFINITY,e.p.y=Number.POSITIVE_INFINITY,e.userData=t,this.m_points.push(e)}}addVertex(t,e){const i=r();i.p.assign(t),i.userData=e,i.edge=null,this.m_points.push(i)}removeDuplicates(){const t=this.m_points.shift();this.m_points.sort((t,e)=>t.p.compareX(e.p));const e=n.unique(this.m_points,(t,e)=>t.p.equals(e.p)),i=e!==this.m_points.length;return this.m_points.length=e,this.m_points.unshift(t),i}boundVoronoiCells(t,e){const i=this.m_points.length;if(i<2)return!1;const s=[this.m_points[1].p.clone(),this.m_points[1].p.clone()];for(let t=2;t<i;t++){const e=this.m_points[t].p;e.x<s[0].x&&(s[0].x=e.x),s[1].x<e.x&&(s[1].x=e.x),e.y<s[0].y&&(s[0].y=e.y),s[1].y<e.y&&(s[1].y=e.y)}const o=new n.Point2D;o.x=.5*(s[0].x+s[1].x),o.y=.5*(s[0].y+s[1].y);let r=0;for(let t=1;t<i;t++){const e=this.m_points[t].p,i=n.Point2D.sqrDistanceCoords(e.x,e.y,o.x,o.y);r<i&&(r=i)}const h=Math.sqrt(r),g=Math.max(h+2*t,1.5*h);{const t=.8660254037844386,i=.5;let s=1,r=0;for(let h=0;h<12;h++){const h=new n.Point2D;h.x=o.x+g*s,h.y=o.y+g*r,this.addVertex(h,e);const d=s*i+r*t;s=s*t-r*i,r=d}}return!0}construct(){const t=c();return!!this.constructTask(t)&&(this.solveTask(t),!0)}constructTask(t){if(this.m_pointZero=this.createZeroHandle(),i.geometryReleaseAssert(void 0!==this.m_pointZero),this.m_points.length<3)return!1;const e=6*(this.m_points.length-2);this.m_edges=n.makeObjectArray(h,e);for(let t=0;t<e;t++)this.m_edges[t].setIndex(t);return t.i0=1,t.i1=this.m_points.length,t.nextFreeEdgeIndex[0]=0,!0}splitTask(t,e,i,n){const s=t,r=e,h=i,g=n;s.k=this.findMaxSide(g.i0,g.i1);let d=g.i0+g.i1>>1;d=0===s.k?o(this.m_points,g.i0,d,g.i1,(t,e)=>t.p[0]!==e.p[0]?t.p[0]<e.p[0]:t.p[1]<e.p[1],1250):o(this.m_points,g.i0,d,g.i1,(t,e)=>t.p[1]!==e.p[1]?t.p[1]<e.p[1]:t.p[0]<e.p[0],1250),r.i0=g.i0,r.i1=d,r.nextFreeEdgeIndex[0]=g.nextFreeEdgeIndex[0],g.nextFreeEdgeIndex[0]+=6*(r.i1-r.i0-1)+2,h.i0=d,h.i1=g.i1,h.nextFreeEdgeIndex[0]=g.nextFreeEdgeIndex[0],g.nextFreeEdgeIndex[0]+=6*(h.i1-h.i0-1)+2,s.pTask=g,s.pTask0=r,s.pTask1=h}solveMergeTask(t){const e=this.newPairEdgeEx(t.pTask.nextFreeEdgeIndex,!1);if(t.pTask.box[t.k]=g(t.pTask0.box[t.k].first,t.pTask1.box[t.k].second),t.pTask.box[1-t.k]=g(p(this.getPointXYFromEdge(t.pTask0.box[1-t.k].first),this.getPointXYFromEdge(t.pTask1.box[1-t.k].first),1-t.k)?t.pTask0.box[1-t.k].first:t.pTask1.box[1-t.k].first,p(this.getPointXYFromEdge(t.pTask0.box[1-t.k].second),this.getPointXYFromEdge(t.pTask1.box[1-t.k].second),1-t.k)?t.pTask1.box[1-t.k].second:t.pTask0.box[1-t.k].second),t.pTask.i0+2===t.pTask.i1){const i=t.pTask0.box[t.k].second,n=i.twin,s=t.pTask1.box[t.k].first,o=s.twin;return this.joinEdges2(n,o),this.joinEdges2(o,n),void this.join(i,s,0,1,e)}const i=[new Array(2),new Array(2)];i[0][0]=i[1][0]=g(t.pTask0.box[t.k].second,t.pTask0.box[t.k].second.twin),i[0][1]=i[1][1]=g(t.pTask1.box[t.k].first,t.pTask1.box[t.k].first.twin);const n=[!1,!1];if(t.pTask0.i0+1===t.pTask0.i1?(this.findEdgeSide(i[0],n,1,0),this.findEdgeSide(i[1],n,1,1)):(this.findEdge(i[0],n,0),this.findEdge(i[1],n,1)),n[0]||n[1]){if(n[0]){const e=this.newPairEdgeEx(t.pTask0.nextFreeEdgeIndex,!1);this.insertEdge(i[0][0].first,e.first,0),this.insertEdge(i[0][0].second,e.second,1)}if(n[1]){const e=this.newPairEdgeEx(t.pTask1.nextFreeEdgeIndex,!1);this.insertEdge(i[0][1].first,e.first,1),this.insertEdge(i[0][1].second,e.second,0)}}else this.getNextDEdge(i[0][0].first,0)!==i[0][0].first&&(i[1][0]=this.newPairEdgeEx(t.pTask0.nextFreeEdgeIndex,!1),this.insertEdge(i[0][0].first,i[1][0].first,0),this.insertEdge(i[0][0].second,i[1][0].second,1)),this.getNextDEdge(i[0][1].first,0)!==i[0][1].first&&(i[1][1]=this.newPairEdgeEx(t.pTask1.nextFreeEdgeIndex,!1),this.insertEdge(i[0][1].first,i[1][1].first,1),this.insertEdge(i[0][1].second,i[1][1].second,0));this.merge(i[1][0],i[0][0],i[0][1],i[1][1],e)}solveTask(t){const e=t;switch(e.i1-e.i0){case 1:{this.insertPoint(e.i0,e.nextFreeEdgeIndex);const t=this.m_points[e.i0].edge;e.box[0]=e.box[1]=n.makePair(t,t)}break;case 2:{const t=e.i0,i=t+1;this.insertPoint(t,e.nextFreeEdgeIndex),this.insertPoint(i,e.nextFreeEdgeIndex);const n=this.m_points[t],s=this.m_points[i],o=n.edge,r=s.edge,h=o.twin,d=r.twin;this.joinEdges2(h,d),this.joinEdges2(d,h);const a=this.newPairEdgeEx(e.nextFreeEdgeIndex,!1);this.join(o,r,0,1,a);for(let t=0;t<2;t++)e.box[t]=p(this.getPointXY(n),this.getPointXY(s),t)?g(o,r):g(r,o)}break;case 3:{const t=[e.i0,e.i0+1,e.i0+2];this.insertPoint(t[0],e.nextFreeEdgeIndex),this.insertPoint(t[1],e.nextFreeEdgeIndex),this.insertPoint(t[2],e.nextFreeEdgeIndex);const i=[this.m_points[t[0]],this.m_points[t[1]],this.m_points[t[2]]],s=this.caseFromCompare(i[0].p,i[1].p,i[2].p),o=[i[0].edge,i[1].edge,i[2].edge],r=m.c_aTableDelaunayTriangulationSolution[s],h=E(19*E(1+(7&r))),d=E(19*E(1+(r>>5)));let a=E(r<<3)>>6;const c=3&h,l=h>>6,u=3&d,f=d>>6;e.box[0]=g(o[c],o[l]),e.box[1]=g(o[u],o[f]);const p=[o[0].twin,o[1].twin,o[2].twin],P=[this.newPairEdgeEx(e.nextFreeEdgeIndex,!1),this.newPairEdgeEx(e.nextFreeEdgeIndex,!1),this.newPairEdgeEx(e.nextFreeEdgeIndex,!1)];switch(3===a&&(a=this.orientation(i[0].p,i[1].p,i[2].p)+1),a){case 0:this.joinEdges2(p[0],p[2]),this.joinEdges2(p[2],p[1]),this.joinEdges2(p[1],p[0]),this.join(o[0],o[2],0,1,P[0]),this.join(o[2],o[1],0,1,P[1]),this.join(o[1],o[0],0,1,P[2]);break;case 1:{const t=[0,1,2];t[3-(c+l)]=n.swap(t[1],t[1]=t[3-(c+l)]),this.joinEdges2(p[t[0]],p[t[1]]),this.joinEdges2(p[t[1]],p[t[2]]),this.joinEdges2(p[t[2]],p[t[0]]),this.join(o[t[0]],o[t[1]],0,1,P[0]),this.join(o[t[1]],o[t[2]],0,1,P[1]),this.join(P[1].first,p[t[2]],0,1,P[2])}break;case 2:this.joinEdges2(p[0],p[1]),this.joinEdges2(p[1],p[2]),this.joinEdges2(p[2],p[0]),this.join(o[0],o[1],0,1,P[0]),this.join(o[1],o[2],0,1,P[1]),this.join(o[2],o[0],0,1,P[2])}}break;default:{const e={k:0,pTask:null,pTask0:null,pTask1:null},i=c(),n=c();this.splitTask(e,i,n,t),this.solveTask(i),this.solveTask(n),this.solveMergeTask(e)}}}getOutsideHull(){const t=[],e=this.m_points[0].edge;let i=e;do{t.push(this.getPointFromEdge(this.getTwinEdge(i))),i=this.getNextDEdge(i,0)}while(i!==e);return t}getConvexHull(){const t=[],e=this.m_points[0].edge;let i=e;do{const e=this.getPointFromEdge(this.getTwinEdge(i));t.length<2||!this.insideLine(this.getPointXY(t.at(-2)),this.getPointXY(t.at(-1)),this.getPointXY(e))?t.push(e):t[t.length-1]=e,i=this.getNextDEdge(i,0)}while(i!==e);return 2<t.length&&this.insideLine(this.getPointXY(t[0]),this.getPointXY(t.at(-1)),this.getPointXY(t.at(-2)))&&t.pop(),2<t.length&&this.insideLine(this.getPointXY(t[1]),this.getPointXY(t[0]),this.getPointXY(t.at(-1)))&&(t[0]=t.at(-1),t.pop()),t}getVoronoiPolygon(t,e){t.length=0;const i=this.getEdgeFromPoint(e);let n=i;for(;;){const e=this.calculateCircleCenter(n);t.push(e);const s=this.getNextDEdge(n,1);if(s===i)break;n=s}}getNearestPoint(t){this.isInfinitePointFromPoint(t)&&i.throwInvalidArgumentException("Not supported for the infinite point");const e=this.getPointXY(t);let s=this.m_pointZero,o=Number.MAX_VALUE;const r=this.getEdgeFromPoint(t);let h=r;do{const t=this.getPointFromEdge(this.getTwinEdge(h));if(!this.isInfinitePointFromPoint(t)){const i=n.Point2D.sqrDistance(e,this.getPointXY(t));i<o&&(s=t,o=i)}h=this.getCounterClockwiseEdge(h)}while(h!==r);return s}addConstraint(t,e){const n=[null],s=[null];if(!this.constraintFindFirstEdge(n,s,t,e))return g(s[0],n[0]);n[0]=this.getTwinEdge(n[0]);const o=this.getPointXY(t),r=this.getPointXY(e),h=[new Array(0),new Array(0)],d=n[0];for(;;){const t=this.getClockwiseEdge(s[0]);t.getMask()&&i.throwInvalidArgumentException("add_constraint");const d=g(t,this.getTwinEdge(t));this.deleteTwinEdges(d,!0);const a=this.getCounterClockwiseEdge(this.getTwinEdge(n[0])),c=this.getTwinEdge(this.getClockwiseEdge(s[0])),l=this.getPointFromEdge(c);if(l===e){h[0].push(n[0]),n[0]=a,h[1].push(s[0]),s[0]=c;break}const u=this.orientation(o,r,this.getPointXY(l));0===u&&i.throwInvalidArgumentException("add_constraint - point on constraint"),0<u?(h[0].push(n[0]),n[0]=a):(h[1].push(s[0]),s[0]=c)}h[0].push(n[0]),h[1].push(s[0]);const a=this.newPairEdge();a.first.setMask(),a.second.setMask(),this.join(s[0],d,1,1,a),this.triangulateConstraint(h[0],1,h[0].length-1,a),h[1].reverse();const c=g(a.second,a.first);return this.triangulateConstraint(h[1],1,h[1].length-1,c),c}verify(){for(let t=0,e=this.m_edges.length;t<e;t++){const e=this.m_edges[t];if(!e.getMask()&&!this.testEdge(e))return!1}return!0}getDelaunayTriangleCount(){return this.m_points.length-2<<1}getVoronoiSegments(t=Number.MAX_VALUE){const e=[];for(let i=0,s=this.m_edges.length;i<s;i+=2){const s=g(null,null);if(s.first=this.m_edges[i],s.second=s.first.twin,this.isInfinitePointFromEdge(s.first)&&(s.second=n.swap(s.first,s.first=s.second)),this.isInfinitePointFromEdge(s.second)){const i=n.makeObjectArray(n.Point2D,3);i[0]=this.calculateCircleCenter(this.getNextDEdge(s.first,0).twin,1),i[2]=this.calculateCircleCenter(this.getNextDEdge(s.first,1),1);const o=n.makeObjectArray(n.Point2D,2);o[0].assign(i[0]),o[1].assign(i[2]),o[0].rightPerpendicularThis(),o[1].leftPerpendicularThis(),i[1]=i[0].add(o[0]).add(i[2].add(o[1])),i[1].normalize();for(const e of i)e.mulThis(t);const r=l();r.points[0]=s.first.p,r.points[1]=s.second.p;for(let t=0;t<i.length-1;t++){for(let e=0;e<2;e++)r.p[e]=i[t+e];r.p[0].equals(r.p[1])||e.push(r)}}else if(this.isInfinitePointFromEdge(this.getNextDEdge(s.first,0).twin)&&this.isInfinitePointFromEdge(this.getNextDEdge(s.first,1).twin)){const t=n.makeObjectArray(n.Point2D,3);t[0]=this.calculateCircleCenter(s.first),t[1]=this.getPointXY(this.getPointFromEdge(s.first)).add(this.getPointXY(this.getPointFromEdge(s.second))).mul(.5),t[2]=this.calculateCircleCenter(s.second);const i=l();i.points[0]=s.first.p,i.points[1]=s.second.p;for(let n=0;n<t.length-1;n++){for(let e=0;e<2;e++)i.p[e]=t[n+e];i.p[0].equals(i.p[1])||e.push(i)}}else{const t=l();t.p[0]=this.calculateCircleCenter(s.first),t.p[1]=this.calculateCircleCenter(s.second),t.points[0]=s.first.p,t.points[1]=s.second.p,t.p[0].equals(t.p[1])||e.push(t)}}return e}startDelaunayTriangles(){return-1}nextDelaunayTriangle(t,e){for(;;){if(++e[0],e[0]===this.m_edges.length)return!1;const i=this.m_edges[e[0]];if(t.p[0]=this.getPointFromEdge(i),this.isInfinitePointFromPoint(t.p[0]))continue;const n=this.getTwinEdge(i);if(t.p[1]=this.getPointFromEdge(n),this.isInfinitePointFromPoint(t.p[1]))continue;if(this.getPointXY(t.p[1]).lt(this.getPointXY(t.p[0])))continue;const s=this.getTwinEdge(this.getNextDEdge(i,1));if(t.p[2]=this.getPointFromEdge(s),!this.isInfinitePointFromPoint(t.p[2])&&!this.getPointXY(t.p[2]).lt(this.getPointXY(t.p[0])))return!0}}getPointCount(){return this.m_points.length-1}getPoint(t){return this.m_points[t+1]}getInfinitePoint(){return this.m_pointZero}isInfinitePointFromPoint(t){return t===this.m_pointZero}getPointXY(t){return t.p}getPointIndex(t){return t.userData}setPointIndex(t,e){t.userData=e}getEdgeFromPoint(t){return t.edge}isInfinitePointFromEdge(t){return t.p===this.m_pointZero}getEdgeCount(){return this.m_edges.length}getEdge(t){return this.m_edges[t]}getEdgeIndex(t){return t.getIndex()}getPointFromEdge(t){return t.p}getPointXYFromEdge(t){return t.p.p}getCounterClockwiseEdge(t){return t.a[0]}getClockwiseEdge(t){return t.a[1]}getTwinEdge(t){return t.twin}getPreviousEdge(t){return this.getTwinEdge(this.getCounterClockwiseEdge(t))}getNextEdge(t){return this.getClockwiseEdge(this.getTwinEdge(t))}getNextDEdge(t,e=1){return t.a[e]}newPairEdge(){const t=g(this.m_nextFreePairEdge.first,this.m_nextFreePairEdge.second);return this.m_nextFreePairEdge.first=this.m_nextFreePairEdge.first.nextFreeEdge(),this.m_nextFreePairEdge.second=this.m_nextFreePairEdge.second.nextFreeEdge(),t.first.twin=t.second,t.second.twin=t.first,t}newPairEdgeEx(t,e){let i;if(e&&null!==this.m_nextFreePairEdge.first)i=g(this.m_nextFreePairEdge.first,this.m_nextFreePairEdge.second),this.m_nextFreePairEdge.first=this.m_nextFreePairEdge.first.nextFreeEdge(),this.m_nextFreePairEdge.second=this.m_nextFreePairEdge.second.nextFreeEdge();else{const e=t[0]++,n=t[0]++;i=g(this.m_edges[e],this.m_edges[n])}return i.first.twin=i.second,i.second.twin=i.first,i}insertEdge(t,e,i){e.p=t.p;const n=t.a[i],s=e.a;s[i]=n,s[1-i]=t,t.a[i]=e,n.a[1-i]=e}insertPoint(t,e){const i=this.m_points[t],n=this.newPairEdgeEx(e,!1),s=n.first,o=n.second;i.edge=n.first,s.p=this.m_points[t],s.a[0]=n.first,s.a[1]=n.first,o.p=this.m_pointZero,o.a[0]=n.second,o.a[1]=n.second,null===this.m_points[0].edge&&(this.m_points[0].edge=n.second)}deleteTwinEdges(t,e){this.deleteEdge(t.first),this.deleteEdge(t.second),e&&(t.first.twin=this.m_nextFreePairEdge.first,t.second.twin=this.m_nextFreePairEdge.second,this.m_nextFreePairEdge=t)}join(t,e,i,n,s){this.insertEdge(t,s.first,i),this.insertEdge(e,s.second,n)}joinEdges2(t,e){t.a[1]=e,e.a[0]=t}checkEdge(t,e,i,n,s){for(;;){const o=g(null,null);if(o.first=this.getNextDEdge(t.first,n),o.second=o.first.twin,this.isInfinitePointFromEdge(o.second))return t;const r=this.getPointXYFromEdge(t.second),h=this.getPointXYFromEdge(o.second);if(this.inCircle(e,i,r,h)<=0)return t;if(this.deleteTwinEdges(t,s),!s){const e=this.getNextDEdge(t.second,n).twin;this.join(o.second,e,n,n,t)}t=o}}calculateCircleCenter(t,e=Number.MAX_VALUE){const i=this.getPointXYFromEdge(t),s=this.getPointXYFromEdge(t.twin),o=this.getNextDEdge(t,0);if(this.isInfinitePointFromEdge(o.twin)){const t=new n.Point2D;if(Number.isNaN(e))t.setNAN();else{const n=s.sub(i);n.leftPerpendicularThis(),t.assign(n),t.divThis(Math.max(Math.abs(t.x),Math.abs(t.y))),t.normalize(),t.mulThis(e)}return t}const r=this.getPointXYFromEdge(o.twin);return this.calculateCircleCenterFromThreePoints(i,s,r)}createZeroHandle(){return this.m_points[0]}deleteEdge(t){const e=t,i=e.p;i.edge===t&&(i.edge=e.a[0]),e.a[0].a[1]=e.a[1],e.a[1].a[0]=e.a[0]}testEdge(t){if(this.isInfinitePointFromEdge(t))return!0;const e=t.twin;if(this.isInfinitePointFromEdge(e))return!0;const i=this.getNextDEdge(t,0).twin,n=this.getNextDEdge(e,0).twin;if(this.isInfinitePointFromEdge(i)||this.isInfinitePointFromEdge(n))return!0;const s=this.getPointXYFromEdge(t),o=this.getPointXYFromEdge(e),r=this.getPointXYFromEdge(i),h=this.getPointXYFromEdge(n);return!(this.orientation(s,o,r)<=0)&&!(0<=this.orientation(s,o,h))&&this.inCircle(s,o,r,h)<=0}findMaxSide(t,e){const i=[this.m_points[t].p.clone(),this.m_points[t].p.clone()];for(t++;t!==e;t++){const e=this.m_points[t].p;e.x<i[0].x&&(i[0].x=e.x),i[1].x<e.x&&(i[1].x=e.x),e.y<i[0].y&&(i[0].y=e.y),i[1].y<e.y&&(i[1].y=e.y)}return i[1].x-i[0].x<i[1].y-i[0].y?1:0}findEdge(t,e,i){let n=!1,s=0;for(;;){const o=g(null,null);if(o.second=this.getNextDEdge(t[s].second,i^s),o.first=o.second.twin,0===i&&this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(o.first))<0||1===i&&0<this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(o.first)))t[s]=o,e[s]=!0,n=!1;else{if(n)return;s^=1,n=!0}}}findEdgeSide(t,e,i,n){for(;;){const s=g(null,null);if(s.second=this.getNextDEdge(t[i].second,n^i),s.first=s.second.twin,!(0===n&&this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(s.first))<0||1===n&&0<this.orientation(this.getPointXYFromEdge(t[0].first),this.getPointXYFromEdge(t[1].first),this.getPointXYFromEdge(s.first))))return;t[i]=s,e[i]=!0}}merge(t,e,i,n,s){const o={...t},r={...n},h={...s};let a={...e},c={...i};const l=a.second,u=c.second;for(;;){if(this.join(a.first,c.first,0,1,h),a.first=this.getNextDEdge(h.first,0),c.first=this.getNextDEdge(h.second,1),a.first===o.first&&c.first===r.first){this.joinEdges2(l,u),this.joinEdges2(r.second,o.second);break}a.second=a.first.twin,c.second=c.first.twin;const t=this.getPointXYFromEdge(h.first),e=this.getPointXYFromEdge(h.second);if(a.first===o.first){let i=g(null,null);i.first=this.getNextDEdge(c.first,1),i.second=i.first.twin,i=this.checkEdge(i,t,e,1,!1),d(a,h),d(h,c),c=g(i.second,i.first)}else if(c.first===r.first){let i=g(null,null);i.first=this.getNextDEdge(a.first,0),i.second=i.first.twin,i=this.checkEdge(i,t,e,0,!1),c=g(h.second,h.first),d(h,a),a=g(i.second,i.first)}else{let i=g(null,null);i.first=this.getNextDEdge(a.first,0),i.second=i.first.twin,i=this.checkEdge(i,t,e,0,!1);let n=g(null,null);n.first=this.getNextDEdge(c.first,1),n.second=n.first.twin,n=this.checkEdge(n,t,e,1,!1);const s=this.getPointXYFromEdge(i.second),o=this.getPointXYFromEdge(n.second);let r=this.inCircle(t,e,s,o);0===r&&(r=this.orientation(t,e,o)),0<r?(d(a,h),d(h,c),c=g(n.second,n.first)):(c=g(h.second,h.first),d(h,a),a=g(i.second,i.first))}this.deleteTwinEdges(h,!1)}}findEdgeClockwise(t,e,i,n,s,o){for(t[0]=n;;){e[0]=t[0],++e[0]===i.length&&(e[0]=0);const n=this.orientation(s,o,this.getPointXYFromEdge(i[e[0]]));if(n<=0)return n<0;t[0]=e[0]}}findEdgeCounterClockwise(t,e,i,n,s,o){for(e[0]=n;;){t[0]=0!==e[0]?e[0]:i.length,t[0]--;const n=this.orientation(s,o,this.getPointXYFromEdge(i[t[0]]));if(0<=n)return 0<n;e[0]=t[0]}}constraintFindFirstEdge(t,e,n,o){const r=[];{const i=this.getEdgeFromPoint(n);let s=i;do{const i=this.getTwinEdge(s);if(this.getPointFromEdge(i)===o)return t[0]=i,e[0]=s,t[0].setMask(),e[0].setMask(),!1;r.push(i),s=this.getClockwiseEdge(s)}while(s!==i)}r.length<3&&i.throwInvalidArgumentException("add_constraint");let h=-1;for(let t=0,e=r.length;t<e;t++)this.isInfinitePointFromEdge(r[t])&&(-1!==h&&i.throwInvalidArgumentException("add_constraint"),h=t);const g=this.getPointXY(n),d=this.getPointXY(o);let a,c;if(-1!==h)for(s.rotate(r,0,h+1,r.length),r.pop(),0===this.orientation(g,d,this.getPointXYFromEdge(r[0]))&&i.throwInvalidArgumentException("add_constraint - point on constraint"),0===this.orientation(g,d,this.getPointXYFromEdge(r.at(-1)))&&i.throwInvalidArgumentException("add_constraint - point on constraint"),a=0,c=r.length-1;a+1!==c;){const t=a+c>>1,e=this.orientation(g,d,this.getPointXYFromEdge(r[t]));0===e&&i.throwInvalidArgumentException("add_constraint - point on constraint"),0<e?a=t:c=t}else{let t=0,e=this.orientation(g,d,this.getPointXYFromEdge(r[t]));if(0!==e)if(0<e){const e=[0],n=[0];this.findEdgeClockwise(e,n,r,t,g,d)||i.throwInvalidArgumentException("add_constraint"),a=e[0],c=n[0]}else{const e=[0],n=[0];this.findEdgeCounterClockwise(e,n,r,t,g,d)||i.throwInvalidArgumentException("add_constraint"),a=e[0],c=n[0]}else{t++,e=this.orientation(g,d,this.getPointXYFromEdge(r[t])),e<=0&&i.throwInvalidArgumentException("add_constraint");const n=[0],s=[0];this.findEdgeClockwise(n,s,r,t,g,d)||i.throwInvalidArgumentException("add_constraint"),a=n[0],c=s[0]}}return t[0]=r[a],e[0]=r[c],!0}triangulateConstraint(t,e,i,n){if(e===i)return;let s=i;for(let o=e;o!==i;++o)this.inCircle(this.getPointXYFromEdge(n.first),this.getPointXYFromEdge(n.second),this.getPointXYFromEdge(t[s]),this.getPointXYFromEdge(t[o]))<0&&(s=o);if(s!==i){const e=this.newPairEdge();this.join(n.first,t[s],1,1,e),t[s]=e.second,this.triangulateConstraint(t,s+1,i,e)}if(s!==e){const i=this.newPairEdge();this.join(t[s],n.second,1,0,i),this.triangulateConstraint(t,e,s-1,i)}}insideLine(t,e,i){return 0===this.orientation(t,e,i)&&(e.x<t.x!=e.x<i.x||e.y<t.y!=e.y<i.y)}orientation(t,e,i){return n.Point2D.orientationRobust(t,e,i)}inCircle(t,e,i,s){return n.Point2D.inCircleRobust(t,e,i,s)}calculateCircleCenterFromThreePoints(t,e,i){return e.lt(t)&&(e=n.swap(t,t=e)),i.lt(e)&&(i=n.swap(e,e=i)),e.lt(t)&&(e=n.swap(t,t=e)),n.Point2D.calculateCircleCenterFromThreePoints(t,e,i)}compare(t,e){return 3*((f(t[0]<e[0])<<1)+f(t[0]>e[0]))+(f(t[1]<e[1])<<1)+f(t[1]>e[1])-1}caseFromCompare(t,e,i){return(this.compare(t,e)<<6)+(this.compare(t,i)<<3)+this.compare(e,i)}}function f(t){return t?1:0}function p(t,e,i){return t[i]!==e[i]?t[i]<e[i]:t[1-i]<e[1-i]}function E(t){return 255&t}m.c_aTableDelaunayTriangulationSolution=Uint8Array.from([41,74,0,0,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,33,33,65,0,0,0,0,0,0,0,193,0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,86,54,86,0,0,0,0,0,0,0,214,173,0,0,0,0,0,0,0,107,239,0,0,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,181,0,0,0,0,0,0,117,117,245,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,167,0,0,0,0,0,0,231,103,231,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,198,0,0,41,0,0,74,0,0,49,0,0,49,0,0,50,0,0,194,0,0,193,0,0,194,0,0,0,0,0,206,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,198,0,0,0,0,0,82,50,82,0,0,0,0,0,0,0,198,0,66,0,0,65,0,0,66,49,66,33,57,65,82,50,90,0,194,0,0,193,0,0,194,0,0,0,0,0,0,0,214,0,0,0,0,0,86,54,86,0,0,0,0,0,0,0,222,0,0,0,0,0,0,178,0,0,0,0,0,0,230,102,230,177,0,0,177,0,0,178,0,177,0,0,177,0,0,178,0,113,226,113,113,249,226,122,226,0,0,0,0,0,0,102,0,0,0,0,0,0,0,190,0,0,0,0,0,0,230,102,230,0,0,0,165,0,0,0,0,0,0,0,0,243,0,0,0,0,0,173,0,0,0,0,0,0,0,0,165,0,0,0,0,0,0,0,0,245,0,0,0,0,0,107,0,0,239,0,0,163,0,0,163,0,0,167,0,0,247,0,0,243,0,0,247,0,0,37,37,69,0,0,0,0,0,0,0,211,0,0,0,0,0,0,0,69,0,0,0,0,0,37,37,69,0,0,0,0,0,0,0,221,0,0,0,0,215,0,0,211,0,0,215,35,87,35,35,91,87,63,87,0,215,0,0,211,0,0,215,0,0,0,165,0,0,0,0,0,0,115,115,243,0,0,0,0,0,0,181,0,0,0,0,0,0,0,189,0,0,0,0,0,0,117,117,245,0,0,0,99,0,0,99,0,0,103,0,163,0,0,163,0,0,167,0,99,247,115,123,243,231,103,255]);class P{constructor(t){this.m_numberOfSets=t,this.m_elements=Array.from({length:t},(t,e)=>e),this.m_sizes=n.makePrimitiveArray(t,1)}getNumberOfSets(){return this.m_numberOfSets}connected(t,e){return this.findRoot(t)===this.findRoot(e)}connect(t,e){const i=this.findRoot(t),n=this.findRoot(e);return i!==n&&(this.m_sizes[i]<this.m_sizes[n]?(this.m_sizes[n]+=this.m_sizes[i],this.m_elements[i]=n):(this.m_sizes[i]+=this.m_sizes[n],this.m_elements[n]=i),--this.m_numberOfSets,!0)}connectRange(t,e,i){if(e!==i)for(let n=e;n<i;++n)this.connect(t[e],t[n])}size(){return this.m_elements.length}size1(t){return i.geometryReleaseAssert(0),0}findRoot(t){let e=t;if(this.m_elements[e]!==e)do{this.m_elements[e]=this.m_elements[this.m_elements[e]],e=this.m_elements[e]}while(this.m_elements[e]!==e);return e}}function x(){return n.makePair(Number.NaN,n.makePair([0,0,0],[0,0,0]))}class _ extends e.GeometryCursor{alphaShapeConstruct(t,e){const i=t.getEdgeCount(),n=new s.Polygon({vd:this.m_vertexDescription});if(!n)throw new Error("alphaShapeConstruct");for(let s=0;s<i;++s){if(2!==e[s])continue;const i=g(null,null);if(i.first=t.getEdge(s),i.second=t.getTwinEdge(i.first),1!==e[t.getEdgeIndex(i.second)])continue;t.getPointXYFromEdge(i.first),n.startPath(t.getPointXYFromEdge(i.first));let o=s,r=i.second;for(;;){for(e[o]=3,r=t.getCounterClockwiseEdge(r);1===e[t.getEdgeIndex(r)];)r=t.getCounterClockwiseEdge(r);if(r===i.first)break;n.lineTo(t.getPointXYFromEdge(r)),o=t.getEdgeIndex(r),r=t.getTwinEdge(r)}}return n}alphaShape(t,e){const i=t.getEdgeCount(),s=new Uint8Array(i);for(let o=0;o<i;++o){if(0!==s[o])continue;const i=u(),r=t.getEdge(o);i.p[0]=t.getPointFromEdge(r);const h=t.getClockwiseEdge(t.getTwinEdge(r));i.p[1]=t.getPointFromEdge(h);const g=t.getEdgeIndex(h),d=t.getClockwiseEdge(t.getTwinEdge(h));i.p[2]=t.getPointFromEdge(d);const a=t.getEdgeIndex(d);let c=1;for(let e=0;e<3;++e)if(t.isInfinitePointFromPoint(i.p[e])){c=2;break}if(1===c){const s=n.makeObjectArray(n.Point2D,3);for(let e=0;e<3;++e)s[e]=t.getPointXY(i.p[e]);const o=n.Point2D.sqrDistance(s[0],s[1]),r=n.Point2D.sqrDistance(s[1],s[2]),h=n.Point2D.sqrDistance(s[2],s[0]),g=2*s[1].sub(s[0]).crossProduct(s[2].sub(s[0]));e<o*r*h/(g*g)&&(c=2)}s[o]=s[g]=s[a]=c}return this.alphaShapeConstruct(t,s)}alphaShapeAlphaOut(t,e){const i=t.getEdgeCount(),s=new Uint8Array(i),o=[],r=new P(t.getPointCount());for(let e=0;e<i;++e){if(0!==s[e])continue;const i=u(),r=t.getEdge(e);i.p[0]=t.getPointFromEdge(r);const h=t.getClockwiseEdge(t.getTwinEdge(r));i.p[1]=t.getPointFromEdge(h);const g=t.getEdgeIndex(h),d=t.getClockwiseEdge(t.getTwinEdge(h));i.p[2]=t.getPointFromEdge(d);const a=t.getEdgeIndex(d);let c=1;for(let e=0;e<3;++e)if(t.isInfinitePointFromPoint(i.p[e])){c=2;break}if(1===c){const s=new Array(3);for(let e=0;e<3;++e)s[e]=t.getPointXY(i.p[e]);const r=n.Point2D.sqrDistance(s[0],s[1]),h=n.Point2D.sqrDistance(s[1],s[2]),d=n.Point2D.sqrDistance(s[2],s[0]),l=s[1].sub(s[0]).crossProduct(s[2].sub(s[0])),u=x();u.first=r*h*d/(l*l),u.second.first[0]=e,u.second.first[1]=g,u.second.first[2]=a,u.second.second[0]=t.getPointIndex(i.p[0]),u.second.second[1]=t.getPointIndex(i.p[1]),u.second.second[2]=t.getPointIndex(i.p[2]),o.push(u),c=2}s[e]=s[g]=s[a]=c}o.sort((t,e)=>function(t,e){if(t.first!==e.first)return t.first-e.first;let i=t.second.first,n=e.second.first;for(let t=0;t<3;++t)if(i[t]!==n[t])return i[t]-n[t];i=t.second.second,n=e.second.second;for(let t=0;t<3;++t)if(i[t]!==n[t])return i[t]-n[t];return 0}(t,e));let h=0;for(const t of o){if(1===r.getNumberOfSets()&&t.first!==h)break;s[t.second.first[0]]=s[t.second.first[1]]=s[t.second.first[2]]=1;const e=[t.second.second[0],t.second.second[1],t.second.second[2]];r.connectRange(e,0,3),h=t.first}return e&&(e[0]=.25*h),this.alphaShapeConstruct(t,s)}constructor(t,e,i,n){super(),this.m_multiPointForAttributes=null,this.m_inputGeometryCursor=null,this.m_index=-1,this.m_nDelaunayPoints=0,this.m_cDelaunay=new m,this.m_vertexDescription=null,this.m_progressTracker=n,this.m_alpha=Number.isNaN(e)||!Number.isFinite(e)||e<0?-1:e<Number.MIN_VALUE?0:e,this.m_bMerge=i,this.m_bDone=!1,this.m_inputGeometryCursor=t,this.prepareDelaunay()}prepareDelaunay(){this.m_nDelaunayPoints=0,this.m_cDelaunay.clear(),0!==this.m_alpha&&this.m_cDelaunay.prepare(n.intMax())}next(){if(this.m_bMerge){if(!this.m_bDone){const t=this.calculateAlphaShapeMerging(this.m_inputGeometryCursor,this.m_progressTracker);return this.m_bDone=!0,t}return null}if(!this.m_bDone){const t=this.m_inputGeometryCursor.next();if(null!==t)return i.throwIfCurves(t),i.throwIfMesh(t),this.m_index=this.m_inputGeometryCursor.getGeometryID(),this.calculateAlphaShape(t,this.m_progressTracker);this.m_bDone=!0}return null}tock(){return!0}getRank(){return 1}getGeometryID(){return this.m_index}calculateAlphaShapeMerging(t,e){let n;for(;n=t.next();)i.throwIfCurves(n),i.throwIfMesh(n),this.addGeometry(n);return this.buildAlphaShape()}calculateAlphaShape(t,e){return t.isEmpty()?new s.Polygon({vd:t.getDescription()}):(this.prepareDelaunay(),this.addGeometry(t),this.buildAlphaShape())}buildAlphaShape(t=null){if(t&&(t[0]=this.m_alpha),0===this.m_alpha)return this.m_vertexDescription?new s.Polygon({vd:this.m_vertexDescription}):new s.Polygon;if(this.m_cDelaunay.removeDuplicates())for(let t=0,e=this.m_cDelaunay.getPointCount();t<e;++t)this.m_cDelaunay.setPointIndex(this.m_cDelaunay.getPoint(t),t);return this.m_cDelaunay.construct()?this.m_alpha<0?this.alphaShapeAlphaOut(this.m_cDelaunay,t):this.alphaShape(this.m_cDelaunay,this.m_alpha):this.m_vertexDescription?new s.Polygon({vd:this.m_vertexDescription}):new s.Polygon}addGeometry(t){if(i.throwIfCurves(t),i.throwIfMesh(t),0===this.m_alpha)return;if(this.m_vertexDescription&&this.m_bMerge||(this.m_vertexDescription=t.getDescription(),this.m_vertexDescription.getAttributeCount()>1?this.m_multiPointForAttributes=new s.MultiPoint({vd:this.m_vertexDescription}):this.m_multiPointForAttributes=null),t.isEmpty())return;const e=t.getGeometryType();if(i.isMultiVertex(e)){const e=t,i=new n.Point2D;for(let t=0,n=e.getPointCount();t<n;t++)e.queryXY(t,i),this.m_cDelaunay.addVertex(i,this.m_nDelaunayPoints++);this.m_multiPointForAttributes&&this.m_multiPointForAttributes.addPoints(e,0,-1)}else if(e===i.GeometryType.enumPoint){const e=t,i=e.getXY();this.m_cDelaunay.addVertex(i,this.m_nDelaunayPoints++),this.m_multiPointForAttributes&&this.m_multiPointForAttributes.add(e)}else i.throwInvalidArgumentException("bad geometry type")}}const w=new class{getOperatorType(){return 10112}accelerateGeometry(t,e,i){return!1}canAccelerateGeometry(t){return!1}supportsCurves(){return!1}executeMany(t,e,i,n){return new _(t,e,i,n)}execute(t,e,i,n=null){const s=new _(null,e,!1,i);return s.addGeometry(t),s.buildAlphaShape(n)}};t.execute=function(t,e,i){return w.execute(t,e,null,i)},t.executeMany=function(t,i,n){const s=w.executeMany(new e.SimpleGeometryCursor(t),i,n,null);return Array.from(s)},t.supportsCurves=function(){return w.supportsCurves()},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});