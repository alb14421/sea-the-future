// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../chunks/Point2D","../../../chunks/Transformation2D","../../../core/mathUtils"],function(t,r,n){"use strict";const s={uniform:0,conformal:1,rigid:2,"rigid-motion":3,general:4},i=r=>r.map(r=>new t.Point2D(r.x,r.y));return class{constructor(){this.transform=new r.Transformation2D}calculateErrors(t,r){const n=t.length,s=r.length;if(n!==s)throw new Error(`The input length (${n}) is not the same as output length (${s})`);const o=[];return{rms:this.transform.calculateErrors(n,i(t),i(r),o),errorsOut:o}}flipX(t,r){return this.transform.flipX(t,r),this}flipY(t,r){return this.transform.flipY(t,r),this}initializeFromControlPoints(t,r,n,o){const e=r.length,a=n.length;if(e!==a)throw new Error(`The input length (${e}) is not the same as output length (${a})`);this.transform.initializeFromControlPoints(s[t],e,i(r),i(n),o?.transform)}isIdentity(){return this.transform.isIdentity()}rotate(r,s,i){const o=n.deg2rad(r);return null!=s&&null!=i?this.transform.rotateAngleAbout(o,new t.Point2D(s,i)):this.transform.rotateAngle(o),this}scale(t,r){return this.transform.scale(t,r),this}setIdentity(){this.transform.setIdentity()}setSwapCoordinates(){return this.transform.setSwapCoordinates(),this}shear(t,r){return this.transform.shear(t,r),this}shift(t,r){return this.transform.shiftCoords(t,r),this}}});