// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../request","../../core/Error","./loadParquetModule","../../chunks/bundle"],function(e,t,r,n,o){"use strict";function a(e,t){const n=e.spatialReference.wkid,a=t.wkid;if(!n||!a)throw new r("parquet","Unable to create ParquetFile, in and out wkid must be specified");const i=function(e){switch(e){case"esriGeometryPoint":return o.GeometryType.Point;case"esriGeometryPolygon":return o.GeometryType.Polygon;case"esriGeometryPolyline":return o.GeometryType.Polyline;case"esriGeometryMultipoint":return o.GeometryType.Multipoint;default:throw new r("parquet",`Found unexpected GeometryType: ${e}`)}}(e.geometryType),u=function(e){switch(e.encoding.type){case"wkb":return o.PrimaryGeometryField.fromWkb(e.encoding.primaryFieldName);case"location":{const{latitudeFieldName:t,longitudeFieldName:r}=e.encoding;return o.PrimaryGeometryField.fromLocation(t,r)}}}(e),l=[];if("xz"===e.displayOptimization?.mode){const t=e.displayOptimization.multiscale;for(const e of t.levels??[]){const[t,r]=e.transform.translate,[n,a]=e.transform.scale,i=new Float64Array([t,r]),u=new Float64Array([n,a]);l.push(o.MultiscaleGeometryField.new(e.level,e.column,i,u))}}return o.GeometryInfo.new(i,n,a,u,l)}e.createParquetFile=async function(e,r={}){const{ParquetFile:o}=await n.loadParquetModule(),i=(u=r.getCustomParameters,async function(e,r,n,o){const a=u?.(),i=a?{...a,debug:o}:{debug:o},{data:l}=await t(e,{responseType:"array-buffer",query:i,headers:{range:`bytes=${r}-${n}`}});return l});var u;const l=(e=>async function(r){const{data:n}=await t(r,{responseType:"native",method:"head",query:e?.()}),o=n.headers.get("Content-Length");if(null==o)throw new Error("Unable to parse content length");return parseInt(o,10)})(r.getCustomParameters),s=r.geometryInfo?a(r.geometryInfo,r.outSpatialReference??r.geometryInfo.spatialReference):null;return o.fromUrl(e,i,l,s)},e.createParquetFileFromBytes=async function(e,t={}){const{ParquetFile:r}=await n.loadParquetModule(),o=t.geometryInfo?a(t.geometryInfo,t.outSpatialReference):null;return r.fromBinary(e,o)},e.readEsriMetadata=function(e){const t=e.keyValueMetadata("esri");return null!=t?JSON.parse(t):null},e.readGeoMetadata=function(e){const t=e.keyValueMetadata("geo");return null!=t?JSON.parse(t):null},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});