// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../chunks/tslib.es6","../core/jsonMap","../core/lang","../core/Logger","../core/accessorSupport/decorators/property","../core/accessorSupport/decorators/cast","../core/accessorSupport/decorators/enumeration","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../core/accessorSupport/decorators/writer","../core/accessorSupport/ensureType","../layers/support/fieldUtils","./Renderer","./mixins/VisualVariablesMixin","./support/ClassBreakInfo","./support/commonProperties","./support/RendererLegendOptions","../support/loadArcade","../symbols/support/typeUtils"],function(e,t,s,a,r,o,l,i,n,u,c,d,p,h,f,y,m,g,b,x){"use strict";var k;const I="percent-of-total",v="field",B=new s.JSONMap({esriNormalizeByLog:"log",esriNormalizeByPercentOfTotal:I,esriNormalizeByField:v}),_=d.ensureType(y);return e.default=k=class extends(f.VisualVariablesMixin(h)){constructor(e){super(e),this._compiledValueExpression={valueExpression:null,compiledFunction:null},this.backgroundFillSymbol=null,this.classBreakInfos=null,this.defaultLabel=null,this.defaultSymbol=null,this.field=null,this.isMaxInclusive=!0,this.legendOptions=null,this.normalizationField=null,this.normalizationTotal=null,this.type="class-breaks",this.valueExpression=null,this.valueExpressionTitle=null,this._set("classBreakInfos",[])}readClassBreakInfos(e,t,s){if(!Array.isArray(e))return;let a=t.minValue;return e.map(e=>{const t=new y;return t.read(e,s),null==t.minValue&&(t.minValue=a),null==t.maxValue&&(t.maxValue=t.minValue),a=t.maxValue,t})}writeClassBreakInfos(e,t,s,a){const r=e.map(e=>e.write({},a));this._areClassBreaksConsecutive()&&r.forEach(e=>delete e.classMinValue),t[s]=r}castField(e){return null==e?e:"function"==typeof e?(r.getLogger(this).error(".field: field must be a string value"),null):d.ensureString(e)}get minValue(){return this.classBreakInfos&&this.classBreakInfos[0]&&this.classBreakInfos[0].minValue||0}get normalizationType(){let e=this._get("normalizationType");const t=!!this.normalizationField,s=null!=this.normalizationTotal;return t||s?(e=t&&v||s&&I||null,t&&s&&r.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")):e!==v&&e!==I||(e=null),e}set normalizationType(e){this._set("normalizationType",e)}addClassBreakInfo(e,t,s){let r=null;r="number"==typeof e?new y({minValue:e,maxValue:t,symbol:x.ensureType(s)}):_(a.clone(e)),this.classBreakInfos.push(r),1===this.classBreakInfos.length&&this.notifyChange("minValue")}removeClassBreakInfo(e,t){const s=this.classBreakInfos.length;for(let a=0;a<s;a++){const s=[this.classBreakInfos[a].minValue,this.classBreakInfos[a].maxValue];if(s[0]===e&&s[1]===t){this.classBreakInfos.splice(a,1);break}}}getBreakIndex(e,t){return this.valueExpression&&null==t?.arcade&&r.getLogger(this).warn(""),this.valueExpression?this._getBreakIndexForExpression(e,t):this._getBreakIndexForField(e)}async getClassBreakInfo(e,t){let s=t;this.valueExpression&&null==t?.arcade&&(s={...s,arcade:await b.loadArcade()});const a=this.getBreakIndex(e,s);return-1!==a?this.classBreakInfos[a]:null}getSymbol(e,t){if(this.valueExpression&&null==t?.arcade)return void r.getLogger(this).error("#getSymbol()","Please use getSymbolAsync if valueExpression is used");const s=this.getBreakIndex(e,t);return s>-1?this.classBreakInfos[s].symbol:this.defaultSymbol}async getSymbolAsync(e,t){let s=t;if(this.valueExpression&&null==t?.arcade){const e=await b.loadArcade(),{arcadeUtils:t}=e;t.hasGeometryOperations(this.valueExpression)&&await t.enableGeometryOperations(),s={...s,arcade:e}}const a=this.getBreakIndex(e,s);return a>-1?this.classBreakInfos[a].symbol:this.defaultSymbol}get symbols(){const e=[];return this.classBreakInfos.forEach(t=>{t.symbol&&e.push(t.symbol)}),this.defaultSymbol&&e.push(this.defaultSymbol),e}getAttributeHash(){return this.visualVariables?.reduce((e,t)=>e+t.getAttributeHash(),"")??""}getMeshHash(){const e=JSON.stringify(this.backgroundFillSymbol),t=JSON.stringify(this.defaultSymbol),s=`${this.normalizationField}.${this.normalizationType}.${this.normalizationTotal}`;return`${e}.${t}.${this.classBreakInfos.reduce((e,t)=>e+t.getMeshHash(),"")}.${s}.${this.field}.${this.valueExpression}`}get arcadeRequired(){return this.arcadeRequiredForVisualVariables||!!this.valueExpression}clone(){return new k({field:this.field,backgroundFillSymbol:this.backgroundFillSymbol?.clone(),defaultLabel:this.defaultLabel,defaultSymbol:this.defaultSymbol?.clone(),valueExpression:this.valueExpression,valueExpressionTitle:this.valueExpressionTitle,classBreakInfos:a.clone(this.classBreakInfos),isMaxInclusive:this.isMaxInclusive,normalizationField:this.normalizationField,normalizationTotal:this.normalizationTotal,normalizationType:this.normalizationType,visualVariables:a.clone(this.visualVariables),legendOptions:a.clone(this.legendOptions),authoringInfo:a.clone(this.authoringInfo)})}async collectRequiredFields(e,t){const s=[this.collectVVRequiredFields(e,t),this.collectSymbolFields(e,t)];await Promise.all(s)}async collectSymbolFields(e,t){const s=[...this.symbols.map(s=>s.collectRequiredFields(e,t)),p.collectArcadeFieldNames(e,t,this.valueExpression)];p.collectField(e,t,this.field),p.collectField(e,t,this.normalizationField),await Promise.all(s)}_getBreakIndexForExpression(e,t){const{viewingMode:s,scale:a,spatialReference:r,arcade:o,timeZone:l}=t??{},{valueExpression:i}=this;let n=this._compiledValueExpression.valueExpression===i?this._compiledValueExpression.compiledFunction:null;const u=o.arcadeUtils;if(!n){const e=u.createSyntaxTree(i);n=u.createFunction(e),this._compiledValueExpression.compiledFunction=n}this._compiledValueExpression.valueExpression=i;const c=u.executeFunction(n,u.createExecContext(e,u.getViewInfo({viewingMode:s,scale:a,spatialReference:r}),l));return this._getBreakIndexfromInfos(c)}_getBreakIndexForField(e){const t=this.field,s=e.attributes,a=this.normalizationType;let r=parseFloat(s[t]);if(a){const e=this.normalizationTotal,t=parseFloat(this.normalizationField?s[this.normalizationField]:void 0);if("log"===a)r=Math.log(r)*Math.LOG10E;else if(a!==I||null==e||isNaN(e)){if(a===v&&!isNaN(t)){if(isNaN(r)||isNaN(t))return-1;r/=t}}else r=r/e*100}return this._getBreakIndexfromInfos(r)}_getBreakIndexfromInfos(e){const t=this.isMaxInclusive;if(null!=e&&"number"==typeof e&&!isNaN(e))for(let s=0;s<this.classBreakInfos.length;s++){const a=[this.classBreakInfos[s].minValue,this.classBreakInfos[s].maxValue];if(a[0]<=e&&(t?e<=a[1]:e<a[1]))return s}return-1}_areClassBreaksConsecutive(){const e=this.classBreakInfos,t=e.length;for(let s=1;s<t;s++)if(e[s-1].maxValue!==e[s].minValue)return!1;return!0}},t.__decorate([o.property(m.rendererBackgroundFillSymbolProperty)],e.default.prototype,"backgroundFillSymbol",void 0),t.__decorate([o.property({type:[y],json:{write:{isRequired:!0}}})],e.default.prototype,"classBreakInfos",void 0),t.__decorate([n.reader("classBreakInfos")],e.default.prototype,"readClassBreakInfos",null),t.__decorate([c.writer("classBreakInfos")],e.default.prototype,"writeClassBreakInfos",null),t.__decorate([o.property({type:String,json:{write:!0}})],e.default.prototype,"defaultLabel",void 0),t.__decorate([o.property(m.rendererSymbolProperty)],e.default.prototype,"defaultSymbol",void 0),t.__decorate([o.property({type:String,json:{write:!0}})],e.default.prototype,"field",void 0),t.__decorate([l.cast("field")],e.default.prototype,"castField",null),t.__decorate([o.property({type:Boolean})],e.default.prototype,"isMaxInclusive",void 0),t.__decorate([o.property({type:g,json:{write:!0}})],e.default.prototype,"legendOptions",void 0),t.__decorate([o.property({type:Number,readOnly:!0,value:null,json:{read:!1,write:{overridePolicy(){return 0!==this.classBreakInfos.length&&this._areClassBreaksConsecutive()?{enabled:!0}:{enabled:!1}}}}})],e.default.prototype,"minValue",null),t.__decorate([o.property({type:String,json:{write:!0}})],e.default.prototype,"normalizationField",void 0),t.__decorate([o.property({type:Number,json:{write:!0}})],e.default.prototype,"normalizationTotal",void 0),t.__decorate([o.property({type:B.apiValues,value:null,json:{type:B.jsonValues,read:B.read,write:B.write}})],e.default.prototype,"normalizationType",null),t.__decorate([i.enumeration({classBreaks:"class-breaks"})],e.default.prototype,"type",void 0),t.__decorate([o.property({type:String,json:{write:!0}})],e.default.prototype,"valueExpression",void 0),t.__decorate([o.property({type:String,json:{write:!0}})],e.default.prototype,"valueExpressionTitle",void 0),e.default=k=t.__decorate([u.subclass("esri.renderers.ClassBreaksRenderer")],e.default),e.default});