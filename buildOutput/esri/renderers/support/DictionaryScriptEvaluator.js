// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../core/Error","../../core/Logger","../../core/Version","../../layers/support/FieldsIndex","../../support/ArcadeExpression"],function(e,r,i,t,n,o){"use strict";class s{static async from(e,n,c){const l=e.dictionary_version?t.Version.parse(e.dictionary_version):null,d=new Set(e.itemsNames),u={};if(n)for(const e in n)u[e]=n[e];if(e.authoringInfo.configuration)for(const r of e.authoringInfo.configuration)u.hasOwnProperty(r.name)||(u[r.name]=r.value);const p=new Set(e.authoringInfo.symbol);for(const e of Object.keys(c))p.delete(e);p.size&&i.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("missing-fields: fieldMap entries for the following symbol fields are missing",{symbolFields:p});const g=await o.createDictionaryExpression(e.expression,null,u);if(!g)throw new r("dictionary-renderer:expression-error","Unable to create dictionary renderer expression");const f=!l||!l.greaterEqual(4,0);f&&i.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("Dictionary script does not support native field types. Applying fallback",{version:l});const y=new a(c,f);return new s(f,d,g,y)}constructor(e,r,i,t){this._requiresFieldCoercionToString=e,this._itemNames=r,this._compiled=i,this._reader=t}get itemNames(){return this._itemNames}evaluate(e,r,t,n){try{return this._reader.bind(e,t,n),this._compiled.evaluate(this._reader,{$view:{scale:r}})}catch(e){i.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("arcade: dictionary script evaluation failed",{error:e})}return null}createDictionaryFieldsIndex(e){if(!this._requiresFieldCoercionToString)return new n(e);const r=e.map(e=>({...e,type:"esriFieldTypeString"}));return new n(r)}}class a extends o.ArcadeFeatureReader{constructor(e,r){super(),this._fieldMap=e,this._requiresFieldCoercionToString=r}_getField(e){const r=this._fieldMap[e]??e;return this._boundSchema.fieldsIndex.get(r)}field(e){if(!this._requiresFieldCoercionToString)return super.field(e,!1);const r=this._getField(e);return null==r||null==this._boundTarget.attributes[r.name]?"":""+this._boundTarget.attributes[r.name]}}e.DictionaryScriptEvaluator=s,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});