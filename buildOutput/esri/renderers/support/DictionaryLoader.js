// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../request","../../core/lang","../../core/LRUCache","../../geometry/support/jsonUtils","./DictionaryControlString","./DictionaryScriptEvaluator","../../support/ArcadeExpression","../../symbols/CIMSymbol","../../symbols/cim/utils"],function(e,t,r,o,i,s,a,l,n,c,y){"use strict";const m={type:"CIMSimpleLineCallout",lineSymbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",width:.5,color:[0,0,0,255]}]}};function f(e,t,r){if(!e||0===e.length)return null;const o={...e[0]};if(e.length>1){o.effects=null,o.symbolLayers=[];for(const t of e){const e=t;if(null!=e.effects)for(const t of e.symbolLayers)null==t.effects?t.effects=e.effects:t.effects.unshift(...e.effects);o.symbolLayers.unshift(...e.symbolLayers)}}return r&&(o.callout=m),{type:"CIMSymbolReference",symbol:o,primitiveOverrides:t}}t.DictionaryLoader=class{constructor(e,t,r,o){this.url=e,this.fieldMap=r,this.dictionaryInfo=o,this._symbolPartCache=new i.LRUCache(100),this._evaluator=(async()=>l.DictionaryScriptEvaluator.from(await o,t,r))()}async getSymbolAsync(e,t,r=!0){const o=await this._evaluator,i=t?.fields??n.deriveFields(e.attributes),l=o.createDictionaryFieldsIndex(i),c=o.evaluate(e,t?.scale??0,l,t?.spatialReference);if(null==c)return null;const y=s.getJsonType(e.geometry),m=a.DictionaryControlString.parse(c,o.itemNames,y),f="esriGeometryPoint"===y&&!e.geometry?.hasZ;return await this._cimPartsToCIMSymbol(e,m.partNames,m.overrides,f,t,r,l)}async getSymbolForControlString(e,t,r){const o=await this._evaluator,i=a.DictionaryControlString.parse(e,o.itemNames,t),s="esriGeometryPoint"===t&&!r,l=f(await Promise.all(i.partNames.map(e=>this._getSymbolPart(e))),i.overrides,s);return new c({data:l})}async _cimPartsToCIMSymbol(t,r,i,s,a,l,n){const m=r.map(e=>this._getSymbolPart(e,a));let u=await Promise.all(m);if(l&&this.fieldMap&&u.length>0){const{OverrideHelper:r}=await new Promise((t,r)=>e(["../../symbols/cim/OverrideHelper"],t,r));u=o.clone(u);for(const e of u)r.applyDictionaryTextOverrides(e,t,this.fieldMap,n,y.getTextCasing(e))}const p=f(u,i,s);return new c({data:p})}async _fetchSymbolPart(e,t){const o=await this.dictionaryInfo,i=(this.url+"/"+o.cimRefTemplateUrl).replaceAll(/\{itemName\}/gi,e),{data:s}=await r(i,{responseType:"json",query:{f:"json"},...t});return s}async _getSymbolPart(e,t){let r=this._symbolPartCache.get(e);return r||(r=this._fetchSymbolPart(e,t),this._symbolPartCache.put(e,r)),r}},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});