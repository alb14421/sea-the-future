// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../chunks/tslib.es6","../Color","../core/lang","../core/accessorSupport/decorators/property","../core/has","../core/Logger","../core/accessorSupport/decorators/enumeration","../core/accessorSupport/decorators/subclass","../layers/support/fieldUtils","./Renderer","./mixins/VisualVariablesMixin","./support/AttributeColorInfo","./support/DotDensityLegendOptions","../symbols/SimpleFillSymbol","../symbols/SimpleLineSymbol"],function(e,t,o,r,i,s,l,n,a,d,u,p,c,y,h,b){"use strict";var f;return e.default=f=class extends(p.VisualVariablesMixin(u)){constructor(e){super(e),this.attributes=null,this.backgroundColor=new o([0,0,0,0]),this.dotBlendingEnabled=!0,this.dotShape="square",this.dotSize=1,this.legendOptions=null,this.outline=new b,this.dotValue=null,this.referenceScale=null,this.seed=1,this.type="dot-density"}set visualVariables(e){super.visualVariables=e}calculateDotValue(e){if(null==this.referenceScale)return this.dotValue;const t=e/this.referenceScale*this.dotValue;return t<1?1:t}getSymbol(){return new h({outline:this.outline})}async getSymbolAsync(){return this.getSymbol()}get symbols(){return[this.getSymbol()]}getAttributeHash(){return this.attributes?.reduce((e,t)=>e+t.getAttributeHash(),"")??""}getMeshHash(){return JSON.stringify(this.outline)}clone(){return new f({attributes:r.clone(this.attributes),backgroundColor:r.clone(this.backgroundColor),dotBlendingEnabled:r.clone(this.dotBlendingEnabled),dotShape:r.clone(this.dotShape),dotSize:r.clone(this.dotSize),dotValue:r.clone(this.dotValue),legendOptions:r.clone(this.legendOptions),outline:r.clone(this.outline),referenceScale:r.clone(this.referenceScale),seed:r.clone(this.seed),visualVariables:r.clone(this.visualVariables),authoringInfo:r.clone(this.authoringInfo)})}getControllerHash(){const e=this.attributes?.map(e=>e.field||e.valueExpression||"");return`${e}-${this.outline&&JSON.stringify(this.outline.toJSON())||""}`}async collectRequiredFields(e,t){await this.collectVVRequiredFields(e,t);for(const o of this.attributes??[])o.valueExpression&&await d.collectArcadeFieldNames(e,t,o.valueExpression),o.field&&e.add(o.field)}},t.__decorate([i.property({type:[c],json:{write:!0}})],e.default.prototype,"attributes",void 0),t.__decorate([i.property({type:o,json:{write:!0}})],e.default.prototype,"backgroundColor",void 0),t.__decorate([i.property({type:Boolean,json:{write:!0}})],e.default.prototype,"dotBlendingEnabled",void 0),t.__decorate([i.property({type:String,json:{write:!1}})],e.default.prototype,"dotShape",void 0),t.__decorate([i.property({type:Number,json:{write:!0}})],e.default.prototype,"dotSize",void 0),t.__decorate([i.property({type:y,json:{write:!0}})],e.default.prototype,"legendOptions",void 0),t.__decorate([i.property({type:b,json:{default:null,write:!0}})],e.default.prototype,"outline",void 0),t.__decorate([i.property({type:Number,json:{write:!0}})],e.default.prototype,"dotValue",void 0),t.__decorate([i.property({type:Number,json:{write:!0}})],e.default.prototype,"referenceScale",void 0),t.__decorate([i.property({type:Number,json:{write:!0}})],e.default.prototype,"seed",void 0),t.__decorate([n.enumeration({dotDensity:"dot-density"})],e.default.prototype,"type",void 0),e.default=f=t.__decorate([a.subclass("esri.renderers.DotDensityRenderer")],e.default),e.default});