// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/tslib.es6","../../core/Accessor","../../core/arrayUtils","../../core/Collection","../../core/Error","../../core/Logger","../../core/mapCollectionUtils","../../core/maybe","../../core/reactiveUtils","../../core/unitUtils","../../core/accessorSupport/decorators/property","../../core/has","../../core/accessorSupport/decorators/subclass","../../chunks/earcut","../../core/libs/gl-matrix-2/factories/mat4f64","../../core/libs/gl-matrix-2/factories/vec3f64","../../geometry/ellipsoidUtils","../../geometry/Point","../../geometry/projectionUtils","../../geometry/operators/gx/operatorDensify","../../geometry/operators/gx/operatorSimplify","../../geometry/operators/support/apiConverter","../../geometry/projection/computeTranslationToOriginAndRotation","../../geometry/support/DoubleArray","../../geometry/support/Ellipsoid","../../geometry/support/Indices","../../chunks/vec3","./layers/graphics/ElevationContext","./layers/graphics/Graphics3DExtrudeSymbolLayer","./layers/graphics/graphicUtils","./support/renderInfoUtils/polygon","./webgl-engine/effects/focusArea/FocusAreaColorNode","./webgl-engine/effects/focusArea/FocusAreaMaskNode","./webgl-engine/effects/focusArea/FocusAreaOutlineItem"],function(e,t,o,r,s,i,n,a,c,l,u,d,p,h,g,m,y,f,w,v,A,_,x,b,R,M,F,C,N,V,U,k,I,P,S){"use strict";e.FocusAreasView=class extends o{constructor(e){super(e),this._volumes=new Map,this._elevationContext=new N.ElevationContext,this._outlineMap=new s}initialize(){this.addHandles([l.watch(()=>this.polygons,e=>this._updateVolumes(e),l.syncAndInitial)]),this._outlineMap=a.mapCollection(()=>this.areas?.areas,e=>new S.FocusAreaOutlineItem({area:e,view:this.view}),{recycleItems:!0})}destroy(){this.removeAllHandles(),this._outlineMap.destroy()}get areas(){return this.view.map?.focusAreas}get enabledAreas(){return this.areas?.areas.toArray().filter(({enabled:e})=>e)??[]}get style(){return this.areas?.style??"bright"}get polygons(){return this.enabledAreas.reduce((e,t)=>e.concat(t.geometries.toArray()),new Array)}containsGeometry(e){if(0===this.polygons.length)return!0;const t=new w(e);return this.polygons.some(e=>e.contains(t))}_updateVolumes(e){this._extrude(e),this._ensureRenderNodes()}_extrude(e){if(!this.view.renderCoordsHelper||r.equals(Array.from(this._volumes.keys()),e))return;const t=this.view.renderCoordsHelper,o=y.create(),s=1===t.viewingMode,a=m.create(),c=m.create(),l=this.view.spatialReference,d=x.fromSpatialReference(l),p=f.getReferenceEllipsoid(l).radius/M.earth.radius,h=5e5*p,w=u.convertToSpatialReferenceUnit(h,"meters",l,!0);s||t.worldUpAtPosition([0,0,0],o);const N=new Map;for(const r of e){const e=this._volumes.get(r);if(e)N.set(r,e);else try{const e=l.equals(r.spatialReference)?r:v.project(r,l),i=Math.max(e.extent.width,e.extent.height),n=u.convertFromSpatialReferenceUnit(i,l,"meters",!0),h=Math.max(5*n,2e4*p),m=s?p/10:p,y=this._reduceGeometryHeight(e,h,m),f=U.computeCentroid(y);if(null==f)continue;const M=x.fromPolygon(y),I=_.execute(M,d,!1)??M,P=A.execute(I,w,0,0),S=x.toPolygon(P,l);if(null==S)continue;b.computeTranslationToOriginAndRotation(l,[f.x,f.y,0],a,t.spatialReference),c[12]=-a[12],c[13]=-a[13],c[14]=-a[14];const j=k.geometryToRenderInfo(S,this.view.elevationProvider,t,this._elevationContext),{polygons:H,mapPositions:O,position:G}=j,D=new Array,q=new E(D,[a[12],a[13],a[14]]);for(const e of H){const t=e.count,r=g.earcut(e.mapPositions,e.holeIndices,3);if(0===r.length)continue;const i=r.length,n=6*t,a=n+i,l=R.newDoubleArray(3*n),u=F.newIndexArray(a),d=F.newIndexArray(i);V.extrudePolygon(G,O,r,e,l,null,null,null,u,d,h,o,s),C.transformMat4(l,l,c);const p=new T(l,d,u,h);D.push(p)}N.set(r,q)}catch(e){n.getLogger(this).error(new i("focusareasview:projection-failed","Failed to project focus area geometry to view spatial reference",{geometry:r,error:e}))}}this._volumes=N,this._maskRenderNode?.updateGeometries()}_ensureRenderNodes(){this.view.stage&&(0===this.volumes.size?(this._maskRenderNode=c.destroyMaybe(this._maskRenderNode),this._colorRenderNode=c.destroyMaybe(this._colorRenderNode)):(this._maskRenderNode??=new P.FocusAreaMaskNode({focusAreasView:this}),this._colorRenderNode??=new I.FocusAreaColorNode({focusAreasView:this}),this.view.stage.renderView.requestRender()))}_reduceGeometryHeight(e,t,o){const r=-12e5*o,s=Math.max(-t/2,r),i=e.rings.map(e=>e.map(e=>[e[0],e[1],s])),n=e.clone();return n.rings=i,n.hasZ=!0,n}get volumes(){return this._volumes}},t.__decorate([d.property()],e.FocusAreasView.prototype,"_volumes",void 0),t.__decorate([d.property({constructOnly:!0})],e.FocusAreasView.prototype,"view",void 0),e.FocusAreasView=t.__decorate([h.subclass("esri.views.3d.FocusAreasView")],e.FocusAreasView);class E{constructor(e,t){this.geometryVolumes=e,this.origin=t}}class T{constructor(e,t,o,r){this.positions=e,this.indicesBottom=t,this.indicesExtruded=o,this.height=r}}Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});