// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/maybe","../../../core/typedArrayUtil","../../../chunks/vec32","../../../geometry/support/aaBoundingBox","./terrainUtils","../webgl-engine/lib/Normals"],function(e,t,s,i,r,n,d){"use strict";e.PatchGeometry=class{constructor(){this.indices=null,this.indexCount=0,this.edgeIndicesStartIndex=0,this.poleIndicesStartIndex=0,this.vertexAttributes=null,this.edgeVerticesStartIndex=0,this.poleVerticesStartIndex=0,this.maxEdgeVertexCount=0,this.boundingBox=r.empty(),this.numVerticesPerSide=0,this.minu=0,this.minv=0,this.maxu=1,this.maxv=1,this.outerEdgesOffsetAndLength=[0,0,0,0,0,0,0,0]}release(){this.vertexAttributes=t.releaseMaybe(this.vertexAttributes),this.indices=null}reset(){this.indices=null,this.vertexAttributes=null,r.empty(this.boundingBox),this.numVerticesPerSide=0}getEdgeFirstVertexIndex(e){return this.outerEdgesOffsetAndLength[2*e]}getEdgeCount(e){return this.outerEdgesOffsetAndLength[2*e+1]}getEdgeVertexIndex(e,t){return this.getEdgeAttributeIndex(e,t)}getEdgeVertexPosition(e,t,s,r){this._getEdgeVertexRaw(this.getEdgeAttributeIndex(e,r),t),i.add(t,t,s)}getEdgeNormal(e,t,s){const{typedBuffer:i,typedBufferStride:r}=this.vertexAttributes.normalCompressed;d.decompressNormal(t,i,this.getEdgeAttributeIndex(e,s),r)}setEdgeNormalFromValues(e,t,s,i,r){this._setNormal(this.getEdgeAttributeIndex(e,t),s,i,r)}setEdgeVertexFromValuesRawPositionUV(e,t,s,i,r,n,d){const o=this.getEdgeAttributeIndex(e,t);this.vertexAttributes.position.setValues(o,s,i,r),this._setUV(o,n,d)}setEdgeVertexFromValuesRawPositionUVNormal(e,t,s,i,r,n,d,o,u,g){const h=this.getEdgeAttributeIndex(e,t);this.vertexAttributes.position.setValues(h,s,i,r),this._setUV(h,n,d),this._setNormal(h,o,u,g)}_getEdgeVertexRaw(e,t){this.vertexAttributes.position.getVec(e,t)}_setNormal(e,t,s,i){const{typedBuffer:r,typedBufferStride:n}=this.vertexAttributes.normalCompressed;d.compressNormal(r,e,t,s,i,n)}_setUV(e,t,i){this.vertexAttributes.uv0.setValues(e,Math.round(t*s.maxUint16),Math.round(i*s.maxUint16))}getEdgeAttributeIndex(e,t){return n.internalAssert(0<=t&&t<this.getEdgeCount(e)),this.getEdgeFirstVertexIndex(e)+t}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});