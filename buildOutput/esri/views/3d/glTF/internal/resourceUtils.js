// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/has"],function(e,t){"use strict";class n{constructor(e){this.data=e,this.type="encoded-mesh-texture",this.encoding="image/ktx2"}}e.EncodedMeshTexture=n,e.imageFromBinaryData=async function(e,r){if("image/ktx2"===r)return new n(e);const o=new Blob([e],{type:r});let a=URL.createObjectURL(o);switch(r){case"image/jpeg":a+="#.jpg";break;case"image/png":a+="#.png"}const c=new Image;if(t("esri-iPhone"))return new Promise((e,t)=>{const n=()=>{o(),e(c)},r=e=>{o(),t(e)},o=()=>{URL.revokeObjectURL(a),c.removeEventListener("load",n),c.removeEventListener("error",r)};c.addEventListener("load",n),c.addEventListener("error",r),c.src=a});try{c.src=a,await c.decode()}catch(e){console.warn("Failed decoding HTMLImageElement")}return URL.revokeObjectURL(a),c},e.isEncodedMeshTexture=function(e){return"encoded-mesh-texture"===e?.type},e.jsonFromBinaryData=async function(e){const t=new Blob([e]),n=await t.text();return JSON.parse(n)},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});