// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../chunks/tslib.es6","../../../../../../core/libs/gl-matrix-2/math/mat3","../../../../../../core/libs/gl-matrix-2/factories/mat3f64","../../../../../../chunks/vec32","../../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../../../chunks/vec42","../../../../../../core/libs/gl-matrix-2/factories/vec4f64","./ComponentTechnique","./ComponentTechniqueConfiguration","../../../core/material/MaterialBase","../../../core/shaderLibrary/ShaderOutput","../../../core/util/TwoVectorPosition","../../../materials/pbrUtils","../../../../../support/HighlightDefaults","../../../../../../webscene/support/AlphaCutoff"],function(e,t,r,o,s,a,i,l,n,c,u,h,d,p,m,v){"use strict";class g extends u.MaterialBase{constructor(e,t){super(),this.toMapSpace=t,this.baseColor=l.freeze(1,1,1,1),this.usePBR=!1,this.hasParametersFromSource=!1,this.mrrFactors=p.advancedMRRFactors,this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.normalTexture=null,this.occlusionTexture=null,this.emissionTexture=null,this.emissiveBaseColor=a.freeze(0,0,0),this.emissiveStrength=0,this.commonMaterialParameters=new x,this.componentParameters=new _,this.objectOpacity=1,this.textureAlphaCutoff=v.alphaCutoff,this.alphaDiscardMode=1,this.isIntegratedMesh=!1,this.polygonOffsetEnabled=!1,this.ellipsoidMode=1,this.hasOccludees=!1;const s=new d.TwoVectorPosition(e.position),i=o.clone(e.rotationScale);r.invert(i,i),r.transpose(i,i),this.transformNormalGlobalFromModel=i,this.transformWorldFromModelTL=s.low,this.transformWorldFromModelTH=s.high,this.transformWorldFromModelRS=e.rotationScale}dispose(){this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null}get _hasEmissiveBase(){return null!=this.emissionTexture||!s.exactEquals(this.emissiveBaseColor,a.ZEROS)}get _hasEmissiveStrength(){return 2!==this.componentParameters.emissiveOverride}get hasEmissions(){return this._hasEmissiveStrength&&(this._hasEmissiveBase||2!==this.componentParameters.emissiveSourceOverride)}get texture(){return this.baseColorTexture?.glTexture}get textureMetallicRoughness(){return this.metallicRoughnessTexture?.glTexture}get textureEmissive(){return this.emissionTexture?.glTexture}get textureOcclusion(){return this.occlusionTexture?.glTexture}get textureNormal(){return this.normalTexture?.glTexture}acquireTechnique(e,t,r,o){const s=new c.ComponentTechniqueConfiguration(e.context.spherical);s.renderOccluded=9===r.slot,s.hasVertexColors=o.hasVertexColors,s.hasNormals=o.hasNormals,s.textureCoordinateType=o.textureCoordinateType,s.hasMetallicRoughnessTexture=null!=this.metallicRoughnessTexture,s.hasOcclusionTexture=null!=this.occlusionTexture,s.hasNormalTexture=null!=this.normalTexture,s.oitPass=0===t.identifier&&null!=r.oitPass?r.oitPass:0,s.terrainDepthTest=0===t.identifier&&r.terrainDepthTest,s.cullAboveTerrain=0===t.identifier&&r.cullAboveTerrain,s.ellipsoidMode=this.ellipsoidMode,s.componentData=this.componentParameters.type,s.cullFace=this.commonMaterialParameters.cullFace,s.doubleSidedMode=this.commonMaterialParameters.doubleSided?1:0,s.hasColorTexture=null!=this.baseColorTexture;const a=this._computeWhichMaterialPass();s.blendingEnabled=1===a||2===a,s.alphaDiscardMode=this.alphaDiscardMode,s.integratedMeshMode=this.isIntegratedMesh?function(e){return null!=e.overlay?.getTexture(1)}(r)?function(e){return null!=e.overlay?.getTexture(3)}(r)?3:2:1:0,s.hasPolygonOffset=this.polygonOffsetEnabled,s.pbrMode=3===s.integratedMeshMode?4:this.usePBR?this.hasParametersFromSource?o.shadeNormals&&this.isIntegratedMesh?0:2:1:0;const i=1===this.componentParameters.emissiveSourceOverride,l=2===this.componentParameters.emissiveSourceOverride,u=null!=this.emissionTexture;if(s.emissionSource=this.hasEmissions?this._hasEmissiveBase&&1===s.pbrMode?l?u?4:2:i?u?5:7:6:i?7:6:0,s.shadeNormals=o.shadeNormals,s.normalType=s.hasNormals?1:2,s.hasSlicePlane=null!=r.slicePlane&&this.commonMaterialParameters.hasSlicePlane,s.receiveAmbientOcclusion=s.hasOccludees=s.receiveShadows=s.screenSpaceReflections=s.cloudReflections=s.hasHighlightMixTexture=!1,1===t.identifier)s.output=4,s.vertexDiscardMode=0;else if(3===t.identifier)s.output=7,s.vertexDiscardMode=0;else if(2===t.identifier)s.output=8,s.vertexDiscardMode=0,s.hasHighlightMixTexture=null!=r.highlightMixTexture;else{switch(s.vertexDiscardMode=2===a?t.transparent?2:1:0,s.hasBloom=h.isColorEmission(t.output),s.output=t.output,t.output){case 0:case 1:s.receiveAmbientOcclusion=o.applySSAO&&null!=r.ssao?.getTexture(),s.hasOccludees=r.hasOccludees,s.receiveShadows=r.shadowMap.ready,s.screenSpaceReflections=null!=r.ssr.lastFrameColor,s.cloudReflections=null!=r.clouds.data?.cubeMap?.colorTexture;break;case 9:s.olidColor=!0}s.snowCover=r.snowCover}const d=e.get(n.ComponentTechnique,s);return this._setClean(),d}submit(e,t,r){if(this.objectOpacity<=0)return;const{componentData:o,renderable:s}=r,{geometry:a}=s,i=s.meta.cameraDepthSquared;o.updateHighlights(t.highlights);const{geometryRanges:l,highlightRangesMap:n,shadowmapRanges:c}=o;switch(this._computeWhichMaterialPass()){case 0:e.opaque.submitDraw(this,a,l,i);break;case 1:e.transparent.submitDraw(this,a,l,i);break;case 2:e.opaque.submitDraw(this,a,l,i),e.transparent.submitDraw(this,a,l,i);break;case 3:e.integratedMesh.submitDraw(this,a,l,i),function(e){return null!=e.overlay?.getTexture(e.overlay?.allSourcesOccluders?1:4)}(t)&&e.occludedGround.submitDraw(this,a,l,i),function(e){return null!=e.overlay?.getTexture(2)}(t)&&e.highlightIntegratedMesh.submitDraw(this,a,l,i);break;case 4:e.transparentIntegratedMesh.submitDraw(this,a,l,i)}if(2!==this.componentParameters.castShadows){if(null!=n)for(const t of n)t[0]===m.defaultHighlightName&&e.highlightShadowMap.submitDraw(this,a,t[1],i,t[0]);null!=c&&e.defaultShadowMap.submitDraw(this,a,c,i),e.shadowMap.submitDraw(this,a,l,i)}if(null!=n)for(const t of n)e.highlight.submitDraw(this,a,t[1],i,t[0]);t.viewshedEnabled&&e.viewshedShadowMap.submitDraw(this,a,l,i)}_computeWhichMaterialPass(){if(this.isIntegratedMesh&&this.objectOpacity>=1)return 3;if(this.isIntegratedMesh&&this.objectOpacity<1)return 4;if(this.objectOpacity<1)return 1;if(0===this.componentParameters.opaqueOverride)return 0;if(this.baseColor[3]<1||0===this.alphaDiscardMode||3===this.alphaDiscardMode)return 1;switch(this.componentParameters.transparent){case 2:return 0;case 0:return 1;case 1:return 2}}}t.__decorate([u.parameter({vectorOps:i.vec4})],g.prototype,"baseColor",void 0),t.__decorate([u.parameter()],g.prototype,"usePBR",void 0),t.__decorate([u.parameter()],g.prototype,"hasParametersFromSource",void 0),t.__decorate([u.parameter({vectorOps:s.vec3})],g.prototype,"mrrFactors",void 0),t.__decorate([u.parameter({dispose:!0})],g.prototype,"baseColorTexture",void 0),t.__decorate([u.parameter({dispose:!0})],g.prototype,"metallicRoughnessTexture",void 0),t.__decorate([u.parameter({dispose:!0})],g.prototype,"normalTexture",void 0),t.__decorate([u.parameter({dispose:!0})],g.prototype,"occlusionTexture",void 0),t.__decorate([u.parameter({dispose:!0})],g.prototype,"emissionTexture",void 0),t.__decorate([u.parameter({vectorOps:s.vec3})],g.prototype,"emissiveBaseColor",void 0),t.__decorate([u.parameter()],g.prototype,"emissiveStrength",void 0),t.__decorate([u.parameterBlock()],g.prototype,"commonMaterialParameters",void 0),t.__decorate([u.parameterBlock()],g.prototype,"componentParameters",void 0),t.__decorate([u.parameter()],g.prototype,"objectOpacity",void 0),t.__decorate([u.parameter()],g.prototype,"textureAlphaCutoff",void 0),t.__decorate([u.parameter()],g.prototype,"alphaDiscardMode",void 0),t.__decorate([u.parameter()],g.prototype,"isIntegratedMesh",void 0),t.__decorate([u.parameter()],g.prototype,"polygonOffsetEnabled",void 0),t.__decorate([u.parameter()],g.prototype,"ellipsoidMode",void 0),t.__decorate([u.parameter()],g.prototype,"hasOccludees",void 0);class x extends u.MaterialParameterBlock{constructor(){super(...arguments),this.doubleSided=!1,this.cullFace=2,this.hasSlicePlane=!0}}t.__decorate([u.parameter()],x.prototype,"doubleSided",void 0),t.__decorate([u.parameter()],x.prototype,"cullFace",void 0),t.__decorate([u.parameter()],x.prototype,"hasSlicePlane",void 0);class _ extends u.MaterialParameterBlock{constructor(){super(...arguments),this.externalColor=l.fromValues(1,1,1,1),this.externalColorMixMode=1,this.emissiveStrength=0,this.emissiveSource=0,this.castShadows=0}get transparent(){return this.externalColor[3]<1?0:2}get opaqueOverride(){return 3===this.externalColorMixMode&&1===this.externalColor[3]?0:2}get emissiveOverride(){return this.emissiveStrength>0?0:2}get emissiveSourceOverride(){return 1===this.emissiveSource?0:2}get visible(){return this.externalColor[3]>0?0:2}get type(){return 0}}t.__decorate([u.parameter({vectorOps:i.vec4})],_.prototype,"externalColor",void 0),t.__decorate([u.parameter()],_.prototype,"externalColorMixMode",void 0),t.__decorate([u.parameter()],_.prototype,"emissiveStrength",void 0),t.__decorate([u.parameter()],_.prototype,"emissiveSource",void 0),t.__decorate([u.parameter()],_.prototype,"castShadows",void 0);class M extends u.MaterialParameterBlock{constructor(){super(...arguments),this.texture=null,this.transparent=2,this.opaqueOverride=2,this.emissiveOverride=2,this.emissiveSourceOverride=2,this.castShadows=2}get type(){return 1}}t.__decorate([u.parameter()],M.prototype,"texture",void 0),t.__decorate([u.parameter()],M.prototype,"transparent",void 0),t.__decorate([u.parameter()],M.prototype,"opaqueOverride",void 0),t.__decorate([u.parameter()],M.prototype,"emissiveOverride",void 0),t.__decorate([u.parameter()],M.prototype,"emissiveSourceOverride",void 0),t.__decorate([u.parameter()],M.prototype,"castShadows",void 0),e.CommonMaterialParameters=x,e.ComponentMaterial=g,e.ComponentParametersUniform=_,e.ComponentParametersVarying=M,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});