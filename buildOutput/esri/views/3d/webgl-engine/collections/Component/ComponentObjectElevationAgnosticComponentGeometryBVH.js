// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","./ElevationAgnosticBVH","../../lib/RayIntersections","../../lib/triangleIntersectionUtils"],function(t,e,i,a,n,r){"use strict";function s(t,e,i,a,r,s,l,h,o,c,g,b=null,m=0){0!==h?n.intersectRayTrianglesWithVerticalOffsetENUGlobal(t,e,i,a,r,s,l,h,o,c,g,b,m):n.intersectRayTriangles(t,e,i,a,r,s,l,c,g,b,m)}function l(){}t.ComponentObjectElevationAgnosticComponentGeometryBVH=class{constructor(t,e,n,r,s,h,o,c,g){this.componentIndex=t,this.vertexData=e,this.vertexStride=n,this.indexData=r,this.startTriangleNumber=s,this.endTriangleNumber=h,this.geometryMinZ=o,this.planetCenterZ=c,this.localMode=g,this.maxBspNodeDepth=8,this.minElementCountForBVH=20,this.minBspNodeElementCount=10,this.rayDirection=i.create(),this.ray0=i.create(),this.isVerticalRay=!1,this._triangleHitCallback=l,this.totalElevationOffset=0,this.normalRequired=!1,this._bvh=new a.ElevationAgnosticBVH(h-s,this)}getAabbs2D(){return this.localMode?r.generateTriangleAabbsLocal(this.startTriangleNumber,this.endTriangleNumber,this.indexData,this.vertexData,this.vertexStride):r.generateTriangleAabbsGlobal(this.startTriangleNumber,this.endTriangleNumber,this.indexData,this.vertexData,this.vertexStride,this.geometryMinZ,this.planetCenterZ)}get numTriangles(){return this.endTriangleNumber-this.startTriangleNumber}intersectRay(t,i,a,n,r,s){e.copy(this.ray0,t),e.sub(this.rayDirection,i,t),this.isVerticalRay=a,this.totalElevationOffset=n,this.normalRequired=s,this._triangleHitCallback=r,this._bvh.intersectRay(t,i,a),this._triangleHitCallback=l}intersectRange(t,e){const i=this._bvh.elementIndexMap;s(this.ray0,this.rayDirection,t,e,this.indexData,this.vertexData,this.vertexStride,this.totalElevationOffset,this.planetCenterZ,this.normalRequired,this._triangleHitCallback,i,this.startTriangleNumber)}getTriangleElevationOffset(t){return this.totalElevationOffset}},t.intersectTriangleRangeForComponent=s,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});