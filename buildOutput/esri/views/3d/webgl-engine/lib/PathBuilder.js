// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../geometry/support/FloatArray","../../../../geometry/support/HalfFloatArray","../../../../geometry/support/Indices","../../../../geometry/support/ShortArray","./Normals"],function(t,e,i,r,s,o){"use strict";t.PathBuilder=class{constructor(t,o,h,a,n,l={}){this.path=t,this.profile=o,this.extruder=h,this.startCap=a,this.endCap=n,this.options=l,this._extrusionVertexCount=0;const p=this.path.vertices.length-2;this.numExtrusionProfiles=h.numProfilesPerJoin()*p+2,this.numVerticesTotal=o.vertices.length*this.numExtrusionProfiles,this.startCap.vertexBufferStart=this.numVerticesTotal;const u=this.startCap.numVertices;this.numVerticesTotal+=u,this.endCap.vertexBufferStart=this.numVerticesTotal;const x=this.endCap.numVertices;this.numVerticesTotal+=x,this.pathVertexData=r.newIntArray(1*this.numVerticesTotal),this.profileRightAxes=s.newShortArray(2*this.numVerticesTotal),this.profileUpAxes=s.newShortArray(2*this.numVerticesTotal),this.profileVertexAndNormals=i.newHalfFloatArray(4*this.numVerticesTotal),this.profileAuxData=i.newHalfFloatArray(3*this.numVerticesTotal),this.positions=e.floatSubArray(t.positions,t.offset,3*t.vertices.length),this._rebuildGeometry(),this._buildTopology()}emitVertex(t,e,i,r,s){let h=4*this._extrusionVertexCount;if(this.profileVertexAndNormals[h]=i[0],this.profileVertexAndNormals[h+1]=i[1],this.profileVertexAndNormals[h+2]=r[0],this.profileVertexAndNormals[h+3]=r[1],this.pathVertexData[this._extrusionVertexCount]=t,h=3*this._extrusionVertexCount,s){const e=this.path.vertices[t],i=e.maxStretchDistance;this.profileAuxData[h]=e.rotationRight[0]*i,this.profileAuxData[h+1]=e.rotationRight[1]*i}else this.profileAuxData[h]=this.profileAuxData[h+1]=0;this.profileAuxData[h+2]=0,o.compressNormal(this.profileRightAxes,this._extrusionVertexCount,e.right[0],e.right[1],e.right[2]),o.compressNormal(this.profileUpAxes,this._extrusionVertexCount,e.up[0],e.up[1],e.up[2]),++this._extrusionVertexCount}emitCapVertex(t,e,i,r,s,h){let a=4*this._extrusionVertexCount;this.profileVertexAndNormals[a]=i[0],this.profileVertexAndNormals[a+1]=i[1],this.profileVertexAndNormals[a+2]=r[0],this.profileVertexAndNormals[a+3]=r[1],a=3*this._extrusionVertexCount,this.profileAuxData[a]=s,this.profileAuxData[a+1]=h,this.profileAuxData[a+2]=1,o.compressNormal(this.profileRightAxes,this._extrusionVertexCount,e.right[0],e.right[1],e.right[2]),o.compressNormal(this.profileUpAxes,this._extrusionVertexCount,e.up[0],e.up[1],e.up[2]),this.pathVertexData[this._extrusionVertexCount]=t,++this._extrusionVertexCount}_rebuildGeometry(){this._extrusionVertexCount=0;const{positions:t,offset:i,vertices:r}=this.path;this.positions=e.floatSubArray(t,i,3*r.length);let s=0;const o=(t,e,i,r,o)=>this.emitCapVertex(s,t,e,i,r,o),h=(t,e,i,r)=>this.emitVertex(s,t,e,i,r);for(this.startCap.rebuildConnectingProfileGeometry(r[s],this.profile,o),s=1;s<r.length-1;++s)this.extruder.extrude(r[s],this.profile,h);this.endCap.rebuildConnectingProfileGeometry(r[s],this.profile,o),s=0,this.startCap.rebuildCapGeometry(r[s],o),s=r.length-1,this.endCap.rebuildCapGeometry(r[s],o)}_buildTopology(){const t=this.profile.vertices.length,e=this.profile.numSegments,i=this.numExtrusionProfiles-1;let s=e*i*2*3;this.startCap.indexBufferStart=s,this.startCap.firstProfileVertexIndex=0,s+=this.startCap.numIndices,this.endCap.indexBufferStart=s,this.endCap.firstProfileVertexIndex=t*(this.numExtrusionProfiles-1);const o=new Array,h=new Array,a=(t,e,i)=>{o.push(t),o.push(e),o.push(i),h.push(this.pathVertexData[t]),h.push(this.pathVertexData[e]),h.push(this.pathVertexData[i])};for(let r=0;r<e;++r){const e=this.profile.indices[2*r],s=this.profile.indices[2*r+1];for(let r=0;r<i;++r){const i=r*t+e,o=(r+1)*t+s,h=r*t+s;a(i,(r+1)*t+e,o),a(i,o,h)}}this.startCap.buildTopology(this.path.vertices[0],a),this.endCap.buildTopology(this.path.vertices[this.path.vertices.length-1],a),this.vertexIndices=r.compactIndices(o),this.pathVertexIndices=r.compactIndices(h)}onPathChanged(){this._rebuildGeometry()}},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});