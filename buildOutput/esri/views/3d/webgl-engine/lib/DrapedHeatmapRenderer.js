// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/maybe","../../../../core/reactiveUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/Logger","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","./glUtil3D","./SortedRenderGeometryRenderer","../shaders/HeatmapTechnique","../shaders/HeatmapTechniqueConfiguration","../../../webgl/enums","../../../webgl/FramebufferObject","../../../webgl/Texture","../../../webgl/TextureDescriptor"],function(e,t,r,a,i,s,o,n,p,h,d,c,m,l,y,u,_){"use strict";e.DrapedHeatmapRenderer=class extends d.SortedRenderGeometryRenderer{constructor(e){super(e),this.pixelRatio=1,this._colorRampData=new Uint8ClampedArray(4),this.type="draped-heatmap",this._heatmapParameters=new c.HeatmapPassParameters,this._configuration=new m.HeatmapTechniqueConfiguration;const t=new _.TextureDescriptor;t.pixelFormat=e.pixelFormat,t.internalFormat=e.internalFormat,t.dataType=e.dataType,t.samplingMode=e.samplingMode,t.wrapMode=33071;const r=e.rendererContext.rctx;this._densityMap=new y.FramebufferObject(r,t),this._vao=h.createQuadVAO(r),this._configuration.usesHalfFloat=e.dataType!==l.PixelType.FLOAT,e.rendererContext.pluginContext.techniques.precompile(c.HeatmapTechnique,this._configuration)}initialize(){const e=this._colorRampData,t=new _.TextureDescriptor(e.length/4,1);t.wrapMode=33071,this._colorRamp=new u.Texture(this.rctx,t,e),this._heatmapParameters.densityMap=this._densityMap.colorTexture,this.addHandles(a.watch(()=>[this.colorRampData,this.minDensity,this.maxDensity,this.fieldTotal,this.pixelRatio,this.searchRadius],()=>this.rendererContext.notifyContentChanged()))}destroy(){this._densityMap=r.disposeMaybe(this._densityMap),this._vao=r.disposeMaybe(this._vao),this._colorRamp=r.disposeMaybe(this._colorRamp)}get searchRadius(){return this._heatmapParameters.searchRadius}set searchRadius(e){e!==this._heatmapParameters.searchRadius&&(this._heatmapParameters.searchRadius=e,this.notifyChange("searchRadius"))}get minDensity(){return this._heatmapParameters.minDensity}set minDensity(e){e!==this._heatmapParameters.minDensity&&(this._heatmapParameters.minDensity=e,this.notifyChange("minDensity"))}get maxDensity(){return this._heatmapParameters.maxDensity}set maxDensity(e){e!==this._heatmapParameters.maxDensity&&(this._heatmapParameters.maxDensity=e,this.notifyChange("maxDensity"))}get fieldTotal(){return this._heatmapParameters.fieldTotal}set fieldTotal(e){this._heatmapParameters.fieldTotal=e,this.notifyChange("fieldTotal")}get colorRampData(){return this._colorRampData}set colorRampData(e){const{colorRamp:t}=this._heatmapParameters;if(null!=t&&e!==this._colorRampData){const r=t.descriptor.width,a=e.length/4;a!==r&&t.resize(a,1),t.setData(e)}this._colorRampData=e}get _colorRamp(){return this._heatmapParameters.colorRamp}set _colorRamp(e){this._heatmapParameters.colorRamp=e}get hasHighlights(){return!1}get hasWater(){return!1}render(e){const t=this.sortedRenderers;if(0===t.length)return;const r=this.rctx.getBoundFramebufferObject(),a=this.rctx.getViewport(),{pixelRatio:i}=this,s=Math.ceil(a.width*i),o=Math.ceil(a.height*i);this._densityMap.resize(s,o),this.rctx.bindFramebuffer(this._densityMap),this.rctx.setViewport(0,0,s,o),this.rctx.clear(16384);let n=!1;if(t.forAll(t=>{const r=t.acquireTechniques(e);r&&(t.render(e,r),n=!0)}),this.rctx.bindFramebuffer(r),this.rctx.setViewport(a.x,a.y,a.width,a.height),!n)return;this.rctx.bindVAO(this._vao);const p=this.rendererContext.pluginContext.techniques.get(c.HeatmapTechnique,this._configuration);this.rctx.bindTechnique(p,e.bind,this._heatmapParameters),this.rctx.drawArrays(p.primitiveType,0,this._vao.vertexCount("geometry"))}},t.__decorate([i.property()],e.DrapedHeatmapRenderer.prototype,"searchRadius",null),t.__decorate([i.property()],e.DrapedHeatmapRenderer.prototype,"minDensity",null),t.__decorate([i.property()],e.DrapedHeatmapRenderer.prototype,"maxDensity",null),t.__decorate([i.property()],e.DrapedHeatmapRenderer.prototype,"fieldTotal",null),t.__decorate([i.property()],e.DrapedHeatmapRenderer.prototype,"pixelRatio",void 0),t.__decorate([i.property()],e.DrapedHeatmapRenderer.prototype,"colorRampData",null),t.__decorate([i.property({constructOnly:!0})],e.DrapedHeatmapRenderer.prototype,"dataType",void 0),t.__decorate([i.property({constructOnly:!0})],e.DrapedHeatmapRenderer.prototype,"samplingMode",void 0),t.__decorate([i.property({constructOnly:!0})],e.DrapedHeatmapRenderer.prototype,"pixelFormat",void 0),t.__decorate([i.property({constructOnly:!0})],e.DrapedHeatmapRenderer.prototype,"internalFormat",void 0),t.__decorate([i.property()],e.DrapedHeatmapRenderer.prototype,"_colorRampData",void 0),e.DrapedHeatmapRenderer=t.__decorate([p.subclass("esri.views.3d.webgl-engine.lib.DrapedHeatmapRenderer")],e.DrapedHeatmapRenderer),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});