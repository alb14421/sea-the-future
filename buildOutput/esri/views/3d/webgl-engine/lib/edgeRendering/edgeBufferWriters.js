// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../core/RandomLCG","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../Normals","./bufferLayouts"],function(t,e,o,r,n,i){"use strict";class s{updateSettings(t){this.settings=t,this._edgeHashFunction=t.reducedPrecision?m:u}write(t,e,o){g.seed=this._edgeHashFunction(o);const r=g.getIntRange(0,255),n=g.getIntRange(0,this.settings.variants-1),i=g.getFloat();var s;const a=255*(.5*(s=-(1-Math.min(i/.7,1))+Math.max(0,i-.7)/(1-.7),Math.abs(s)**1.2*Math.sign(s))+.5);t.position0.setVec(e,o.position0),t.position1.setVec(e,o.position1),t.componentIndex.set(e,o.componentIndex),t.variantOffset.set(e,r),t.variantStroke.set(e,n),t.variantExtension.set(e,a)}}const a=new Float32Array(6),c=new Uint32Array(a.buffer),f=new Uint32Array(1);function u(t){return a[0]=t.position0[0],a[1]=t.position0[1],a[2]=t.position0[2],a[3]=t.position1[0],a[4]=t.position1[1],a[5]=t.position1[2],f[0]=31*(31*(31*(31*(31*(166811+c[0])+c[1])+c[2])+c[3])+c[4])+c[5],f[0]}function m(t){const e=a;e[0]=l(t.position0[0]),e[1]=l(t.position0[1]),e[2]=l(t.position0[2]),e[3]=l(t.position1[0]),e[4]=l(t.position1[1]),e[5]=l(t.position1[2]),f[0]=5381;for(let t=0;t<c.length;t++)f[0]=31*f[0]+c[t];return f[0]}const p=1e4;function l(t){return Math.round(t*p)/p}const d=r.create(),g=new e;t.RegularEdgeBufferWriter=class{constructor(){this._commonWriter=new s}updateSettings(t){this._commonWriter.updateSettings(t)}allocate(t){return i.RegularEdgeInstancesLayout.createBuffer(t)}write(t,e,r){this._commonWriter.write(t,e,r),o.add(d,r.faceNormal0,r.faceNormal1),o.normalize(d,d);const{typedBuffer:i,typedBufferStride:s}=t.normalCompressed;n.compressNormal(i,e,d[0],d[1],d[2],s)}},t.SilhouetteEdgeBufferWriter=class{constructor(){this._commonWriter=new s}updateSettings(t){this._commonWriter.updateSettings(t)}allocate(t){return i.SilhouetteEdgeInstancesLayout.createBuffer(t)}write(t,e,o){this._commonWriter.write(t,e,o);{const{typedBuffer:r,typedBufferStride:i}=t.normalCompressed;n.compressNormal(r,e,o.faceNormal0[0],o.faceNormal0[1],o.faceNormal0[2],i)}{const{typedBuffer:r,typedBufferStride:i}=t.normal2Compressed;n.compressNormal(r,e,o.faceNormal1[0],o.faceNormal1[1],o.faceNormal1[2],i)}}},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});