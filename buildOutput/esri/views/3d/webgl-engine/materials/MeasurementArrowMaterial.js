// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../core/shaderLibrary/ShaderOutput","../lib/GLMaterial","../lib/Material","../shaders/MeasurementArrowTechnique","../shaders/MeasurementArrowTechniqueConfiguration","../../../../webscene/support/AlphaCutoff"],function(e,t,r,s,o,n,i,a,l,c){"use strict";class u extends i.Material{constructor(e){super(e,f),this._configuration=new l.MeasurementArrowTechniqueConfiguration,this.intersectDraped=void 0,this.produces=new Map([[2,e=>!this._transparent&&o.isColorOrColorEmission(e)],[8,e=>this._transparent&&o.isColorOrColorEmission(e)]])}getConfiguration(e,t){return super.getConfiguration(e,t,this._configuration),this._configuration.polygonOffsetEnabled=this.parameters.polygonOffset,this._configuration.transparent=this._transparent,this._configuration.oitPass=t.oitPass,this._configuration}get visible(){const{outlineColor:e,stripeEvenColor:t,stripeOddColor:r}=this.parameters;return e[3]>=c.alphaCutoff||t[3]>=c.alphaCutoff||r[3]>=c.alphaCutoff}intersect(){}createGLMaterial(e){return new h(e)}createBufferWriter(){return new M}get _transparent(){const{parameters:e}=this;return e.outlineColor[3]<1||e.stripeEvenColor[3]<1||e.stripeOddColor[3]<1}}class h extends n{beginSlot(e){return this.getTechnique(a.MeasurementArrowTechnique,e)}}class f extends i.MaterialParameters{constructor(){super(...arguments),this.width=32,this.outlineSize=.2,this.outlineColor=s.fromValues(1,.5,0,1),this.stripeEvenColor=s.fromValues(1,1,1,1),this.stripeOddColor=s.fromValues(1,.5,0,1),this.stripeLength=1,this.polygonOffset=!1}}const p=r.create(),g=r.create(),d=r.create(),m=r.create(),C=r.create();class M{constructor(){this.layout=a.layout}elementCount(e){return 2*(e.get("position").indices.length/2+1)}write(e,r,s,o,n,i){const{data:a,indices:l}=s.get("position"),c=s.get("normal").data,u=a.length/3;l&&l.length!==2*(u-1)&&console.warn("MeasurementArrowMaterial does not support indices");const h=p,f=g,M=d,w=m,b=C,v=n.position,O=n.normal,_=n.uv0;let y=0;for(let s=0;s<u;++s){const o=3*s;if(t.set(h,a[o],a[o+1],a[o+2]),s<u-1){const e=3*(s+1);t.set(f,a[e],a[e+1],a[e+2]),t.set(b,c[e],c[e+1],c[e+2]),t.normalize(b,b),t.subtract(M,f,h),t.normalize(M,M),t.cross(w,b,M),t.normalize(w,w)}const n=t.distance(h,f);e&&r&&(t.transformMat4(h,h,e),t.transformMat4(f,f,e),t.transformMat4(w,w,r));const l=i+2*s,p=l+1;v.setVec(l,h),v.setVec(p,h),O.setVec(l,w),O.setVec(p,w),_.set(l,0,y),_.set(l,1,-1),_.set(p,0,y),_.set(p,1,1),s<u-1&&(y+=n)}const A=n.length;for(let e=0;e<2*u;++e)A.set(i+e,y);return null}}e.MeasurementArrowMaterial=u,e.Parameters=f,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});