// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/Logger","../../../../core/mathUtils","../../../../core/screenUtils","../../../../core/libs/gl-matrix-2/math/vec2","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../../geometry/support/lineSegment","../../../../geometry/support/plane","../core/shaderLibrary/ShaderOutput","../lib/GLMaterial","../lib/Material","../lib/Util","./DefaultBufferWriter","./DefaultLayouts","../shaders/NativeLineTechnique","../shaders/NativeLineTechniqueConfiguration","../../../../webscene/support/AlphaCutoff"],function(e,t,r,i,n,a,s,o,c,l,u,d,f,g,h,m,p,y,b){"use strict";class P extends f.Material{constructor(e){super(e,L),this._configuration=new y.NativeLineTechniqueConfiguration,this.produces=new Map([[2,e=>u.isColorEmissionHighlightOrOID(e)]])}getConfiguration(e,t){return super.getConfiguration(e,t,this._configuration),this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.hasVertexColors=this.parameters.hasVertexColors,this._configuration.transparent=this.parameters.color[3]<1||this.parameters.width<1,this._configuration.hasOccludees=t.hasOccludees,this._configuration}get visible(){return this.parameters.color[3]>=b.alphaCutoff}intersect(e,r,i,s,o,u){const d=i.camera;if(!i.options.selectionMode||!e.visible||!d)return;if(!g.isTranslationMatrix(r))return void t.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial").error("intersection assumes a translation-only matrix");const f=e.attributes.get("position").data,h=w;n.copy(h,i.point),a.set(O[0],h[0]-2,h[1]+2,0),a.set(O[1],h[0]+2,h[1]+2,0),a.set(O[2],h[0]+2,h[1]-2,0),a.set(O[3],h[0]-2,h[1]-2,0);for(let e=0;e<4;e++)if(!d.unprojectFromRenderScreen(O[e],V[e]))return;l.fromPoints(d.eye,V[0],V[1],j),l.fromPoints(d.eye,V[1],V[2],E),l.fromPoints(d.eye,V[2],V[3],U),l.fromPoints(d.eye,V[3],V[0],q);let m=Number.MAX_VALUE,p=0;for(let e=0;e<f.length-5;e+=3){if(v[0]=f[e]+r[12],v[1]=f[e+1]+r[13],v[2]=f[e+2]+r[14],D[0]=f[e+3]+r[12],D[1]=f[e+4]+r[13],D[2]=f[e+5]+r[14],l.signedDistance(j,v)<0&&l.signedDistance(j,D)<0||l.signedDistance(E,v)<0&&l.signedDistance(E,D)<0||l.signedDistance(U,v)<0&&l.signedDistance(U,D)<0||l.signedDistance(q,v)<0&&l.signedDistance(q,D)<0)continue;if(d.projectToRenderScreen(v,A),d.projectToRenderScreen(D,C),A[2]<0&&C[2]>0){a.subtract(M,v,D);const e=d.frustum,t=-l.signedDistance(e[4],v)/a.dot(M,l.getNormal(e[4]));a.scale(M,M,t),a.add(v,v,M),d.projectToRenderScreen(v,A)}else if(A[2]>0&&C[2]<0){a.subtract(M,D,v);const e=d.frustum,t=-l.signedDistance(e[4],D)/a.dot(M,l.getNormal(e[4]));a.scale(M,M,t),a.add(D,D,M),d.projectToRenderScreen(D,C)}else if(A[2]<0&&C[2]<0)continue;A[2]=0,C[2]=0;const t=c.distance2(c.fromPoints(A,C,T),h);t<m&&(m=t,a.copy(N,v),a.copy(R,D),p=e/3)}const y=i.rayBegin,b=i.rayEnd;if(m<4){let e=Number.MAX_VALUE;if(c.closestLineSegmentPoint(c.fromPoints(N,R,T),c.fromPoints(y,b,_),x)){a.subtract(x,x,y);const t=a.length(x);a.scale(x,x,1/t),e=t/a.distance(y,b)}u(e,x,p)}}intersectDraped(e,t,i,n,a){if(!t.options.selectionMode)return;const s=e.attributes.get("position").data,o=e.attributes.get("size"),c=o?o.data[0]:0,l=i[0],u=i[1],d=((c+1)/2+4)*e.screenToWorldRatio;let f=Number.MAX_VALUE,g=0;for(let e=0;e<s.length-5;e+=3){const t=s[e],i=s[e+1],n=l-t,a=u-i,o=s[e+3]-t,c=s[e+4]-i,d=o*n+c*a,h=o*o+c*c,m=r.clamp(d/h,0,1),p=o*m-n,y=c*m-a,b=p*p+y*y;b<f&&(f=b,g=e/3)}f<d*d&&n(a.distance,a.normal,g)}createGLMaterial(e){return new S(e)}createBufferWriter(){const e=this.parameters.hasVertexColors?m.PositionColorLayout:m.PositionLayout;return new h.DefaultBufferWriter(e)}}class S extends d{beginSlot(e){return this.getTechnique(p.NativeLineTechnique,e)}}class L extends f.MaterialParameters{constructor(){super(...arguments),this.color=o.ONES,this.hasVertexColors=!1,this.hasSlicePlane=!1,this.width=1}}const v=s.create(),D=s.create(),M=s.create(),x=s.create(),A=i.createRenderScreenPointArray3(),C=i.createRenderScreenPointArray3(),N=s.create(),R=s.create(),T=c.create(),_=c.create(),w=s.create(),O=[i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3()],V=[s.create(),s.create(),s.create(),s.create()],j=l.create(),E=l.create(),U=l.create(),q=l.create();e.NativeLineMaterial=P,e.Parameters=L,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});