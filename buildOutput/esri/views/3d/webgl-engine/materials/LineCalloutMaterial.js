// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/string","../../../../core/libs/gl-matrix-2/factories/vec2f32","../../../../core/libs/gl-matrix-2/factories/vec4f64","../core/shaderLibrary/ShaderOutput","../lib/GLMaterial","../lib/Material","./internal/bufferWriterUtils","../shaders/LineCalloutTechnique","../shaders/LineCalloutTechniqueConfiguration","../../../../webscene/support/AlphaCutoff"],function(e,t,r,i,s,n,a,o,l,u,c){"use strict";class f extends a.Material{constructor(e,t){super(e,d),this.intersectDraped=void 0,this.produces=new Map([[15,e=>s.isColorOrColorEmission(e)],[16,e=>s.isColorOrColorEmission(e)]]),this._configuration=new u.LineCalloutTechniqueConfiguration(t),this._uniqueMaterialIdentifier=h(this.parameters)}passParameters(){return this.parameters}getConfiguration(e,t){return super.getConfiguration(e,t,this._configuration),this._configuration.occlusionTestEnabled=this.parameters.occlusionTest,this._configuration.hasVerticalOffset=null!=this.parameters.verticalOffset,this._configuration.hasScreenSizePerspective=null!=this.parameters.screenSizePerspective,this._configuration.hudDepth=16===t.slot,this._configuration.hudDepthAlignStart=!!this.parameters.hudDepthAlignStart,this._configuration.screenCenterOffsetUnitsEnabled="screen"===this.parameters.centerOffsetUnits,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.terrainDepthTest=t.terrainDepthTest,this._configuration}get visible(){return this.parameters.color[3]>=c.alphaCutoff||(this.parameters.borderColor?.[3]??0)>=c.alphaCutoff}intersect(){}createGLMaterial(e){return new g(e)}createBufferWriter(){return new m}validateParameters(e){this._uniqueMaterialIdentifier=h(e)}get uniqueMaterialIdentifier(){return this._uniqueMaterialIdentifier}}function h({renderOccluded:e,isDecoration:r,horizontalScreenOffset:i,color:s,size:n,occlusionTest:a,shaderPolygonOffset:o,hudDepthAlignStart:l,centerOffsetUnits:u,hasSlicePlane:c,screenSizePerspective:f,verticalOffset:h,borderColor:g}){return t.safeToString`${e}:${r}:${i}:[${s}]:${n}:${a}:${o}:${l}:${u}:${c}:${null!=f}:{${h?.screenLength}:${h?.minWorldLength}:${h?.maxWorldLength}}:[${g}]`}class g extends n{beginSlot(e){return this.getTechnique(l.LineCalloutTechnique,e)}}class d extends a.MaterialParameters{constructor(){super(...arguments),this.horizontalScreenOffset=0,this.color=i.fromValues(0,0,0,1),this.size=1,this.occlusionTest=!1,this.shaderPolygonOffset=1e-5,this.hudDepthAlignStart=!1,this.centerOffsetUnits="world",this.hasSlicePlane=!1}}const p=[r.fromValues(0,0),r.fromValues(1,0),r.fromValues(0,1),r.fromValues(1,0),r.fromValues(1,1),r.fromValues(0,1)];class m{constructor(){this.layout=l.layout}elementCount(e){return 6*e.get("position").indices.length}write(e,t,r,i,s,n){o.writePosition(r.get("position"),e,s.position,n,6),o.writeNormal(r.get("normal"),t,s.normal,n,6),o.writeBufferVec4(r.get("centerOffsetAndDistance"),s.centerOffsetAndDistance,n,6);for(let e=0;e<p.length;++e)s.uv0.setVec(n+e,p[e]);return null}}e.LineCalloutMaterial=f,e.Parameters=d,e.uniqueMaterialIdentifier=h,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});