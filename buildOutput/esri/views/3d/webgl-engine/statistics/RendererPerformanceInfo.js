// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/maybe","../../../../core/PerformanceSampler","../../../../core/time","../../webgl","../../../webgl/TimerPool"],function(e,t,i,r,s,a){"use strict";const o={OVERLAY:"overlay",PREPARE:"prepare",SHADOW_MAP:"shadow map",DEPTH:"depth",ACCUMULATED_SHADOWS:"accumulated shadows",APPLY_ACCUMULATED_SHADOWS:"apply accumulated shadows",OBJECT_AND_LAYER_ID_COLOR:"object/layer id color",NORMALS:"normals",SSAO:"SSAO",HIGHLIGHTS:"highlights",OPAQUE_EDGES:"opaque edges",VOXEL:"voxel",TRANSPARENT:"transparent",TRANSPARENT_EDGES:"transparent edges",HUD_VISIBILITY:"HUD visibility",TRANSPARENT_TERRAIN:"transparent terrain",TRANSPARENT_MATERIAL_WITHOUT_DEPTH:"transparent material without depth",OPAQUE_ENVIRONMENT:"opaque environment",TRANSPARENT_ENVIRONMENT:"transparent environment",OCCLUDED:"occluded",HUD:"HUD",HUD_OCCLUDED:"HUD occluded",FINISH:"finish",FOCUS_AREA_MASK:"focus area mask"},l=Object.values(s.RenderCategory).concat(Object.values(s.InternalRenderCategory)).concat(Object.values(o)),m="Total";e.PerformanceCategories=l,e.PerformanceCategory=o,e.RendererPerformanceInfo=class{constructor(e){this._rctx=e,this._startTimeStampCPU=r.Milliseconds(0),this._lastTimeStampCPU=r.Milliseconds(0),this._totalCPUTime=new i(m),this._cpuTimeSamplers=new Map(l.map(e=>[e,new i(e)])),this._enableGPUTimer=0,this._totalGPUTime=new i("GPU"),this._gpuTimeSamplers=new Map(l.map(e=>[e,new i(e)])),this._totalTime=r.Milliseconds(0),this._totalFrameCount=0}get totalCPUTimeSampler(){return this._totalCPUTime}get cpuTimeSamplers(){return Array.from(this._cpuTimeSamplers.values())}get totalGPUTimeSampler(){return this._totalGPUTime}get gpuTimeSamplers(){return Array.from(this._gpuTimeSamplers.values())}get gpuSamplingEnabled(){return null!=this._gpuTimerPool}get totalTime(){return this._totalTime}get totalFrameCount(){return this._totalFrameCount}get elapsedTime(){return r.Milliseconds(performance.now()-this._startTimeStampCPU)}enableGPUPerformanceInfo(){if(null==this._gpuTimerPool){const e=[...l,m];this._gpuTimerPool=a.createElapsedTimerPool(this._rctx,e)}if(null==this._gpuTimerPool)return{hasGPUTimerSupport:!1,remove:()=>{}};++this._enableGPUTimer;let e=!1;return{hasGPUTimerSupport:!0,remove:()=>{e||(e=!0,--this._enableGPUTimer,0===this._enableGPUTimer&&(this._gpuTimerPool=t.disposeMaybe(this._gpuTimerPool)))}}}startFrame(){this._startTimeStampCPU=this._lastTimeStampCPU=r.Milliseconds(performance.now()),this._gpuTimerPool&&(this._gpuTimeSamplers.forEach(e=>e.push(0)),this._gpuTimerPool.start())}advance(e){const t=r.Milliseconds(performance.now());if(this._cpuTimeSamplers.get(e).push(t-this._lastTimeStampCPU),this._lastTimeStampCPU=t,this._gpuTimerPool){const t=this._gpuTimerPool.stop(e);this._gpuTimeSamplers.get(e).set(t),this._gpuTimerPool.start()}}finishFrame(){if(this._gpuTimerPool){const e=this._gpuTimerPool.stop(o.FINISH);this._gpuTimeSamplers.get(o.FINISH).set(e),this._rctx.gl.flush()}const e=r.Milliseconds(performance.now()-this._startTimeStampCPU);this._totalTime=r.Milliseconds(this._totalTime+e),this._totalCPUTime.push(e),this._gpuTimerPool&&this._totalGPUTime.push(this.gpuTimeSamplers.reduce((e,t)=>e+(t.last||0),0)),++this._totalFrameCount}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});