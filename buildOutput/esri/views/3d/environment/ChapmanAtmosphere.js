// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/tslib.es6","../../../core/colorUtils","../../../core/mathUtils","../../../core/maybe","../../../core/reactiveUtils","../../../core/Logger","../../../core/has","../../../core/RandomLCG","../../../core/Error","../../../core/accessorSupport/decorators/subclass","../../../core/libs/gl-matrix-2/math/vec2","../../../chunks/vec32","../../../chunks/vec42","../../../core/libs/gl-matrix-2/factories/vec4f64","../../../geometry/support/Ellipsoid","../webgl","./atmosphereUtils","./ChapmanAtmosphereTechnique","./ChapmanAtmosphereTechniqueConfiguration","../webgl-engine/effects/OpaqueEnvironment","../webgl-engine/lib/glUtil3D","../webgl-engine/lib/textureUtils","../../../chunks/AtmosphereCompositing.glsl","../webgl-engine/shaders/AtmosphereCompositingTechnique","../../webgl/enums","../../../webscene/background/ColorBackground"],function(e,t,s,i,r,a,n,o,h,c,m,p,u,d,l,g,b,f,_,A,P,w,q,C,T,v,y){"use strict";e.ChapmanAtmosphere=class extends P.OpaqueEnvironment{constructor(){super(...arguments),this.requireGeometryDepth=!0,this._compositingPassParameters=new C.AtmosphereCompositingPassParameters,this._vao=null,this._passParameters=new _.ChapmanAtmospherePassParameters,this._configuration=new A.ChapmanAtmosphereTechniqueConfiguration}initialize(){this.techniques.precompile(_.ChapmanAtmosphereTechnique,this._configuration),this.techniques.precompile(T.AtmosphereCompositingTechnique),this._configuration.reduced=!0,this.techniques.precompile(_.ChapmanAtmosphereTechnique,this._configuration),this._configuration.reduced=!1,this.addHandles([a.watch(()=>this.view.environment.background,e=>{const t=e instanceof y?s.unitRGBAFromColor(e.color):l.ZEROS;u.set(this._passParameters.backgroundColor,t[0]*t[3],t[1]*t[3],t[2]*t[3])},a.syncAndInitial),a.watch(()=>this.view.stage?.renderer?.fullResolutionAtmosphere,e=>this._configuration.reduced=!e,a.syncAndInitial),a.watch(()=>this.view.environment.atmosphereEnabled,e=>e?this._enable():this._disable(),a.syncAndInitial)])}destroy(){this._vao=r.disposeMaybe(this._vao)}render(e){const t=e.find(({name:e})=>e===b.InternalRenderCategory.OPAQUE_ENVIRONMENT);if(!this.bindParameters.mainDepth)return t;const s=this.renderingContext;this._vao??=w.createQuadVAO(s,1);const r=t.getAttachment(v.DepthStencilAttachment);this._update();const a=this.techniques.get(_.ChapmanAtmosphereTechnique,this._configuration);if(!a.compiled)return this.requestRender(1),t;if(!this._configuration.reduced)return t.detachDepth(),s.bindFramebuffer(t.fbo),s.bindTechnique(a,this.bindParameters,this._passParameters),s.bindVAO(this._vao),s.drawArrays(v.PrimitiveType.TRIANGLE_STRIP,0,4),t.attachDepth(r),t;const n=this.techniques.get(T.AtmosphereCompositingTechnique);if(!n.compiled)return this.requestRender(1),t;const o=s.getViewport(),h=this.bindParameters.camera,c=u.length(h.eye)-g.earth.radius;let m;const p=g.earth.atmosphereHeight;if(c<p){const e=Math.min(1,Math.max(0,c/p));m=i.lerp(.2,.3,e)}else{const e=Math.min(1,Math.max(0,(c-p)/(15*p)));m=i.lerp(.3,.6,e)}const d=this.renderingContext.parameters.maxTextureSize,l=q.applyTextureResizeModulo(Math.round(m*h.fullViewport[2]),d),f=q.applyTextureResizeModulo(Math.round(m*h.fullViewport[3]),d);s.setViewport(0,0,l,f);const A=this.fboCache.acquire(l,f,"chapman",5);return s.bindFramebuffer(A.fbo),s.clearFramebuffer([0,0,0,1],!0,!0),s.bindTechnique(a,this.bindParameters,this._passParameters),s.bindVAO(this._vao),s.drawArrays(v.PrimitiveType.TRIANGLE_STRIP,0,4),s.setViewport(o.x,o.y,o.width,o.height),this._compositingPassParameters.color=A.getTexture(),t.detachDepth(),s.bindFramebuffer(t.fbo),s.bindTechnique(n,this.bindParameters,this._compositingPassParameters),s.screen.draw(),t.attachDepth(r),A.release(),t}_update(){const e=this.bindParameters.camera,t=u.squaredLength(e.eye),s=Math.sqrt(t),r=t-this._passParameters.radii[1]**2,a=i.clamp((s-this._passParameters.radii[0])/g.earth.atmosphereHeight,0,1);d.set(this._passParameters.heightParameters,s,t,r,a);const n=this.view.basemapTerrain?.getLowerBoundRadius()??0;p.set(this._passParameters.radii,n,n+g.earth.atmosphereHeight),this._passParameters.innerFadeDistance=2*Math.sqrt((2*n-f.innerAtmosphereDepth)*f.innerAtmosphereDepth),this._passParameters.altitudeFade=f.computeInnerAltitudeFade(s-n)}},e.ChapmanAtmosphere=t.__decorate([m.subclass("esri.views.3d.environment.ChapmanAtmosphere")],e.ChapmanAtmosphere),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});