// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/Logger","../../../../core/reactiveUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","../../../../core/support/UpdatingHandles","../../../../geometry/projectionUtils","../../../../geometry/projection/projectBoundingRect","../../../../geometry/support/aaBoundingRect","../support/projectionUtils","./CutFillVolumeMeasurementComputation","../../support/ElevationProvider"],function(e,t,o,i,n,r,a,s,l,u,p,d,c,m,y,g){"use strict";e.CutFillVolumeMeasurementController=class extends o{constructor(e){super(e),this._updatingHandles=new u.UpdatingHandles,this._computation=null}initialize(){this._updatingHandles.add(()=>({geometry:this.analysis.geometry,projectedGeometry:p.projectOrLoad(this.analysis.geometry,this.view.spatialReference)}),({geometry:e,projectedGeometry:t})=>{null==t.pending?this._onGeometryChange(e,t.geometry):this._updatingHandles.addPromise(t.pending)},n.syncAndInitial),this.addHandles([this._createElevationUpdateHandle(),n.watch(()=>[this.analysis.measureType,this.analysisViewData.elevationAlignedGeometry,this.analysisViewData.effectiveTargetElevation],()=>this._updateTargetGeometry()),n.watch(()=>this.analysisViewData.elevationAlignedGeometry?.extent,e=>{e?this._updateComputation(e):this._removeComputation()},n.initial)])}destroy(){this._updatingHandles.destroy()}get updating(){return this._updatingHandles.updating}_createComputation(e){const{renderCoordsHelper:t}=this.view;this._computation=new y.CutFillVolumeMeasurementComputation({extent:e,renderCoordsHelper:t})}_updateComputation(e){this._computation?this._computation.extent=e:this._createComputation(e)}_removeComputation(){this._computation=null}_createElevationUpdateHandle(){const e=t=>{const o=this.analysis.geometry;if(null==o)return;const i=p.projectOrLoad(o,this.view.spatialReference);if(null!=i.pending)return this._updatingHandles.addPromise(i.pending),void i.pending.finally(()=>e(t));const n=i.geometry;null!=n&&null!=n.extent&&(d.projectBoundingRect(t.extent,t.spatialReference,h,this.view.spatialReference),c.fromExtent(n.extent,v),c.intersects(h,v)&&this._onGeometryChange(o,n))};return this.view.elevationProvider.on("elevation-change",t=>e(t))}_onGeometryChange(e,t){const{elevationProvider:o}=this.view,{valid:n}=this.analysis;if(null==e||!n)return void(this.analysisViewData.elevationAlignedGeometry=null);if(null==t)return m.logFailedGeometryProjectionError(this.analysis,e.spatialReference,i.getLogger(this)),void(this.analysisViewData.elevationAlignedGeometry=null);const r=t.clone();!function(e,t){t.rings[0].forEach(t=>{t[2]=g.getElevationAtPoint(e,t,"ground")??0})}(o,r),this.analysisViewData.elevationAlignedGeometry=r}_updateTargetGeometry(){const{measureType:e}=this.analysis,{elevationAlignedGeometry:t,effectiveTargetElevation:o}=this.analysisViewData;if(!t)return void(this.analysisViewData.targetGeometry=null);if("stockpile"===e||!o)return void(this.analysisViewData.targetGeometry=t);const i=t.clone();i.rings[0].forEach(e=>{e[2]=o}),this.analysisViewData.targetGeometry=i}},t.__decorate([r.property({constructOnly:!0})],e.CutFillVolumeMeasurementController.prototype,"analysis",void 0),t.__decorate([r.property({constructOnly:!0})],e.CutFillVolumeMeasurementController.prototype,"analysisViewData",void 0),t.__decorate([r.property({constructOnly:!0})],e.CutFillVolumeMeasurementController.prototype,"view",void 0),t.__decorate([r.property()],e.CutFillVolumeMeasurementController.prototype,"updating",null),t.__decorate([r.property({readOnly:!0})],e.CutFillVolumeMeasurementController.prototype,"_updatingHandles",void 0),t.__decorate([r.property()],e.CutFillVolumeMeasurementController.prototype,"_computation",void 0),e.CutFillVolumeMeasurementController=t.__decorate([l.subclass("esri.views.3d.analysis.VolumeMeasurement.CutFillVolumeMeasurementController")],e.CutFillVolumeMeasurementController);const h=c.empty(),v=c.empty();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});