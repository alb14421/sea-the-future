// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/screenUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/Logger","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../geometry/Point","../../../../geometry/support/ray","../../../../geometry/support/vectorStacks","../../../../layers/graphics/dehydratedFeatures","./LineOfSightIntersectionResult","../../support/geometryUtils/ray","../../terrain/Intersector","../../webgl-engine/lib/Intersector","../../webgl-engine/lib/intersectorUtilsConversions"],function(e,t,r,n,o,i,s,c,a,l,u,p,d,y,g,h,f,m,I,v){"use strict";e.LineOfSightRayIntersector=class extends r{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=new I.Intersector(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=0}getScreenPointIntersection(e){const t=n.screenPointObjectToArray(e,y.sv2d.get()),r=f.fromScreen(this.view.state.camera,t,L);return this._getRayIntersection(r)}_getRayIntersection(e,t){const{view:r,intersector:n}=this;if(null==e||null==r.sceneIntersectionHelper)return null;n.options.store=0,r.sceneIntersectionHelper.intersectToolIntersectorRay(e,n,t);const o=n.results.min;if(null==o.target)return null;const i=u.create();if(!o.getIntersectionPoint(i))return null;if(null!=t?.maxDistance&&!o.withinDistance(t.maxDistance))return null;const s=r.renderCoordsHelper.fromRenderCoords(i,new p({spatialReference:r.spatialReference})),c=u.clone(o.normal);if(m.isTerrainIntersectorResult(o))return new h.LineOfSightIntersectionResult({type:2,id:o.target.lij.slice(),mapPoint:s,renderPoint:i,normal:c,ray:d.copy(e),graphic:null});const a=v.toGraphic(o,r);if(null==a)return null;const{layer:l,sourceLayer:y}=a,f="scene"===y?.type?g.getObjectId(a,y.objectIdField):a.uid;return new h.LineOfSightIntersectionResult({type:0,id:`${l?.uid}/${f}`,mapPoint:s,renderPoint:i,normal:c,ray:d.copy(e),graphic:a})}updateFromGroundIntersection(e,t,r){const n=R,o=S,i=b,s=w;l.copy(o,e),this.view.renderCoordsHelper.worldUpAtPosition(o,i),l.normalize(i,i);const c=this.view.basemapTerrain.visibleElevationBounds,a=(t>=0?1:-1)*((c?Math.abs(c.max-c.min):100)+Math.abs(t));l.scale(s,i,a),l.add(n,o,s),d.fromPoints(n,o,L);const p=this._getRayIntersection(L,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:a});if(null!=p){const e=w;return l.scale(e,i,t),l.add(r,p.renderPoint,e),u.clone(p.normal)}return l.copy(r,e),null}},t.__decorate([o.property()],e.LineOfSightRayIntersector.prototype,"view",void 0),t.__decorate([o.property()],e.LineOfSightRayIntersector.prototype,"intersector",void 0),e.LineOfSightRayIntersector=t.__decorate([a.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],e.LineOfSightRayIntersector);const R=u.create(),S=u.create(),b=u.create(),w=u.create(),L=d.create();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});