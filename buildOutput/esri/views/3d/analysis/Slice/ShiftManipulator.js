// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../Color","../../../../core/colorUtils","../../../../core/reactiveUtils","../../../../core/libs/gl-matrix-2/math/mat4","../../../../core/libs/gl-matrix-2/factories/mat4f64","../../../../core/libs/gl-matrix-2/math/quat","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../geometry/support/vectorStacks","./sliceToolConfig","./sliceToolUtils","../../interactive/Manipulator3D","../../interactive/RenderObject","../../webgl-engine/lib/GeometryUtil","../../webgl-engine/materials/ColorMaterial","../../webgl-engine/materials/RibbonLineMaterial"],function(e,t,r,a,i,o,n,s,l,c,d,u,f,h,m,g,p){"use strict";class R extends f.Manipulator3D{constructor(e,i){const o=new p.RibbonLineMaterial({width:1,renderOccluded:4,isDecoration:!0}),n=new g.ColorMaterial({cullFace:2,renderOccluded:16,isDecoration:!0}),s=new g.ColorMaterial({cullFace:2,renderOccluded:16,isDecoration:!0}),l=new g.ColorMaterial({cullFace:2,renderOccluded:16,isDecoration:!0}),c=new g.ColorMaterial({writeDepth:!1,cullFace:1,renderOccluded:2,isDecoration:!0});super({view:e,...b({offsetMode:i,tubeMaterial:n,tipMaterial:s,capMaterial:l,outlineMaterial:c,calloutMaterial:o})}),this._themeHandle=a.watch(()=>e.effectiveTheme.accentColor,e=>{const a=r.getContrast(e),i=t.toUnitRGBA(e),d=t.toUnitRGBA(a),u=t.toUnitRGBA(t.blendColors(a,e,.4)),f=t.toUnitRGBA(t.blendColors(a,e,.14));o.setParameters({color:i}),n.setParameters({color:f}),s.setParameters({color:d}),l.setParameters({color:u}),c.setParameters({color:i})},a.initial)}destroy(){this._themeHandle.remove(),super.destroy()}}function b({offsetMode:e,tubeMaterial:t,tipMaterial:r,capMaterial:a,outlineMaterial:i,calloutMaterial:o}){const n=0===e?d.shiftRestartOffsetDistance:0,c=[l.fromValues(n,0,-d.shiftRestartArrowLength/2),l.fromValues(n,0,d.shiftRestartArrowLength/2)],f=function(e){const t=s.subtract(l.create(),e[e.length-1],e[e.length-2]);s.normalize(t,t),s.scale(t,t,d.shiftRestartTipLength),s.add(t,t,e[e.length-1]);{const r=s.subtract(l.create(),e[0],e[1]);return s.normalize(r,r),s.scale(r,r,d.shiftRestartTipLength),s.add(r,r,e[0]),[r,...e,t]}}(c),g=M({vertices:c,padding:0,materials:{tube:t,tip:r,cap:a}}),p=M({vertices:c,padding:d.shiftRestartArrowOutlineWidth,materials:{tube:i,tip:i,cap:i}}),R=m.createPolylineGeometry(o,[[n,0,0],[n-d.shiftRestartOffsetDistance,0,0]]),b=m.createPolylineGeometry(o,[[n,0,0],[n-d.shiftRestartOffsetDistance,0,0]]);return{renderObjects:[...g.normal.map(e=>new h.RenderObject(e,1|u.DidPointerMoveRecentlyFlag)),...p.normal.map(e=>new h.RenderObject(e,1|u.DidPointerMoveRecentlyFlag)),new h.RenderObject(R,1|u.DidPointerMoveRecentlyFlag|u.IsShiftEdgeOnScreenFlag),...g.focused.map(e=>new h.RenderObject(e,2|u.DidPointerMoveRecentlyFlag)),...p.focused.map(e=>new h.RenderObject(e,2|u.DidPointerMoveRecentlyFlag)),new h.RenderObject(b,2|u.DidPointerMoveRecentlyFlag|u.IsShiftEdgeOnScreenFlag)],autoScaleRenderObjects:!1,collisionType:{type:"line",paths:[f]},collisionPriority:1,radius:d.shiftRestartTipRadius,state:u.DidPointerMoveRecentlyFlag}}function M({vertices:e,padding:t,materials:r}){const a=a=>{const u=e.slice(),f=s.subtract(c.sv3d.get(),u[0],u[1]);s.normalize(f,f);const h=s.subtract(c.sv3d.get(),u[u.length-1],u[u.length-2]);if(s.normalize(h,h),t>0){const e=s.scale(l.create(),h,-t);u[u.length-1]=s.add(e,e,u[u.length-1]);const r=s.scale(l.create(),f,-t);u[0]=s.add(r,r,u[0])}const g=a?d.shiftRestartTipFocusMultiplier:1,p=d.shiftRestartTipLength*g,R=d.shiftRestartTipRadius*g,b=i.identity(c.sm4d.get());if(t>0){const e=p/4,r=s.set(c.sv3d.get(),0,e,0),a=1+t/e;i.translate(b,b,r),i.scale(b,b,s.set(c.sv3d.get(),a,a,a)),i.translate(b,b,s.scale(r,r,-1/a))}const M=i.identity(o.create()),y=l.fromValues(0,1,0),v=i.fromQuat(o.create(),n.rotationTo(c.sq4d.get(),y,h));v[12]=u[u.length-1][0],v[13]=u[u.length-1][1],v[14]=u[u.length-1][2],i.multiply(v,v,b);const w=r.tube,O=function(e,t,r){const a=[];for(let t=0;t<12;t++){const r=t/12*2*Math.PI;a.push([Math.cos(r)*e,Math.sin(r)*e])}return m.createPathExtrusionGeometry(r,a,t,[],[],!1)}(d.shiftRestartTubeRadius*(a?d.shiftRestartTubeFocusMultiplier:1)+t,u,w);O.transformation=M;const D=[O],P=r.tip,F=m.createConeGeometry(P,p,R,24,!1,!1,!0);F.transformation=v,D.push(F);const T=r.cap,C=m.createConeGeometry(T,p,R,24,!1,!0,!1);C.transformation=v,D.push(C);const j=i.fromQuat(o.create(),n.rotationTo(c.sq4d.get(),y,f));return j[12]=u[0][0],j[13]=u[0][1],j[14]=u[0][2],i.multiply(j,j,b),D.push(F.instantiate({transformation:j})),D.push(C.instantiate({transformation:j})),D};return{normal:a(!1),focused:a(!0)}}e.ShiftManipulator=R,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});