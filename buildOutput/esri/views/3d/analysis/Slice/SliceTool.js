// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../analysis/SlicePlane","../../../../core/clock","../../../../core/maybe","../../../../core/reactiveUtils","../../../../core/scheduling","../../../../core/screenUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/Logger","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","../../../../core/libs/gl-matrix-2/math/mat4","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../../chunks/boundedPlane","../../../../geometry/support/plane","../../../../geometry/support/ray","../../../../geometry/support/vectorStacks","../images/Factory","./ResizeManipulator","./RotateManipulator","./settings","./ShiftManipulator","./sliceToolConfig","./sliceToolUtils","../../interactive/manipulatorUtils","../../interactive/editingTools/dragEventPipeline3D","../../support/geometryUtils/ray","../../../interactive/AnalysisToolBase","../../../interactive/dragEventPipeline","../../../interactive/ToolIntersector","../../../support/screenUtils"],function(e,t,i,a,n,s,r,l,o,p,h,c,u,d,_,v,y,P,g,w,m,f,M,D,T,V,b,S,R,E,k,H,x,C,z){"use strict";var I;function O(e,t,i,a){const n=S.createShiftPlane(i,P.normal(a),e.direction,g.create()),s=v.create();return g.intersectRay(n,e,s)?{type:"shift",creatingPointerId:t,hasBeenDragged:!1,shiftPlane:n,depth:0,startPoint:s}:null}function F(e){return"mouse"!==e.pointerType||0===e.button}e.default=class extends H.AnalysisToolBase{static{I=this}constructor(e){super(e),this._clock=a.clock,this._previewPlaneOpacity=1,this.removeIncompleteOnCancel=!1,this._mode="none",this.shiftManipulator=null,this.rotateHeadingManipulator=null,this.rotateTiltManipulator=null,this.resizeManipulators=null,this._frameTask=null,this._pointerMoveTimerMs=b.pointerMoveTimerMs,this._prevPointerMoveTimeout=null,this._previewPlaneGridVisualElement=null,this._previewPlaneOutlineVisualElement=null,this._startPlane=P.create(),this._previewPlane=null,this._activeKeyModifiers={},this._lastCursorPosition=l.createScreenPoint(),this._resizeHandles=[{direction:[1,0]},{direction:[1,1]},{direction:[0,1]},{direction:[-1,1]},{direction:[-1,0]},{direction:[-1,-1]},{direction:[0,-1]},{direction:[1,-1]}],this._intersector=C.newToolIntersector(e.view.state.viewingMode)}initialize(){if(null==this.analysis)throw new Error("SliceTool requires valid analysis, but null was provided.");const e=e=>{this._updateManipulatorsInteractive(e),e.grabbing||(null!=this.analysisViewData.plane&&P.copy(this.analysisViewData.plane,this._startPlane),this.inputState=null)},t=new V.ShiftManipulator(this.view,1);this.shiftManipulator=t,this.manipulators.add(t),this.addHandles([this._createShiftDragPipeline(t),t.events.on("grab-changed",i=>{this._onShiftGrab(i),e(t)})]);const i=!this.view.stage?.renderView.renderingContext.driverTest.svgPremultipliesAlpha.result,a=new D.RotateManipulator(this.view,(e,t)=>f.getRotateHeadingTexture(this.view.stage.textures,{accentColor:e,contrastColor:t,preMultiplyAlpha:i}));this.rotateHeadingManipulator=a,this.manipulators.add(a),this.addHandles([this._createRotateHeadingDragPipeline(a),a.events.on("grab-changed",t=>{this._onRotateHeadingGrab(t),e(a)})]);const n=new D.RotateManipulator(this.view,(e,t)=>f.getTiltRotateTexture(this.view.stage.textures,{accentColor:e,contrastColor:t,preMultiplyAlpha:i}));this.rotateTiltManipulator=n,this.manipulators.add(n),this.addHandles([this._createRotateTiltDragPipeline(n),n.events.on("grab-changed",t=>{this._onRotateTiltGrab(t),e(n)})]),this.resizeManipulators=this._resizeHandles.map((t,i)=>{const a=new M.ResizeManipulator(this.view,t);return this.addHandles([this._createResizeDragPipeline(a),a.events.on("grab-changed",t=>{this._onResizeGrab(t,i),e(a)})]),a}),this.manipulators.addMany(this.resizeManipulators),this._previewPlaneGridVisualElement=S.createGridVisualElement(this.view),this._previewPlaneOutlineVisualElement=S.createOutlineVisualElement(this.view),this._previewPlaneOutlineVisualElement.width=b.planePreviewOutlineWidth,this.addHandles(s.watch(()=>[this.analysisViewData.plane,this.analysis.tiltEnabled],()=>this._updateManipulators(),s.sync)),this.addHandles([s.when(()=>"sliced"===this.state,()=>{this.finishToolCreation(),this.stop()},s.syncAndInitial),s.watch(()=>this.view.state.camera,()=>this._onCameraChange())])}destroy(){this._removeFrameTask(),this._clearPointerMoveTimeout(),this._previewPlaneOutlineVisualElement=n.destroyMaybe(this._previewPlaneOutlineVisualElement),this._previewPlaneGridVisualElement=n.destroyMaybe(this._previewPlaneGridVisualElement)}get state(){const e=!!this.analysisViewData.plane,t=!!this.inputState;return e?e&&t?"slicing":e&&!t?"sliced":"ready":"ready"}get cursor(){return this.active?this._placingSlicePlane||"exclude"===this.mode?"crosshair":null!=this._creatingPointerId?"grabbing":null:null}set analysis(e){if(null==e)throw new Error("SliceTool requires valid analysis, but null was provided.");this.removeHandles("analysis"),this._set("analysis",e)}get mode(){return this._mode}static{this.disableEngineLayers=!1}get inputState(){return this._get("inputState")}set inputState(e){this._set("inputState",e),this.analysisViewData.showGrid=null!=e&&"resize"===e.type,this._updateMaterials()}get _placingSlicePlane(){return this.active&&!this.inputState&&"place"===this._mode}get _creatingPointerId(){return null!=this.inputState&&"shift"===this.inputState.type?this.inputState.creatingPointerId:null}start(e){this._finishToolCreationIfValid(),this._mode=e,this.active||(this.view.activeTool=this)}stop(){this.active&&(this.view.activeTool=null)}onActivate(){this._finishToolCreationIfValid(),"none"===this._mode&&null==this.analysisViewData.plane&&(this._mode="place")}onDeactivate(){this._mode="none",this._updatePreviewPlane(null)}onShow(){this._updateVisibility(!0)}onHide(){this._updateVisibility(!1)}_updateVisibility(e){this._updateManipulators(),e||this._clearPointerMoveTimeout()}onInputEvent(e){switch(e.type){case"pointer-drag":if(!F(e))return;this._placingSlicePlane?this._onClickPlacePlane(e)&&e.stopPropagation():this._onPointerDrag(e)&&e.stopPropagation();break;case"pointer-move":this._onPointerMove(e);break;case"pointer-up":this._onPointerUp(e)&&e.stopPropagation();break;case"immediate-click":if(!F(e))return;"exclude"===this._mode?e.defer(async()=>{await this._onClickExcludeLayer(e)&&e.stopPropagation()}):this._onClickPlacePlane(e)&&e.stopPropagation();break;case"drag":this.inputState&&e.stopPropagation();break;case"key-down":this._onKeyDown(e)&&e.stopPropagation();break;case"key-up":this._onKeyUp(e)&&e.stopPropagation()}}onEditableChange(){this.analysisViewData.editable=this.internallyEditable}_onPointerDrag(e){const t=this.inputState;if(e.pointerId===this._creatingPointerId&&null!=t&&"shift"===t.type){const i=z.createScreenPointFromEvent(e);return this.shiftManipulator.events.emit("drag",{action:t.hasBeenDragged?"update":"start",pointerType:e.pointerType,start:i,screenPoint:i}),t.hasBeenDragged=!0,!0}return!1}_onPointerMove(e){this._lastCursorPosition.x=e.x,this._lastCursorPosition.y=e.y,this._resetPointerMoveTimeout(),"touch"!==e.pointerType&&this._updatePreviewPlane(z.createScreenPointFromEvent(e),this._activeKeyModifiers)}_onCameraChange(){this._updatePreviewPlane(this._lastCursorPosition,this._activeKeyModifiers),this._updateManipulators()}_onPointerUp(e){if(e.pointerId===this._creatingPointerId&&null!=this.analysisViewData.plane){const t=z.createScreenPointFromEvent(e);return this.shiftManipulator.events.emit("drag",{action:"end",start:t,screenPoint:t}),P.copy(this.analysisViewData.plane,this._startPlane),this.inputState=null,!0}return!1}_onClickPlacePlane(e){if(!this._placingSlicePlane)return!1;const t=z.createScreenPointFromEvent(e),a=P.create();if(this._pickPlane(t,!1,this._activeKeyModifiers,a)){if("pointer-drag"===e.type){const i=k.fromScreenNormalized(this.view.state.camera,t,U);this.inputState=O(i,e.pointerId,a.origin,a)}return P.copy(a,this._startPlane),this.analysis.shape=S.planeToShape(a,this.view,this.view.spatialReference,new i),"pointer-drag"!==e.type&&this.stop(),!0}return!1}async _onClickExcludeLayer(e){if("exclude"!==this.mode)return!1;const t=await this.view.hitTest(z.createScreenPointFromEvent(e)),i=t.results.at(0);if(i){const e="graphic"===i.type&&i.graphic;if(e){const t=e.sourceLayer||e.layer;t&&this.analysis.excludedLayers.push(t)}}else t.ground.layer?this.analysis.excludedLayers.push(t.ground.layer):this.analysis.excludeGroundSurface=!0;return this.stop(),!0}_onKeyDown(e){return(e.key===b.forceVerticalModifier||e.key===b.forceHorizontalModifier)&&(this._activeKeyModifiers[e.key]=!0,null!=this._previewPlane&&this._updatePreviewPlane(this._lastCursorPosition,this._activeKeyModifiers),!0)}_onKeyUp(e){return!(e.key!==b.forceVerticalModifier&&e.key!==b.forceHorizontalModifier||!this._activeKeyModifiers[e.key]||(delete this._activeKeyModifiers[e.key],null!=this._previewPlane&&this._updatePreviewPlane(this._lastCursorPosition,this._activeKeyModifiers),0))}_onShiftGrab(e){if("start"!==e.action||null==this.analysisViewData.plane||!e.screenPoint)return;const t=k.fromScreenNormalized(this.view.state.camera,e.screenPoint,U);P.copy(this.analysisViewData.plane,this._startPlane),this.inputState=O(t,null,this.shiftManipulator.renderLocation,this.analysisViewData.plane)}_createShiftDragPipeline(e){return x.createManipulatorDragEventPipeline(e,(e,t,i)=>{const a=this.inputState;if(null==a||"shift"!==a.type)return;const n=null!=this.analysisViewData.plane?P.copy(this.analysisViewData.plane,P.create()):null;t.next(E.screenToRenderPlane(this.view,a.shiftPlane)).next(this._shiftDragAdjustSensitivity(a)).next(this._shiftDragUpdatePlane(a)),i.next(()=>{null!=n&&this._updateBoundedPlane(n)})})}_shiftDragAdjustSensitivity(e){return t=>{if(null==this.analysisViewData.plane)return null;const i=Math.min((1-Math.abs(_.dot(P.normal(this.analysisViewData.plane),t.ray.direction)/_.length(t.ray.direction)))/.001,1),a=-g.signedDistance(this._startPlane.plane,t.renderEnd),n=-g.signedDistance(this._startPlane.plane,e.startPoint);return e.depth=e.depth*(1-i)+a*i-n,t}}_shiftDragUpdatePlane(e){return()=>{if(null==this.analysisViewData.plane)return;const t=_.copy(m.sv3d.get(),this._startPlane.origin),i=_.copy(m.sv3d.get(),P.normal(this._startPlane));_.scale(i,i,-e.depth),_.add(i,i,t);const a=P.fromValues(i,this.analysisViewData.plane.basis1,this.analysisViewData.plane.basis2,P.create());this._updateBoundedPlane(a)}}_onRotateHeadingGrab(e){if("start"!==e.action||null==this.analysisViewData.plane||!e.screenPoint)return;const t=S.createRotatePlane(this.analysisViewData.plane,this.view.renderCoordsHelper,1,g.create()),i=k.fromScreenNormalized(this.view.state.camera,e.screenPoint,U),a=v.create();g.intersectRay(t,i,a)&&(P.copy(this.analysisViewData.plane,this._startPlane),this.inputState={type:"rotate",rotatePlane:t,startPoint:a})}_createRotateHeadingDragPipeline(e){return x.createManipulatorDragEventPipeline(e,(e,t,i)=>{const a=this.inputState;if(null==a||"rotate"!==a.type)return;const n=null!=this.analysisViewData.plane?P.copy(this.analysisViewData.plane,P.create()):null;t.next(E.screenToRenderPlane(this.view,a.rotatePlane)).next(this._rotateDragRenderPlaneToRotate(a)).next(this._rotateDragUpdatePlaneFromRotate()),i.next(()=>{null!=n&&this._updateBoundedPlane(n)})})}_onRotateTiltGrab(e){if("start"!==e.action||null==this.analysisViewData.plane||!e.screenPoint)return;const t=S.createRotatePlane(this.analysisViewData.plane,this.view.renderCoordsHelper,2,g.create()),i=k.fromScreenNormalized(this.view.state.camera,e.screenPoint,U),a=v.create();g.intersectRay(t,i,a)&&(P.copy(this.analysisViewData.plane,this._startPlane),this.inputState={type:"rotate",rotatePlane:t,startPoint:a})}_createRotateTiltDragPipeline(e){return x.createManipulatorDragEventPipeline(e,(e,t,i)=>{const a=this.inputState;if(null==a||"rotate"!==a.type)return;const n=null!=this.analysisViewData.plane?P.copy(this.analysisViewData.plane,P.create()):null;t.next(E.screenToRenderPlane(this.view,a.rotatePlane)).next(this._rotateDragRenderPlaneToRotate(a)).next(this._rotateDragUpdatePlaneFromRotate()),i.next(()=>{null!=n&&this._updateBoundedPlane(n)})})}_rotateDragRenderPlaneToRotate(e){return t=>{if(null==this.analysisViewData.plane)return null;const i=g.getNormal(e.rotatePlane),a=R.calculateInputRotationTransform(e.startPoint,t.renderEnd,this.analysisViewData.plane.origin,i);return{...t,rotateAxis:i,rotateAngle:a}}}_rotateDragUpdatePlaneFromRotate(){return e=>{if(null==this.analysisViewData.plane)return;const t=d.fromRotation(m.sm4d.get(),e.rotateAngle,e.rotateAxis);if(null==t)return;const i=_.transformMat4(m.sv3d.get(),this._startPlane.basis1,t),a=_.transformMat4(m.sv3d.get(),this._startPlane.basis2,t),n=P.fromValues(this.analysisViewData.plane.origin,i,a,P.create());this._updateBoundedPlane(n)}}_onResizeGrab(e,t){if("start"!==e.action||null==this.analysisViewData.plane||!e.screenPoint)return;const i=k.fromScreenNormalized(this.view.state.camera,e.screenPoint,U),a=m.sv3d.get();g.intersectRay(this.analysisViewData.plane.plane,i,a)&&(P.copy(this.analysisViewData.plane,this._startPlane),this.inputState={type:"resize",activeHandleIdx:t,startPoint:v.clone(a)})}_createResizeDragPipeline(e){return x.createManipulatorDragEventPipeline(e,(e,t,i)=>{const a=this.inputState;if(null==a||"resize"!==a.type||null==this.analysisViewData.plane)return;const n=P.copy(this.analysisViewData.plane,P.create());t.next(E.screenToRenderPlane(this.view,this.analysisViewData.plane.plane)).next(this._resizeDragUpdatePlane(a)),i.next(()=>{this._updateBoundedPlane(n)})})}_resizeDragUpdatePlane(e){return t=>{if(null==this.analysisViewData.plane)return;const i=this._resizeHandles[e.activeHandleIdx],a=S.resizePlane(i,e.startPoint,t.renderEnd,this.view.state.camera,this._startPlane,P.copy(this.analysisViewData.plane));this._updateBoundedPlane(a)}}_updateBoundedPlane(e){const t=this.analysisViewData;if(null==t)throw new Error("valid internal object expected");t.plane=e}_updatePreviewPlane(e,t={}){if("exclude"===this.mode)return;let i=this._previewPlane;if(this._previewPlane=null,null==e)return this._removeFrameTask(),void this._updateManipulators();if(this.active){const a=null!=i?i:P.create();if(i=null!=i?P.copy(i,G):null,this._pickPlane(e,!0,t,a)){const e=b.previewFadeDotThreshold;let t=!1;null!=i&&(t=_.dot(g.getNormal(i.plane),g.getNormal(a.plane))<e||_.dot(_.normalize(m.sv3d.get(),i.basis1),_.normalize(m.sv3d.get(),a.basis1))<e),t&&(this._previewPlaneOpacity=0),this._previewPlane=a}}null!=this._previewPlane&&null==this._frameTask&&0===this._previewPlaneOpacity?this._frameTask=r.addFrameTask({update:({deltaTime:e})=>{this._previewPlaneOpacity=Math.min(this._previewPlaneOpacity+e/(1e3*b.previewFadeDurationSeconds),1),this._updateManipulators(),1===this._previewPlaneOpacity&&this._removeFrameTask()}}):null==this._previewPlane&&null!=this._frameTask?this._removeFrameTask():null!=this._previewPlane&&this._updateManipulators()}_removeFrameTask(){this._frameTask=n.removeMaybe(this._frameTask)}_pickMinResult(e){const t=l.screenPointObjectToArray(e,m.sv2d.get());return this.view.sceneIntersectionHelper.intersectToolIntersectorScreen(t,this._intersector),this._intersector.results.min}_pickPlane(e,t,i,a){const n=this._pickMinResult(e),s=m.sv3d.get();if(!n.getIntersectionPoint(s))return!1;const r=n.getTransformedNormal(m.sv3d.get()),l=this.view.state.camera;_.dot(r,l.viewForward)>0&&_.scale(r,r,-1);const o=S.calculatePlaneHalfSize(s,l),p=(t?1:-1)*o*b.initialDepthOffsetFrac,h=_.scale(m.sv3d.get(),r,p);_.add(h,h,s);const c=this.analysis.tiltEnabled?3:0,u=i[b.forceVerticalModifier]?2:i[b.forceHorizontalModifier]?1:c;return S.createPlane(h,r,o,o,l,u,this.view.renderCoordsHelper,a),!0}_clearPointerMoveTimeout(){this._prevPointerMoveTimeout=n.removeMaybe(this._prevPointerMoveTimeout)}_resetPointerMoveTimeout(){this._clearPointerMoveTimeout(),this.shiftManipulator.state|=S.DidPointerMoveRecentlyFlag,this.rotateHeadingManipulator.state|=S.DidPointerMoveRecentlyFlag,this.rotateTiltManipulator.state|=S.DidPointerMoveRecentlyFlag,this._prevPointerMoveTimeout=this._clock.setTimeout(()=>{this.shiftManipulator.state&=~S.DidPointerMoveRecentlyFlag,this.rotateHeadingManipulator.state&=~S.DidPointerMoveRecentlyFlag,this.rotateTiltManipulator.state&=~S.DidPointerMoveRecentlyFlag},this._pointerMoveTimerMs)}_updateManipulators(){if(I.disableEngineLayers)return;let e,t,i=!1;if(null!=this.analysisViewData.plane)e=this.analysisViewData.plane,t=this._previewPlane??e,i=!1;else{if(null==this._previewPlane)return this._setManipulatorVisibility(!1),void this._setPreviewPlaneVisibility(!1);t=e=this._previewPlane,i=!0}if(this._setManipulatorVisibility(!i),!i){const t=S.calculateBoundedPlaneTranslateRotate(e,m.sm4d.get());S.updateShiftRestartHandle(this.shiftManipulator,t,e,this.view.state.camera),S.updateRotateHeadingHandle(this.rotateHeadingManipulator,t,e,this.view.renderCoordsHelper),S.updateRotateTiltHandle(this.rotateTiltManipulator,t,e),this.resizeManipulators.forEach((i,a)=>S.updateResizeHandle(i,this._resizeHandles[a],t,e))}this._setPreviewPlaneVisibility(!this._creatingPointerId&&(i||"place"===this._mode)),this._updatePreviewPlaneTransform(t),this._updateMaterials()}_setManipulatorVisibility(e){this.shiftManipulator.available=e,this.rotateHeadingManipulator.available=e,this.rotateTiltManipulator.available=e&&this.analysis.tiltEnabled,this.resizeManipulators.forEach(t=>t.available=e)}_updatePreviewPlaneTransform(e){const t=S.calculateBoundedPlaneTranslateRotate(e,m.sm4d.get()),i=_.set(m.sv3d.get(),_.length(e.basis1),_.length(e.basis2),1),a=d.fromScaling(m.sm4d.get(),i),n=d.multiply(a,t,a);this._previewPlaneOutlineVisualElement.transform=n,this._previewPlaneGridVisualElement.transform=n}_setPreviewPlaneVisibility(e){const t=this._previewPlaneOutlineVisualElement,i=this._previewPlaneGridVisualElement;e&&(t.attached=!0,i.attached=!0),t.visible=e,i.visible=e}_updateMaterials(){const e=T.getOutlineColor(this.view.effectiveTheme);e[3]*=this._previewPlaneOpacity;const t=y.clone(T.planeColor);t[3]*=this._previewPlaneOpacity,this._previewPlaneOutlineVisualElement.color=e,this._previewPlaneGridVisualElement.backgroundColor=t,this._previewPlaneGridVisualElement.gridColor=y.ZEROS}_updateManipulatorsInteractive(e){if(!e.grabbing)return this.shiftManipulator.interactive=!0,this.rotateHeadingManipulator.interactive=!0,this.rotateTiltManipulator.interactive=!0,void this.resizeManipulators.forEach(e=>{e.interactive=!0});this.shiftManipulator.interactive=this.shiftManipulator===e,this.rotateHeadingManipulator.interactive=this.rotateHeadingManipulator===e,this.rotateTiltManipulator.interactive=this.rotateTiltManipulator===e,this.resizeManipulators.forEach(t=>{t.interactive=t===e})}_finishToolCreationIfValid(){this.analysis.valid&&this.finishToolCreation()}get test(){return{plane:this.analysisViewData.plane,setPointerMoveTimerMs:e=>{this._pointerMoveTimerMs=e}}}},t.__decorate([o.property()],e.default.prototype,"_clock",void 0),t.__decorate([o.property({constructOnly:!0})],e.default.prototype,"view",void 0),t.__decorate([o.property()],e.default.prototype,"analysisViewData",void 0),t.__decorate([o.property({readOnly:!0})],e.default.prototype,"state",null),t.__decorate([o.property({readOnly:!0})],e.default.prototype,"cursor",null),t.__decorate([o.property()],e.default.prototype,"analysis",null),t.__decorate([o.property()],e.default.prototype,"removeIncompleteOnCancel",void 0),t.__decorate([o.property()],e.default.prototype,"_mode",void 0),t.__decorate([o.property()],e.default.prototype,"mode",null),t.__decorate([o.property({value:null})],e.default.prototype,"inputState",null),t.__decorate([o.property()],e.default.prototype,"_placingSlicePlane",null),t.__decorate([o.property()],e.default.prototype,"_creatingPointerId",null),e.default=I=t.__decorate([u.subclass("esri.views.3d.analysis.Slice.SliceTool")],e.default);const G=P.create(),U=w.create();return e.default});