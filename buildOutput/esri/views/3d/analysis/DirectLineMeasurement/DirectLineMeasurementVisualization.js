// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../intl","../../../../core/Accessor","../../../../core/colorUtils","../../../../core/has","../../../../core/mathUtils","../../../../core/maybe","../../../../core/quantityFormatUtils","../../../../core/quantityUtils","../../../../core/reactiveUtils","../../../../core/screenUtils","../../../../core/unitUtils","../../../../core/accessorSupport/decorators/property","../../../../core/Logger","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","../../../../core/libs/gl-matrix-2/math/vec2","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../interactive/support/viewUtils","../../interactive/visualElements/LabelVisualElement","../../interactive/visualElements/LineVisualElement","../../interactive/visualElements/MeasurementArrowVisualElement","../../interactive/visualElements/RightAngleQuadVisualElement","../../interactive/visualElements/support/Segment","../../webgl-engine/materials/lineStippleUtils","../../../support/geodesicMeasurementUtils","../../../../intl/locale","../../../../intl/messages"],function(e,t,i,n,s,a,r,l,o,c,u,d,h,m,g,_,p,v,b,L,y,S,V,w,M,z,E,A,P,D){"use strict";e.DirectLineMeasurementVisualization=class extends n{get _parameters(){const e=this.view.effectiveTheme,{accentColor:t,textColor:i}=e,n=s.unitRGBAFromColor(t),a=s.multiplyOpacityToUnitRGBA(t,.75),r=s.unitRGBAFromColor(s.getContrast(t)),l=s.getContrast(i,160);return{accentColor:n,contrastColor:r,translucentAccentColor:a,triangleLineWidth:3,geodesicProjectionLineWidth:2,guideLineWidth:2,guideStippleLengthPixels:3,directLabelFontSize:16,horizontalLabelFontSize:12,verticalLabelFontSize:12,textColor:i,textBackgroundColor:s.multiplyOpacity(l,.6),textCalloutColor:s.multiplyOpacity(l,.5)}}get visible(){return this.analysisView.visible}get viewMode(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.analysisView;if(null==e||null==t||e.equals(t))return 0;const i=this.analysisView.result;if(null==i)return 1;if("geodesic"===this.actualVisualizedMeasurement)return this._requiresGeodesicGuideAt(this._startPosition)||this._requiresGeodesicGuideAt(this._endPosition)?3:1;const{verticalDistance:n,horizontalDistance:s}=i,a=c.toUnit(n,"meters").value,r=c.toUnit(s,"meters").value;return Math.min(a/r,r/a)<this.triangleCollapseRatioThreshold?1:2}get actualVisualizedMeasurement(){const{measurementMode:e,result:t}=this.analysisView;switch(e){case 0:return null!=t&&c.toUnit(t.horizontalDistance,"meters").value>A.geodesicDistanceThreshold?"geodesic":"euclidean";case 1:return"euclidean";case 2:return"geodesic"}}get allowVisualElementsOrientationChange(){return null==this._triangleOrientationOverride}set allowVisualElementsOrientationChange(e){null==this._triangleOrientationOverride!==e&&(null==this._triangleOrientationOverride?this._triangleOrientationOverride=this._actualVisualElementsOrientation:this._triangleOrientationOverride=null)}get labels(){return"geodesic"===this.actualVisualizedMeasurement?{direct:null,horizontal:this._segmentLabel,vertical:this._verticalLabel}:{direct:this._segmentLabel,horizontal:this._horizontalLabel,vertical:this._verticalLabel}}constructor(e){super(e),this._segmentVisualElement=null,this._triangleVisualElement=null,this._rightAngleQuad=null,this._projectedGeodesicLine=null,this._geodesicStartHint=null,this._geodesicEndHint=null,this._segmentLabel=null,this._verticalLabel=null,this._horizontalLabel=null,this._startPosition=L.create(),this._endPosition=L.create(),this._cornerPosition=L.create(),this._startPositionAtSeaLevel=L.create(),this._endPositionAtSeaLevel=L.create(),this._triangleOrientationOverride=null,this.messages=null,this.loadingMessages=!0,this.visualElementOrientation=0,this.triangleCollapseRatioThreshold=.03}initialize(){const e={attached:!0,view:this.view,isDecoration:!0},{guideLineWidth:t,guideStippleLengthPixels:i,triangleLineWidth:n,geodesicProjectionLineWidth:s,directLabelFontSize:a,verticalLabelFontSize:r,horizontalLabelFontSize:l}=this._parameters;this._segmentVisualElement=new w.MeasurementArrowVisualElement({...e,geometry:null,renderOccluded:4}),this._triangleVisualElement=new V.LineVisualElement({...e,width:n,renderOccluded:4}),this._rightAngleQuad=new M.RightAngleQuadVisualElement({...e,renderOccluded:4});const o={...e,polygonOffset:!0,renderOccluded:4};this._projectedGeodesicLine=new V.LineVisualElement({...o,width:s,stipplePattern:E.createStipplePatternSimple(i)}),this._geodesicStartHint=new V.LineVisualElement({...o,width:t,stipplePattern:E.createStipplePatternSimple(i)}),this._geodesicEndHint=new V.LineVisualElement({...o,width:t,stipplePattern:E.createStipplePatternSimple(i)}),this._segmentLabel=new S.LabelVisualElement({...e,fontSize:a}),this._verticalLabel=new S.LabelVisualElement({...e,fontSize:r}),this._horizontalLabel=new S.LabelVisualElement({...e,fontSize:l}),this.addHandles([u.watch(()=>{const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.analysisView,i=this.view;return{view:i,camera:i.state.camera,viewMode:this.viewMode,elevationAlignedStartPoint:e,elevationAlignedEndPoint:t,orientation:this._actualVisualElementsOrientation,visualizedMeasurement:this.actualVisualizedMeasurement,stripeLength:this._measurementArrowStripeLength}},e=>this._updateGeometryAndViewMode(e),u.syncAndInitial),u.watch(()=>({visible:this.visible,viewMode:this.viewMode}),e=>this._updateVisualElementVisibility(e),u.syncAndInitial),u.watch(()=>({text:this._labelsText,visualizedMeasurement:this.actualVisualizedMeasurement}),e=>this._updateLabelText(e),u.syncAndInitial),u.watch(()=>({visible:this.visible,viewMode:this.viewMode}),e=>this._updateLabelVisibility(e),u.syncAndInitial),u.watch(()=>this._measurementArrowStripeLength,e=>this._updateSegmentStripeLength(e),u.syncAndInitial),P.onLocaleChange(()=>this._updateMessageBundle()),u.watch(()=>this._parameters,({textBackgroundColor:e,textCalloutColor:t,textColor:i,translucentAccentColor:n,accentColor:s,contrastColor:a})=>{const{_segmentLabel:r,_verticalLabel:l,_horizontalLabel:o,_triangleVisualElement:c,_rightAngleQuad:u,_projectedGeodesicLine:d,_geodesicStartHint:h,_geodesicEndHint:m,_segmentVisualElement:g}=this;r.backgroundColor=e,r.calloutColor=t,r.textColor=i,l.backgroundColor=e,l.calloutColor=t,l.textColor=i,o.backgroundColor=e,o.calloutColor=t,o.textColor=i,c.color=n,u.color=n,d.color=n,h.color=n,m.color=n,g.color=s,g.contrastColor=a},u.initial)]),this._updateMessageBundle()}destroy(){this._segmentVisualElement=l.destroyMaybe(this._segmentVisualElement),this._triangleVisualElement=l.destroyMaybe(this._triangleVisualElement),this._rightAngleQuad=l.destroyMaybe(this._rightAngleQuad),this._projectedGeodesicLine=l.destroyMaybe(this._projectedGeodesicLine),this._geodesicStartHint=l.destroyMaybe(this._geodesicStartHint),this._geodesicEndHint=l.destroyMaybe(this._geodesicEndHint),this._segmentLabel=l.destroyMaybe(this._segmentLabel),this._verticalLabel=l.destroyMaybe(this._verticalLabel),this._horizontalLabel=l.destroyMaybe(this._horizontalLabel),this.set("view",null)}_updateVisualElementVisibility({visible:e,viewMode:t}){if(this._segmentVisualElement.visible=!1,this._triangleVisualElement.visible=!1,this._rightAngleQuad.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1,e)switch(t){case 0:break;case 1:this._segmentVisualElement.visible=!0;break;case 2:this._segmentVisualElement.visible=!0,this._triangleVisualElement.visible=!0,this._rightAngleQuad.visible=!0;break;case 3:this._segmentVisualElement.visible=!0,this._projectedGeodesicLine.visible=!0,this._geodesicStartHint.visible=!0,this._geodesicEndHint.visible=!0}}_updateGeometryAndViewMode({view:e,camera:t,viewMode:i,elevationAlignedStartPoint:n,elevationAlignedEndPoint:s,orientation:a,visualizedMeasurement:r,stripeLength:l}){const o=e.renderCoordsHelper;if(null==o||null==n||null==s||n.equals(s))return;let c=this._startPosition,u=this._endPosition;o.toRenderCoords(n,c),o.toRenderCoords(s,u);const d=1===a?1:-1,h=d*(o.getAltitude(u)-o.getAltitude(c));h<0&&(c=this._endPosition,u=this._startPosition);const m="geodesic"===r?new z.GeodesicSegment(this._startPosition,this._endPosition,o.spatialReference):new z.EuclideanSegment(this._startPosition,this._endPosition);switch(this._segmentVisualElement.geometry=m,this._updateSegmentStripeLength(l),i){case 1:this._updateSegment(m,a);break;case 2:this._updateSegmentAndTriangle({view:e,camera:t,segment:m,orientation:a,startPosition:c,endPosition:u,deltaSign:d,altitudeDelta:h});break;case 3:this._updateSegmentAndProjection({view:e,orientation:a,startPosition:c,endPosition:u})}}_updateSegment(e,t){this._segmentLabel.anchor=1===t?"top":"bottom",this._segmentLabel.geometry={type:"segment",segment:e,sampleLocation:"center"}}_updateSegmentAndTriangle({view:{renderCoordsHelper:e},camera:t,segment:i,orientation:n,startPosition:s,endPosition:a,deltaSign:r,altitudeDelta:l}){const o=this._cornerPosition;e.worldUpAtPosition(s,o),b.scale(o,o,r*Math.abs(l)),b.add(o,o,s),this._triangleVisualElement.geometry=[[[s[0],s[1],s[2]],[o[0],o[1],o[2]],[a[0],a[1],a[2]]]],this._rightAngleQuad.geometry={previous:s,center:o,next:a};const c=new z.EuclideanSegment(s,o),u=new z.EuclideanSegment(o,a),d=function(e,t,i,n,s){const a=C,r=O;s.projectToRenderScreen(i,a),s.projectToRenderScreen(t,r);const l={segment:"bottom",horizontal:"top",vertical:a[0]<r[0]?"left":"right"};{const n=x,a=G;if(y.renderScreenSpaceTangent(e,i,s,n),y.renderScreenSpaceTangent(e,t,s,a),v.dot(n,a)>=f){const e=Math.sign(n[1])===Math.sign(a[1]);l.segment=e?S.mirrorPosition(l.vertical):l.vertical}else{const e=H;y.renderScreenSpaceTangent(i,t,s,e),v.dot(e,a)>=f&&(l.segment=Math.sign(e[0])===Math.sign(a[0])?S.mirrorPosition(l.horizontal):l.horizontal)}}if(2===n){const e=e=>"top"===e?"bottom":"top";l.segment=e(l.segment),l.horizontal=e(l.horizontal),l.vertical=e(l.vertical)}return l}(s,a,o,n,t);this._segmentLabel.anchor=d.segment,this._segmentLabel.geometry={type:"segment",segment:i,sampleLocation:"center"},this._verticalLabel.geometry={type:"segment",segment:c,sampleLocation:"center"},this._verticalLabel.anchor=d.vertical,this._horizontalLabel.geometry={type:"segment",segment:u,sampleLocation:"center"},this._horizontalLabel.anchor=d.horizontal}_updateSegmentAndProjection({view:{renderCoordsHelper:e},orientation:t,startPosition:i,endPosition:n}){e.setAltitude(this._startPositionAtSeaLevel,0,i),e.setAltitude(this._endPositionAtSeaLevel,0,n);const s=new z.GeodesicSegment(this._startPositionAtSeaLevel,this._endPositionAtSeaLevel,e.spatialReference);this._projectedGeodesicLine.setGeometryFromSegment(s),this._geodesicStartHint.setGeometryFromSegment(new z.EuclideanSegment(this._startPositionAtSeaLevel,i)),this._geodesicEndHint.setGeometryFromSegment(new z.EuclideanSegment(this._endPositionAtSeaLevel,n)),this._segmentLabel.geometry={type:"segment",segment:s,sampleLocation:"center"},this._segmentLabel.anchor=1===t?"top":"bottom"}_updateLabelText({text:e,visualizedMeasurement:t}){null!=e?(this._segmentLabel.text="euclidean"===t?e.directDistance:e.horizontalDistance,this._horizontalLabel.text=e.horizontalDistance,this._verticalLabel.text=e.verticalDistance):(this._segmentLabel.text=null,this._horizontalLabel.text=null,this._verticalLabel.text=null),this.notifyChange("labels")}_updateLabelVisibility({visible:e,viewMode:t}){const i=this._segmentLabel,n=this._horizontalLabel,s=this._verticalLabel;if(i.visible=!1,n.visible=!1,s.visible=!1,e)switch(t){case 1:case 3:i.visible=!0;break;case 2:i.visible=!0,n.visible=!0,s.visible=!0}}get _labelsText(){if(this.destroyed)return null;const e=this.messages,t=this.analysisView.result;if(null==t||null==e)return null;const{directDistance:i,horizontalDistance:n,verticalDistance:s}=t,a=this.analysisView.unit,r=e=>({directDistance:"",horizontalDistance:"",verticalDistance:"",...e});switch(a){case"metric":return r({directDistance:i&&o.formatMetricLength(e,i),horizontalDistance:n&&o.formatMetricLength(e,n),verticalDistance:s&&o.formatMetricVerticalLength(e,s)});case"imperial":return r({directDistance:i&&o.formatImperialLength(e,i),horizontalDistance:n&&o.formatImperialLength(e,n),verticalDistance:s&&o.formatImperialVerticalLength(e,s)});default:return r({directDistance:i&&o.formatDecimal(e,i,a),horizontalDistance:n&&o.formatDecimal(e,n,a),verticalDistance:s&&o.formatDecimal(e,s,a)})}}_updateSegmentStripeLength(e){const t=this._segmentVisualElement;null!=e?(t.stripeLength=e,t.stripesEnabled=!0):t.stripesEnabled=!1}get _actualVisualElementsOrientation(){if(null!=this._triangleOrientationOverride)return this._triangleOrientationOverride;const e=this.visualElementOrientation;return 0===e?this.view.state.camera.aboveGround?1:2:e}_requiresGeodesicGuideAt(e){const t=this.view;if(!t?.state)return!1;const i=t.state.camera,n=t.renderCoordsHelper;if(!n)return!1;const s=i.computeScreenPixelSizeAt(e);return n.getAltitude(e)/s>=10}get _measurementArrowStripeLength(){const{result:e,unit:t}=this.analysisView;if(null==e)return null;let i=null;const n=e.directDistance;switch(t){case"metric":i=n&&c.toUnit(n,"meters");break;case"imperial":i=n&&c.toUnit(n,h.adaptiveImperialLengthUnit(n.value,n.unit));break;default:i=n&&c.toUnit(n,t)}return null==i?null:r.nextHighestPowerOfTen(i.value/30)*h.convertUnit(1,i.unit,"meters")}_updateMessageBundle(){this.loadingMessages=!0,D.fetchMessageBundle("esri/core/t9n/Units").then(e=>{this.messages=e}).finally(()=>{this.loadingMessages=!1})}get testData(){}},t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"_parameters",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"_triangleOrientationOverride",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"messages",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"view",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"analysis",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"analysisView",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"loadingMessages",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"visible",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"viewMode",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"actualVisualizedMeasurement",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"visualElementOrientation",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"triangleCollapseRatioThreshold",void 0),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"allowVisualElementsOrientationChange",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"labels",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"_labelsText",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"_actualVisualElementsOrientation",null),t.__decorate([m.property()],e.DirectLineMeasurementVisualization.prototype,"_measurementArrowStripeLength",null),e.DirectLineMeasurementVisualization=t.__decorate([p.subclass("esri.views.3d.analysis.DirectLineMeasurement.DirectLineMeasurementVisualization")],e.DirectLineMeasurementVisualization);const f=Math.cos(r.deg2rad(12)),C=d.createRenderScreenPointArray3(),O=d.createRenderScreenPointArray3(),x=d.createRenderScreenPointArray(),G=d.createRenderScreenPointArray(),H=d.createRenderScreenPointArray();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});