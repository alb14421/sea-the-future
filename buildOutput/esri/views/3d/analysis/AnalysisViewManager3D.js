// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","../../../chunks/tslib.es6","../../../core/Accessor","../../../core/asyncUtils","../../../core/Collection","../../../core/Error","../../../core/handleUtils","../../../core/has","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../core/scheduling","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/decorators/subclass"],function(e,s,t,i,a,n,r,o,l,c,d,w,h,u){"use strict";const y=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"})),_="analyses-owner-handles";let m=class extends t{constructor(e){super(e),this._allAnalysisViews=new a,this._creatingViewCount=0,this._items=new Map,this._scheduledUpdateHandle=null,this._attachedToViewResolver=V(),this._analysisModules={"area-measurement":{module:null},dimension:{module:null},"direct-line-measurement":{module:null},"elevation-profile":{module:null},"line-of-sight":{module:null},slice:{module:null},viewshed:{module:null},"volume-measurement":{module:null}},this._emitOnView=(e,s)=>this.view.emit(e,s)}destroy(){this._disconnectOwners(),this._attachedToViewResolver.reject(d.createAbortError("AnalysisViewManager was destroyed")),this._set("view",null)}attach(){this._connectOwners(),this._attachedToViewResolver.resolve()}detach(){this._disconnectOwners(),this._attachedToViewResolver.reject(d.createAbortError()),this._attachedToViewResolver=V()}get updating(){return!this.view.ready||0!==this._creatingViewCount||this._allAnalysisViews.some(e=>e.updating)}get testInfo(){}async whenAnalysisView(e){await this._attachedToViewResolver.promise;const s=this._items.get(e);if(null==s||1===s.state.list)throw new n("AnalysisViewManager:no-analysisview-for-analysis","The analysis has not been added to view.analyses",{analysis:e});return s.createAnalysisViewTask.promise}_connectOwners(){this.addHandles(this._connectAnalysesCollection(this.view.analyses),_)}_disconnectOwners(){this.removeHandles(_),this._update(),this._creatingViewCount=0}_connectAnalysesCollection(e){for(const s of e)this._addAnalysis(s);const s=e.on("after-add",e=>this._addAnalysis(e.item)),t=e.on("after-remove",e=>this._removeAnalysis(e.item));return r.makeHandle(()=>{s.remove(),t.remove();for(const s of e)this._removeAnalysis(s)})}_addAnalysis(e){const s=this._items.get(e);if(null==s){const s={state:{view:0,list:0},analysis:e,view:null,createAnalysisViewTask:null};this._items.set(e,s),s.createAnalysisViewTask=i.createTask(t=>this._createAnalysisViewPromise(s,t).then(s=>(this._emitOnView("analysis-view-create",{analysis:e,analysisView:s}),s),s=>{throw this._emitOnView("analysis-view-create-error",{analysis:e,error:s}),s}))}else s.state.list=0}_removeAnalysis(e){const s=this._items.get(e);null!=s?(s.state.list=1,this._scheduleUpdate()):l.getLogger(this).error("Trying to remove analysis which was not added")}_scheduleUpdate(){null==this._scheduledUpdateHandle&&(this._scheduledUpdateHandle=w.schedule(()=>this._update()))}_update(){this._scheduledUpdateHandle=c.removeMaybe(this._scheduledUpdateHandle),this._items.forEach(e=>{if(1!==e.state.list)return;const{analysis:s,view:t}=e;switch(this._items.delete(s),e.state.view){case 0:e.createAnalysisViewTask=c.abortMaybe(e.createAnalysisViewTask);break;case 1:null!=t&&(this._allAnalysisViews.remove(t),e.view=c.destroyMaybe(t),e.createAnalysisViewTask=null,this._emitOnView("analysis-view-destroy",{analysis:s,analysisView:t}))}})}async _createAnalysisViewPromise(e,s){const t=e.analysis,i=t.type,a=this._analysisModules[i];if(this._creatingViewCount+=1,null==a.module)try{a.module=await this._loadAnalysisModule(i)}catch(e){throw this._creatingViewCount-=1,e}if(d.isAborted(s))throw this._creatingViewCount-=1,d.createAbortError("AnalysisView creation aborted");const n=new a.module.default({analysis:t,view:this.view});let r=!0;d.onAbort(s,()=>{r&&this._destroyAnalysisView(t,n)});try{await n.when()}catch(e){throw r=!1,this._destroyAnalysisView(t,n),e}if(d.isAborted(s))throw d.createAbortError();return r=!1,e.view=n,e.state.view=1,this._allAnalysisViews.add(n),this._creatingViewCount-=1,n}_destroyAnalysisView(e,s){s.destroyed||(this._creatingViewCount-=1,s.destroy(),this._emitOnView("analysis-view-destroy",{analysis:e,analysisView:s}))}_loadAnalysisModule(s){switch(s){case"area-measurement":return new Promise((s,t)=>e(["./AreaMeasurementAnalysisView3D"],e=>s(y(e)),t));case"dimension":return new Promise((s,t)=>e(["./DimensionAnalysisView3D"],e=>s(y(e)),t));case"direct-line-measurement":return new Promise((s,t)=>e(["./DirectLineMeasurementAnalysisView3D"],e=>s(y(e)),t));case"elevation-profile":return new Promise((s,t)=>e(["./ElevationProfileAnalysisView3D"],e=>s(y(e)),t));case"line-of-sight":return new Promise((s,t)=>e(["./LineOfSightAnalysisView3D"],e=>s(y(e)),t));case"slice":return new Promise((s,t)=>e(["./SliceAnalysisView3D"],e=>s(y(e)),t));case"viewshed":return new Promise((s,t)=>e(["./ViewshedAnalysisView3D"],e=>s(y(e)),t));case"volume-measurement":return new Promise((s,t)=>e(["./VolumeMeasurementAnalysisView3D"],e=>s(y(e)),t))}}};function V(){const e=d.createResolver();return e.promise.catch(()=>{}),e}return s.__decorate([h.property()],m.prototype,"updating",null),s.__decorate([h.property({constructOnly:!0})],m.prototype,"view",void 0),s.__decorate([h.property()],m.prototype,"_allAnalysisViews",void 0),s.__decorate([h.property()],m.prototype,"_creatingViewCount",void 0),m=s.__decorate([u.subclass("esri.views.3d.analysis.AnalysisViewManager3D")],m),m});