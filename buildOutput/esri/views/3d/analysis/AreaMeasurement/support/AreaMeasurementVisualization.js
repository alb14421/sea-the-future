// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../chunks/tslib.es6","../../../../../intl","../../../../../core/Accessor","../../../../../core/colorUtils","../../../../../core/has","../../../../../core/mathUtils","../../../../../core/maybe","../../../../../core/quantityFormatUtils","../../../../../core/reactiveUtils","../../../../../core/unitUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/Logger","../../../../../core/RandomLCG","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/libs/gl-matrix-2/math/mat4","../../../../../core/libs/gl-matrix-2/factories/mat4f64","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","./utils","../../../interactive/visualElements/LabelVisualElement","../../../interactive/visualElements/LineVisualElement","../../../interactive/visualElements/MeasurementAreaVisualElement","../../../interactive/visualElements/support/Segment","../../../support/mathUtils","../../../webgl-engine/materials/lineStippleUtils","../../../../../intl/locale","../../../../../intl/messages"],function(e,t,i,s,r,a,n,o,l,c,h,d,m,p,u,g,_,v,y,L,b,w,S,M,f,V,A,C){"use strict";e.AreaMeasurementVisualization=class extends s{get _parameters(){const{accentColor:e,textColor:t}=this.view.effectiveTheme,i=r.unitRGBAFromColor(e),s=r.multiplyOpacityToUnitRGBA(e,.5),a=r.multiplyOpacityToUnitRGBA(r.getContrast(e),.5),n=r.getContrast(t,160);return{accentColor:i,transparentAccentColor:s,transparentContrastColor:a,intersectingLineColor:[1,.2,0,1],textColor:t,textBackgroundColor:r.multiplyOpacity(n,.6),textCalloutColor:r.multiplyOpacity(n,.5),pathLineWidth:3,perimeterLineWidth:2,projectionLineWidth:2,projectionLineStippleSize:5,labelDistance:25}}get visible(){return this.analysisViewData.visible}get _renderUnits(){const e=this.view.renderCoordsHelper.spatialReference;return h.lengthUnitFromSpatialReference(e)??"meters"}get testData(){}constructor(e){super(e),this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._origin=y.create(),this._originTransform=_.create(),this.messages=null,this.viewData=D,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:e,_parameters:t,view:i}=this;this._path=new w.LineVisualElement({view:i,attached:!0,width:t.pathLineWidth,polygonOffset:!0,renderOccluded:4,isDecoration:!0}),this._intersectedPath=new w.LineVisualElement({view:i,attached:!0,width:t.pathLineWidth,polygonOffset:!0,renderOccluded:4,isDecoration:!0}),this._perimeter=new w.LineVisualElement({view:i,attached:!0,width:t.perimeterLineWidth,polygonOffset:!0,renderOccluded:4,isDecoration:!0}),this._intersectedPerimeter=new w.LineVisualElement({view:i,attached:!0,width:t.perimeterLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:4,isDecoration:!0}),this._projectionLines=new w.LineVisualElement({view:i,attached:!0,width:t.projectionLineWidth,stipplePattern:V.createStipplePatternSimple(t.projectionLineStippleSize),polygonOffset:!0,renderOccluded:4,isDecoration:!0}),this._measurementArea=new S.MeasurementAreaVisualElement({view:i,attached:!0,isDecoration:!0});const s={attached:!0,view:i,isDecoration:!0};this._areaLabel=new b.LabelVisualElement({...s,fontSize:16}),this._perimeterLengthLabel=new b.LabelVisualElement({...s,fontSize:12}),this.addHandles([c.watch(()=>[e.mode,this.visible,e.unit,e.measurementData,e.stagedPoint],()=>this._update(),c.syncAndInitial),c.watch(()=>i.state?.camera,()=>this._updateLabels(),c.syncAndInitial),A.onLocaleChange(()=>this._updateMessageBundle()),c.watch(()=>this._parameters,({accentColor:e,transparentAccentColor:t,transparentContrastColor:i,textColor:s,textBackgroundColor:r,textCalloutColor:a})=>{const{_path:n,_intersectedPath:o,_perimeter:l,_projectionLines:c,_measurementArea:h,_areaLabel:d,_perimeterLengthLabel:m}=this;n.color=e,o.color=e,l.color=e,c.color=e,h.color1=t,h.color2=i,d.textColor=s,d.backgroundColor=r,d.calloutColor=a,m.textColor=s,m.backgroundColor=r,m.calloutColor=a},c.initial)]),this._updateMessageBundle()}destroy(){this._measurementArea=o.destroyMaybe(this._measurementArea),this._path=o.destroyMaybe(this._path),this._intersectedPath=o.destroyMaybe(this._intersectedPath),this._perimeter=o.destroyMaybe(this._perimeter),this._intersectedPerimeter=o.destroyMaybe(this._intersectedPerimeter),this._areaLabel=o.destroyMaybe(this._areaLabel),this._perimeterLengthLabel=o.destroyMaybe(this._perimeterLengthLabel),this._projectionLines=o.destroyMaybe(this._projectionLines),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:e},analysisViewData:t}=this;null!=e&&(this._updateViewData(e,t.path),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t){const i=e.validMeasurement,s="geodesic"===e.actualMeasurementMode,r=s?e.geodesicArea:e.area;let a=1;if(r){const e=L.toPreferredAreaUnit(r,this.analysisViewData.unit);a=n.nextHighestPowerOfTen(Math.sqrt(e.value)/Math.sqrt(300)),a*=Math.sqrt(h.convertUnit(1,e.unit,"square-meters")),a=h.convertUnit(a,"meters",this._renderUnits)}const o={validMeasurement:i,numVertices:e.numVertices,hasStagedVertex:e.hasStagedVertex,path:t,mode:e.actualMeasurementMode,positionsRender:e.positionsRender,positionsFittedWorld:e.positionsFittedWorld,positionsFittedRender:e.positionsFittedRender,intersectingSegments:s?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:s?e.geodesicTriangleIndices:e.triangleIndices,areaCentroid:s?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,perimeterLengthLabelSegmentIndex:0,area:s?e.geodesicArea:e.area,pathLength:s?e.geodesicPathLength:e.pathLength,perimeterLength:e.perimeterLength,checkerSize:a};this._set("viewData",o)}_updateOrigin(){const e=this.viewData;f.midpoint3d(e.positionsRender,this._origin),g.fromTranslation(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,i=this.view.renderCoordsHelper.spatialReference,s=t.mode,r=[],a=[],n=[],o=t.numVertices,l=t.validMeasurement?o:o-1;for(let c=0;c<l;++c){const l=t[e][c],h=t[e][(c+1)%o];let d=null;switch(s){case"euclidean":d=new M.EuclideanSegment(l,h);break;case"geodesic":d=new M.GeodesicSegment(l,h,i)}t.intersectingSegments.has(c)?n.push(d):a.push(d),r.push(d)}let c=null;return t.validMeasurement&&t.hasStagedVertex&&l>=2?c=r[r.length-2]:t.hasStagedVertex&&l>=1&&(c=r[r.length-1]),{all:r,nonIntersecting:a,intersecting:n,stagedSegment:c}}_updatePathSegments(){const{visible:e}=this,t=this._createSegments("positionsRender");this._path.setGeometryFromSegments(t.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=t.all}_updatePerimeterSegments(){const e=this.visible&&"euclidean"===this.viewData.mode&&this.viewData.path.numVertices>2,t=this._createSegments("positionsFittedRender");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsFittedWorld,position:e.positionsFittedRender,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,i=e.mode,s=e.numVertices;if(s>0&&e.validMeasurement&&"euclidean"===i){const i=[];for(let t=0;t<s;++t){const s=y.create();v.subtract(s,e.positionsRender[t],this._origin);const r=y.create();v.subtract(r,e.positionsFittedRender[t],this._origin),i.push([s,r])}this._projectionLines.geometry=i,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:e}=this,{area:t,path:i}=e;if(!i)return;const s=this.visible,r=this._areaLabel,a=this._perimeterLengthLabel,n=e.validMeasurement;r.visible=!0,a.visible=!0;let o=!1;const c=function(e,t,i){return e&&t&&l.formatDecimal(e,t,h.adaptiveAreaUnit(t.value,t.unit,i))}(this.messages,t,this.analysisViewData.unit);if(null!=c&&s&&(r.geometry={type:"point",point:e.areaCentroid},r.text=c,o=e.validMeasurement&&0===e.intersectingSegments.size),this._set("areaLabel",c),s&&n&&0===e.intersectingSegments.size){const t="geodesic"===e.mode,i=t?e.pathLength:e.perimeterLength,s=(d=this.messages,m=i,p=this.analysisViewData.unit,d&&m&&l.formatDecimal(d,m,L.preferredLengthUnit(m,p)));this._set("perimeterLengthLabel",s),a.distance=this._parameters.labelDistance,a.anchor="top",a.text=s;let r=!0;for(let i=0;i<e.numVertices;++i){const s=(e.perimeterLengthLabelSegmentIndex+i)%e.numVertices,n=t?this._pathSegments[s]:this._perimeterSegments[s];if(r=!0,a.geometry={type:"segment",segment:n,sampleLocation:"center"},!a.overlaps(this._areaLabel))break;r=!1}a.visible=r}else a.visible=!1;var d,m,p;r.visible=o}_updateMessageBundle(){this.loadingMessages=!0,C.fetchMessageBundle("esri/core/t9n/Units").then(e=>{this.messages=e,this.view&&this._update()}).finally(()=>{this.loadingMessages=!1})}},t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"_parameters",null),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"view",void 0),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"messages",void 0),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"analysis",void 0),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"viewData",void 0),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"analysisViewData",void 0),t.__decorate([d.property({readOnly:!0})],e.AreaMeasurementVisualization.prototype,"areaLabel",void 0),t.__decorate([d.property({readOnly:!0})],e.AreaMeasurementVisualization.prototype,"perimeterLengthLabel",void 0),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"loadingMessages",void 0),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"visible",null),t.__decorate([d.property()],e.AreaMeasurementVisualization.prototype,"_renderUnits",null),e.AreaMeasurementVisualization=t.__decorate([u.subclass("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],e.AreaMeasurementVisualization);const D={validMeasurement:!1,numVertices:0,hasStagedVertex:!1,path:null,mode:null,positionsRender:null,positionsFittedWorld:null,positionsFittedRender:null,intersectingSegments:null,triangleIndices:null,areaCentroid:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,area:null,pathLength:null,perimeterLength:null};Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});