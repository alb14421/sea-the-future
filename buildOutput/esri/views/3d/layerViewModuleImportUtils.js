// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../core/Error"],function(e,r,a){"use strict";const i=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"})),s=()=>new Promise((r,a)=>e(["./layers/TileLayerView3D"],e=>r(i(e)),a)),l=()=>new Promise((r,a)=>e(["./layers/ElevationLayerView3D"],e=>r(i(e)),a)),n={"base-dynamic":()=>new Promise((r,a)=>e(["./layers/BaseDynamicLayerView3D"],e=>r(i(e)),a)),"base-elevation":l,"base-tile":s,"bing-maps":s,"building-scene":()=>new Promise((r,a)=>e(["./layers/BuildingSceneLayerView3D"],e=>r(i(e)),a)),catalog:()=>new Promise((r,a)=>e(["./layers/CatalogLayerView3D"],e=>r(i(e)),a)),"catalog-dynamic-group":()=>new Promise((r,a)=>e(["./layers/CatalogDynamicGroupLayerView3D"],e=>r(i(e)),a)),"catalog-footprint":()=>new Promise((r,a)=>e(["./layers/CatalogFootprintLayerView3D"],e=>r(i(e)),a)),csv:()=>new Promise((r,a)=>e(["./layers/CSVLayerView3D"],e=>r(i(e)),a)),dimension:()=>new Promise((r,a)=>e(["./layers/DimensionLayerView3D"],e=>r(i(e)),a)),elevation:l,feature:()=>new Promise((r,a)=>e(["./layers/FeatureLayerView3D"],e=>r(i(e)),a)),"gaussian-splat":()=>new Promise((r,a)=>e(["./layers/GaussianSplatLayerView3D"],e=>r(i(e)),a)),geojson:()=>new Promise((r,a)=>e(["./layers/GeoJSONLayerView3D"],e=>r(i(e)),a)),graphics:()=>new Promise((r,a)=>e(["./layers/GraphicsLayerView3D"],e=>r(i(e)),a)),group:()=>new Promise((r,a)=>e(["./layers/GroupLayerView3D"],e=>r(i(e)),a)),imagery:()=>new Promise((r,a)=>e(["./layers/ImageryLayerView3D"],e=>r(i(e)),a)),"integrated-mesh":()=>new Promise((r,a)=>e(["./layers/IntegratedMeshLayerView3D"],e=>r(i(e)),a)),"integrated-mesh-3dtiles":()=>new Promise((r,a)=>e(["./layers/IntegratedMesh3DTilesLayerView3D"],e=>r(i(e)),a)),"line-of-sight":()=>new Promise((r,a)=>e(["./layers/LineOfSightLayerView3D"],e=>r(i(e)),a)),"map-image":()=>new Promise((r,a)=>e(["./layers/MapImageLayerView3D"],e=>r(i(e)),a)),media:()=>new Promise((r,a)=>e(["./layers/MediaLayerView3D"],e=>r(i(e)),a)),"ogc-feature":()=>new Promise((r,a)=>e(["./layers/OGCFeatureLayerView3D"],e=>r(i(e)),a)),"open-street-map":s,"oriented-imagery":()=>new Promise((r,a)=>e(["./layers/FeatureLayerView3D"],e=>r(i(e)),a)),"point-cloud":()=>new Promise((r,a)=>e(["./layers/PointCloudLayerView3D"],e=>r(i(e)),a)),viewshed:()=>new Promise((r,a)=>e(["./layers/ViewshedLayerView3D"],e=>r(i(e)),a)),voxel:()=>new Promise((r,a)=>e(["./layers/VoxelLayerView3D"],e=>r(i(e)),a)),route:()=>new Promise((r,a)=>e(["./layers/RouteLayerView3D"],e=>r(i(e)),a)),scene:r=>null==r.profile||"mesh-pyramids"===r.profile?new Promise((r,a)=>e(["./layers/SceneLayerView3D"],e=>r(i(e)),a)):new Promise((r,a)=>e(["./layers/SceneLayerGraphicsView3D"],e=>r(i(e)),a)),stream:()=>new Promise((r,a)=>e(["./layers/StreamLayerView3D"],e=>r(i(e)),a)),tile:s,"imagery-tile":()=>new Promise((r,a)=>e(["./layers/ImageryTileLayerView3D"],e=>r(i(e)),a)),"vector-tile":()=>new Promise((r,a)=>e(["./layers/VectorTileLayerView3D"],e=>r(i(e)),a)),wcs:()=>new Promise((r,a)=>e(["./layers/ImageryTileLayerView3D"],e=>r(i(e)),a)),"web-tile":s,wfs:()=>new Promise((r,a)=>e(["./layers/WFSLayerView3D"],e=>r(i(e)),a)),wms:()=>new Promise((r,a)=>e(["./layers/WMSLayerView3D"],e=>r(i(e)),a)),wmts:()=>new Promise((r,a)=>e(["./layers/WMTSLayerView3D"],e=>r(i(e)),a)),"geo-rss":null,kml:null,"knowledge-graph-sublayer":null,"knowledge-graph":null,"link-chart":null,"map-notes":null,parquet:null,"subtype-group":null,unknown:null,unsupported:null,video:null},o={hasLayerViewModule:e=>null!=n[e.type],importLayerView:e=>{const r=n[e.type];if(null==r)throw function(e){const r=e.declaredClass?e.declaredClass.slice(e.declaredClass.lastIndexOf(".")+1):"Unknown",i=r.replaceAll(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();return new a(`${i}:view-not-supported`,`${r} is not supported in 3D`)}(e);return r(e)}};r.layerView3DImporter=o,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});