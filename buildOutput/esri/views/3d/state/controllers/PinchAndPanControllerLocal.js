// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/screenUtils","../../../../core/Logger","../../../../core/has","../../../../core/RandomLCG","../../../../core/Error","../../../../core/accessorSupport/decorators/subclass","../../../../core/libs/gl-matrix-2/math/vec2","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../geometry/support/axisAngle","../../../../geometry/support/plane","../../camera/constraintUtils","../../camera/constraintUtils/ConstraintOptions","../../input/util","../../layers/VoxelWasm","./InteractiveController","./momentum/PanPlanarMomentumController","./momentum/RotationMomentumController","./momentum/ZoomPlanarMomentumController","../utils/navigationUtils","../../webgl/RenderCamera","../../../navigation/PanPlanarMomentumEstimator","../../../navigation/RotationMomentumEstimator","../../../navigation/ZoomMomentumEstimator"],function(t,e,i,n,a,o,r,s,m,l,c,h,p,u,_,d,g,C,P,v,b,M,w,S,y,f){"use strict";const z=c.fromValues(0,0,1);t.PinchAndPanControllerLocal=class extends C.InteractiveController{constructor(){super(...arguments),this._rotationValueSmooth=new d.ExponentialFalloff(.05),this._scalingValueSmooth=new d.ExponentialFalloff(.05),this._planeHorizontal=p.create(),this._planeVertical=p.create(),this._rotationMomentumEstimator=new y.RotationMomentumEstimator,this._panMomentumEstimator=new S.PanPlanarMomentumEstimator(300,12,.9),this._zoomMomentumEstimator=new f.ZoomMomentumEstimator,this._beginRadius=0,this._beginCenter=c.create(),this._beginAngle=0,this._tmpPoints=[],this._navMode=1,this._beginCenterScreen=i.createScreenPointArray(),this._tmpCentroid3d=c.create(),this._tmpCentroid2d=i.createScreenPointArray(),this._tmp2d=i.createScreenPointArray(),this._pointerCount=0,this._beginCamera=new w,this._constraintOptions=new _.ConstraintOptions(15,0,0,this._beginCamera)}begin(t){if(!this.running)return;const e=this.view.navigation.momentumEnabled;this._zoomMomentumEstimator.enabled=e,this._rotationMomentumEstimator.enabled=e,this._panMomentumEstimator.enabled=e,this._beginRadius=t.radius,this._pointerCount=t.pointers.size,this._beginAngle=t.angle,this._rotationValueSmooth.reset(),this._scalingValueSmooth.reset(),i.screenPointObjectToArray(t.center,this._beginCenterScreen),p.fromNormalAndOffset(z,0,this._planeHorizontal);const n=c.create(),a=this._intersectionHelper.intersectScreenFreePointFallback(this._beginCenterScreen,n,this.view.basemapTerrain.invisible?M.excludeTerrain:{}),o=c.create();l.negate(o,this.startCamera.viewForward);const r=c.create();l.copy(r,z);const s=l.dot(o,r);this._navMode=M.navigationMode(this.startCamera,this._beginCenterScreen,this.view.renderCoordsHelper,this.view.viewingMode);const m=M.getTiltScaleFactor(r,this.startCamera.viewForward,M.maxPanDistanceModifier)*Math.max(Math.abs(this.view.camera.position.z),M.minPinchAndPanCameraHeight);p.setOffsetFromPoint(this._planeHorizontal,this._planeHorizontal,n),this.startCamera.aboveGround||p.negate(this._planeHorizontal,this._planeHorizontal);const h=c.create(),u=c.create(),_=c.create();l.subtract(h,n,this.currentCamera.eye);const d=l.length(h);if(l.normalize(h,h),0===this._navMode){l.scale(r,r,s),l.subtract(p.getNormal(this._planeVertical),o,r),l.normalize(p.getNormal(this._planeVertical),p.getNormal(this._planeVertical)),p.setOffsetFromPoint(this._planeVertical,this._planeVertical,n);const e=this.view.stage.renderView.getMinimalDepthForArea(g.getVoxelWasm(this.view),this._beginCenterScreen[0],this._beginCenterScreen[1],this.view.state.camera,M.pivotSearchAreaSize);let i=null!=e?e:m;a&&(i=Math.min(i,d)),l.copy(_,l.add(u,this.currentCamera.eye,l.scale(u,h,i))),this._planeVertical[3]=-l.dot(p.getNormal(this._planeVertical),_),this._computePlanePoints(t.pointers,this._planeVertical,this.startCamera,this._tmpPoints),M.centroid(this._tmpPoints,this._beginCenter)}else{const e=a?d:m;l.copy(_,l.add(u,this.currentCamera.eye,l.scale(u,h,e))),this._planeHorizontal[3]=-l.dot(p.getNormal(this._planeHorizontal),_),this._computePlanePoints(t.pointers,this._planeHorizontal,this.startCamera,this._tmpPoints),M.centroid(this._tmpPoints,this._beginCenter)}this._beginCamera.copyFrom(this.startCamera)}update(t){if(!this.running)return;this.currentCamera.copyFrom(this.startCamera);const e=t.pointers.size>1,n=1===this._navMode?this._planeHorizontal:this._planeVertical,a=this._beginCenter;if(e){const e=this._beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this._scalingValueSmooth.gain=i,this._scalingValueSmooth.update(e),M.applyZoomToPoint(this.currentCamera,a,this._scalingValueSmooth.value,this.view.state.constraints.minimumPoiDistance),this._zoomMomentumEstimator.add(this._scalingValueSmooth.value,.001*t.timestamp),this._constraintOptions.interactionType=1,this._constraintOptions.interactionFactor=u.pixelDistanceToInteractionFactor(Math.abs(t.radius-this._beginRadius)),u.applyAll(this.view,this.currentCamera,this._constraintOptions)}if(this._computePlanePoints(t.pointers,n,this.currentCamera,this._tmpPoints),M.centroid(this._tmpPoints,this._tmpCentroid3d),i.screenPointObjectToArray(t.center,this._tmpCentroid2d),M.applyPanPlanar(this.currentCamera,a,this._tmpCentroid3d),this._panMomentumEstimator.add(this._tmpCentroid2d,this._tmpCentroid3d,.001*t.timestamp),this._constraintOptions.interactionType=4,this._constraintOptions.interactionFactor=u.pixelDistanceToInteractionFactor(m.distance(this._beginCenterScreen,this._tmpCentroid2d)),u.applyAll(this.view,this.currentCamera,this._constraintOptions),e){const e=a,i=this._rotationValueSmooth.value,n=i+M.normalizeRotationDelta(t.angle-i),o=.00125*Math.min(Math.max(t.radius,40),120);this._rotationValueSmooth.gain=o,this._rotationValueSmooth.update(n);const r=this._rotationValueSmooth.value-this._beginAngle;this._rotationMomentumEstimator.add(r,.001*t.timestamp);const s=p.getNormal(this._planeHorizontal);M.applyRotation(this.currentCamera,e,h.wrapAxisAngle(s,r)),this._constraintOptions.interactionType=2,this._constraintOptions.interactionFactor=u.pixelDistanceToInteractionFactor(Math.abs(t.radius*r)),u.applyAll(this.view,this.currentCamera,this._constraintOptions)}this.commitCamera()}end(t){t.pointers.size===this._pointerCount&&this.update(t),this.finishController();const e=this._zoomMomentumEstimator.evaluateMomentum();if(e)return new b.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this._beginCenter});const i=this._rotationMomentumEstimator.evaluateMomentum();if(i)return new v.RotationMomentumController({view:this.view,momentum:i,center:this._beginCenter,axis:p.getNormal(this._planeHorizontal)});const n=this._panMomentumEstimator.evaluateMomentum();return n?new P.PanPlanarMomentumController({view:this.view,momentum:n}):null}_computePlanePoints(t,e,i,n){n.length=t.size;const a=this._tmp2d;let o=0;return t.forEach(t=>{a[0]=t.x,a[1]=t.y,void 0===n[o]&&(n[o]=c.create()),M.intersectPlaneFromScreenPointAtEye(e,i,a,n[o]),o+=1}),n}get _intersectionHelper(){return this.view.sceneIntersectionHelper}},t.PinchAndPanControllerLocal=e.__decorate([s.subclass("esri.views.3d.state.controllers.PinchAndPanControllerLocal")],t.PinchAndPanControllerLocal),Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});