// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/vec32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../geometry/support/frustum"],function(t,i,e,s){"use strict";class r{get planes(){return this.frustum}get points(){return this._points}get mutablePoints(){return this._points}get direction(){return this._direction}get origin(){return this._origin}constructor(t){this.renderCoordsHelper=t,this.frustum=s.create(),this._points=s.createPoints(),this.lines=new Array(12),this._origin=e.create(),this._direction=e.create(),this._altitude=null;for(let t=0;t<12;t++)this.lines[t]={origin:null,direction:e.create(),endpoint:null}}update(t){s.fromMatrix(t.viewMatrix,t.projectionMatrix,this.frustum,this._points),i.copy(this._origin,t.eye),i.copy(this._direction,t.viewForward),this._altitude=this.renderCoordsHelper.getAltitude(this._origin),this._updateLines()}updatePoints(t){for(let e=0;e<this._points.length;e++)i.copy(this._points[e],t[e]);s.computePlanes(this.frustum,this._points),this._updateLines()}get altitude(){return this._altitude}intersectsSphere(t){return s.intersectsSphere(this.frustum,t)}intersectsRay(t){return s.intersectsRay(this.frustum,t)}intersectsLineSegment(t,i){return s.intersectsLineSegment(this.frustum,t,i)}intersectsPoint(t){return s.intersectsPoint(this.frustum,t)}_updateLines(){const t=this._points;for(let i=0;i<4;i++){const e=i+4;n(this.lines[i],t[i],t[e]),n(this.lines[i+4],t[i],3===i?t[0]:t[i+1]),n(this.lines[i+8],t[e],3===i?t[4]:t[e+1])}}static{this.planePointIndices=s.planePointIndices}static{this.nearFarLineIndices=[[0,4],[1,5],[2,6],[3,7]]}}function n(t,e,s){t.origin=e,t.endpoint=s,i.direction(t.direction,e,s)}t.Frustum=r,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});