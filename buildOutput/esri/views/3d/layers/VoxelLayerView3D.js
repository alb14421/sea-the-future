// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../chunks/tslib.es6","../../../core/Error","../../../core/Logger","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../chunks/vec32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../geometry/SpatialReference","../../../geometry/projection/projectVectorToVector","../../../geometry/support/aaBoundingBox","../../../geometry/support/spatialReferenceUtils","./LayerView3D","./VoxelGraphic","./VoxelWasm","./support/LayerViewPerformanceInfo","./support/PopupSceneLayerView","../../layers/LayerView","../../support/layerViewUtils"],function(e,s,t,a,i,o,r,l,n,h,c,d,u,y,m,p,V,w,g,_,b){"use strict";const W=h.create(),S=h.create();let v=class extends(g.PopupSceneLayerView(m.LayerView3D(_))){constructor(){super(...arguments),this._suspendedHandle=null,this._usedMemory=0,this._futureMemory=0,this.type="voxel-3d",this.slicePlaneEnabled=!1,this._wasmLayerId=-1,this.ignoresMemoryFactor=!0,this._dbgFlags=new Set}get baseUrl(){return this.layer.parsedUrl?.path??""}get wasmLayerId(){return this._wasmLayerId}initialize(){if(this._dbgFlags.add(3),"local"!==this.view.viewingMode)throw new s("voxel:unsupported-viewingMode","Voxel layers support local viewingMode only.",{});if(!this.view.stage.renderView.renderingContext.capabilities.colorBufferFloat?.textureFloat)throw new s("voxel:missing-color-buffer-float","Voxel layers require the WebGL2 extension EXT_color_buffer_float",{});const e=this.layer.spatialReference;if(!y.equals(e,this.view.spatialReference))throw b.spatialReferenceIncompatibleError("voxel layer",e.wkid,this.view.spatialReference.wkid);const t=this.layer.currentVariableId,i=this.layer.getVolume(t),o=this.layer.getVariable(t);if(null!=i&&null!=o){const e=i.dimensions[0],s=i.dimensions[1],t=i.zDimension;if(t>1){const a=i.dimensions[t],r=e.size*s.size*a.size;let l=1;switch(o.renderingFormat.type){case"Int16":case"UInt16":l=2;break;case"Int32":case"UInt32":case"Float32":l=4}this._futureMemory=l*r}}const r=V.addLayerViewToWasm(this).then(e=>{this._wasmLayerId=e,this._suspendedHandle=a.watch(()=>this.suspended,e=>{const s=V.getVoxelWasm(this.view);s&&s.setEnabled(this,!e)},a.initial),this.addHandles([a.watch(()=>this.layer.renderMode,e=>this._pushRenderModeToWasm(e)),a.watch(()=>this.layer.currentVariableId,e=>this._pushCurrentVariableIdToWasm(e)),a.watch(()=>this.layer.getSections(),e=>this._pushSectionsToWasm(e)),a.watch(()=>this.layer.getVariableStyles(),e=>this._pushVariableStylesToWasm(e)),a.watch(()=>this.layer.getVolumeStyles(),e=>this._pushVolumeStylesToWasm(e)),a.watch(()=>this.layer.enableDynamicSections,e=>this._pushEnableDynamicSectionsToWasm(e)),a.watch(()=>this.layer.enableIsosurfaces,e=>this._pushEnableIsosurfacesToWasm(e)),a.watch(()=>this.layer.enableSections,e=>this._pushEnableSectionsToWasm(e)),a.watch(()=>this.layer.enableSlices,e=>this._pushEnableSlicesToWasm(e)),a.watch(()=>[this.layer.timeOffset,this.layer.timeExtent,this.layer.useViewTime],()=>this._updateLayerTimeProperties()),a.watch(()=>this.slicePlaneEnabled,e=>this._pushAnalysisSliceToWasm(e,this.view.slice.plane)),a.watch(()=>this.view.slice.plane,e=>this._pushAnalysisSliceToWasm(this.slicePlaneEnabled,e))])}).catch(e=>{if(V.removeLayerViewFromWasm(this),this._wasmLayerId=-1,-1===e)throw new s("voxel:addLayer-failure","The voxel layer description was invalid.",{});if(-2===e)throw new s("voxel:addLayer-failure","The voxel layer web assembly module failed to download.",{})});this.addResolvingPromise(r)}destroy(){V.removeLayerViewFromWasm(this),this._suspendedHandle&&(this._suspendedHandle.remove(),this._suspendedHandle=null)}isUpdating(){const e=V.getVoxelWasm(this.view);return!(this._wasmLayerId<0||null==e)&&e.isUpdating(this._wasmLayerId)}updatingFlagChanged(){this.notifyChange("updating")}get usedMemory(){return this._usedMemory}get unloadedMemory(){return this._futureMemory}get performanceInfo(){return new w.LayerViewPerformanceInfo(this.usedMemory)}get visibleAtCurrentScale(){return b.isInEffectiveScaleRange(this.layer.effectiveScaleRange,this.view.scale)}whenGraphicBounds(e,s){const t=e.attributes["Voxel.WorldPosition"];if(t){const e=u.empty(),s=JSON.parse(t);if(d.projectVectorToVector(s,this.view.renderSpatialReference,S,this.view.spatialReference||c.WGS84))return u.expandWithVec3(e,S),Promise.resolve({boundingBox:e,screenSpaceObjects:[]})}return Promise.reject()}async whenGraphicAttributes(e,s){const t=V.getVoxelWasm(this.view);if(!t)return e;const a=[];for(const s of e)this._isValidVoxelGraphic(s)&&a.push(s);return a.length&&await t.getOtherFieldPopupValues(a,s),e}_isValidVoxelGraphic(e){return e instanceof p.VoxelGraphic}setUsedMemory(e){this._usedMemory=e,this._futureMemory=0}captureFrustum(){const e=V.getVoxelWasm(this.view);e?.captureFrustum()}toggleFullVolumeExtentDraw(){const e=V.getVoxelWasm(this.view);e?.toggleFullVolumeExtentDraw(this)}getLayerTimes(){const e=V.getVoxelWasm(this.view);return e?.getLayerTimes(this)??[]}getCurrentLayerTimeIndex(){const e=V.getVoxelWasm(this.view);return e?.getCurrentLayerTimeIndex(this)??0}dropQueryRenderTarget(){const e=V.getVoxelWasm(this.view);e?.dropQueryRenderTarget()}_pushRenderModeToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushRenderModeToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s?.setRenderMode(this,e)||this._dbg(3,"VoxelLayerView3D._pushRenderModeToWasm() failed!")}_pushSectionsToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushSectionsToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s?.setStaticSections(this,e)||this._dbg(3,"VoxelLayerView3D._pushSectionsToWasm() failed!")}_pushCurrentVariableIdToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushCurrentVariableIdToWasm() called!, "+(s?"have WASM":"don't have WASM!!!")),s?.setCurrentVariable(this,e)||this._dbg(3,"VoxelLayerView3D._pushCurrentVariableIdToWasm() failed!")}_pushVariableStylesToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushVariableStylesToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s?.setVariableStyles(this,e)||this._dbg(3,"VoxelLayerView3D._pushVariableStylesToWasm() failed!")}_accountForEnableSlices(e,s){const t=null!=s?s:this.layer.enableSlices;for(let s=0;s<e.length;++s){const a=e[s];for(const e of a.slices)e.enabled=e.enabled&&t}}_pushVolumeStylesToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushVolumeStylesToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s&&(this._accountForEnableSlices(e,null),s.setVolumeStyles(this,e)||this._dbg(3,"VoxelLayerView3D._pushVolumeStylesToWasm() failed!"))}_pushAnalysisSliceToWasm(e,s){const t=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushAnalysisSliceToWasm() called, "+(t?"have WASM":"don't have WASM!!!"));let a=!1;if(t){if(s){const i=s.origin;n.cross(W,s.basis1,s.basis2),n.normalize(W,W),a=t.setAnalysisSlice(this,e,i,W)}else n.set(W,0,0,1),a=t.setAnalysisSlice(this,!1,W,W);a||this._dbg(3,"VoxelLayerView3D._pushAnalysisSliceToWasm() failed!")}}_updateLayerTimeProperties(){const e=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._updateLayerTimeProperties() called, "+(e?"have WASM":"don't have WASM!!!")),e&&e.updateLayerTimeProperties(this)}_pushEnableDynamicSectionsToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s?.setEnableDynamicSections(this,e)||this._dbg(3,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() failed!")}_pushEnableSlicesToWasm(e){const s=V.getVoxelWasm(this.view);if(this._dbg(2,"VoxelLayerView3D._pushEnableSlicesToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s){const t=this.layer.getVolumeStyles();this._accountForEnableSlices(t,e),s.setVolumeStyles(this,t)||this._dbg(3,"VoxelLayerView3D._pushEnableSlicesToWasm() failed!")}}_pushEnableIsosurfacesToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s?.setEnableIsosurfaces(this,e)||this._dbg(3,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() failed!")}_pushEnableSectionsToWasm(e){const s=V.getVoxelWasm(this.view);this._dbg(2,"VoxelLayerView3D._pushEnableSectionsToWasm() called, "+(s?"have WASM":"don't have WASM!!!")),s?.setEnableSections(this,e)||this._dbg(3,"VoxelLayerView3D._pushEnableSectionsToWasm() failed!")}_dbg(e,s){this._dbgFlags.has(e)&&(3===e?t.getLogger(this).error(s):t.getLogger(this).warn(s))}};return e.__decorate([i.property()],v.prototype,"layer",void 0),e.__decorate([i.property()],v.prototype,"baseUrl",null),e.__decorate([i.property({type:Boolean})],v.prototype,"slicePlaneEnabled",void 0),e.__decorate([i.property({readOnly:!0})],v.prototype,"visibleAtCurrentScale",null),v=e.__decorate([l.subclass("esri.views.3d.layers.VoxelLayerView3D")],v),v});