// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../../core/asyncUtils","../../../../core/has","../../../../core/lang","../../../../core/promiseUtils","../../../../core/urlUtils","./I3SBinaryReader","./I3SMaterialUtil"],function(e,t,r,i,s,n,o){"use strict";class a{constructor(e,t,r,i,s,n){if(this._streamDataController=t,this._logger=r,this._defaultGeometrySchema=i,this._requiredAttributes=s,this._options=n,this._logLayer=e,this._layerUrl=e.parsedUrl.path,this._geometryDefinitions=e.geometryDefinitions,e.materialDefinitions){const t=e.textureSetDefinitions;this._materialAndTextures=e.materialDefinitions.map(r=>o.getMaterialAndTextures(t,r,"integrated-mesh"===e.type))}}_load(e,t,r){return this._streamDataController.request(e,t,r)}_loadAttribute(e,t,r){const i=`${this._layerUrl}/nodes/${e.resources.attributes}/attributes/${t.key}/0`;return this._load(i,1,r).then(e=>n.readBinaryAttribute(t,e))}async loadAttributes(e,t,r){const s=await Promise.allSettled(t.map(t=>this._loadAttribute(e,t.attributeStorageInfo,r))),n={};for(let r=0;r<t.length;++r){const o=s[r],a=t[r];if("fulfilled"===o.status){const e=o.value;n[a.name]=e}else{const t=o.reason;i.throwIfAbortError(t),this._logger.error("#loadAttributes",this._logLayer,`Failed to load attributeData for '${a.name}' on node '${e.id}'`,t)}}return n}async loadNodeData(i,s){const a=null!=this._requiredAttributes&&i.resources.attributes?e.result(this.loadAttributes(i,this._requiredAttributes,s)):null,{bufferDefinition:u,bufferIndex:l}=function(e,r){const i={bufferDefinition:null,bufferIndex:0},s=r.resources.geometryDefinition;if(null==e||null==s||s<0)return i;const n=s>=0?e[s].geometryBuffers:null;if(null==n)return i;for(let e=0;e<n.length;e++){const r=n[e];if(null==r.compressedAttributes)i.bufferIndex=e,i.bufferDefinition=n[e];else if("draco"===r.compressedAttributes.encoding&&!t("disable-feature:i3s-draco"))return i.bufferIndex=e,i.bufferDefinition=r,i}return i}(this._geometryDefinitions,i),f=!!i.resources.geometry,d=f?e.result(this._loadGeometry(i.resources.geometry,l,s)):null,c=i.resources.hasSharedResource?await this._loadShared(i,s):null,h=i.resources.materialDefinition,g=this._materialAndTextures&&null!=h&&h>=0?this._materialAndTextures[h]:null!=c?o.getMaterialAndTexturesFromShared(c):null,m=g?.material,_=g?.textures??[],y=`${i.id}`,b=!f&&this._options.loadFeatureData,D=b?await this._loadFeatureData(y,s):null,x=b?function(e){if(!e)return null;for(const t of e.featureData){const e=t.geometries;if(null!=e)for(const r of e)return{featureIds:[t.id],featureDataPosition:t.position,geometries:[r]}}return null}(D):function(e){return{featureIds:[],geometries:[{type:"ArrayBufferView",params:{material:e}}],featureDataPosition:[0,0,0]}}(m),A=null==x?function(e){if(!e)return null;const t=new Array;for(const r of e.featureData)null!=r.position&&t.push({featureIds:[r.id],featureDataPosition:r.position,geometries:[]});return t}(D):null,p=_.length>0?e.result(this.loadTextures(i,_,s)):null;let $=null,T=null;if(d){$=e.assertResult(await d);const t=function(e,t){if(!e||!t?.materialDefinitions)return e;const i=Object.keys(t.materialDefinitions)[0];return!t.materialDefinitions[i].params.vertexRegions&&e.vertexAttributes.region&&delete(e=r.clone(e)).vertexAttributes.region,e}(this._defaultGeometrySchema,c);T=n.createGeometryDescriptor(u,t)}const w=p?e.assertResult(await p):null,I=a?e.assertResult(await a):{},U=I?{attributeData:I,loadedAttributes:this._requiredAttributes}:null;if(null!=x)return{geometryData:x,attributeDataInfo:U,geometryBuffer:$,geometryDescriptor:T,requiredTextures:_,textureData:w};if(null!=A)return{pointData:A,attributeDataInfo:U,geometryBuffer:$,geometryDescriptor:T,requiredTextures:_,textureData:w};throw new Error}static _addAbsoluteHrefTexture(e,t){const r=e.textureDefinitions;if(null!=r)for(const e of Object.keys(r))for(const i of r[e].images)Array.isArray(i.href)?i.hrefConcat=i.href.map(e=>s.makeAbsolute(e,t)):i.hrefConcat=s.makeAbsolute(i.href,t)}static _fixTextureEncodings(e){const t=e.textureDefinitions;if(null!=t)for(const e in t){const r=t[e];if(Array.isArray(r.encoding))for(let e=0;e<r.encoding.length;e++){const t=r.encoding[e];t.startsWith("data:")&&(r.encoding[e]=t.slice(5))}else{const e=r.encoding;e.startsWith("data:")&&(r.encoding=e.slice(5))}}}async _loadShared(e,t){if(null==e.resources.geometry)return{};const r=`${this._layerUrl}/nodes/${e.resources.geometry}/shared`,i=await this._load(r,0,t);return a._fixTextureEncodings(i),a._addAbsoluteHrefTexture(i,r),i}_loadTexture(e,t,r,i,s){return 4===i||1===i||2===i?this._load(e,1,s).then(e=>({id:t,usage:r,data:e,encoding:i})):this._load(e,2,s).then(e=>({id:t,usage:r,data:e,encoding:i}))}loadTextures(e,t,r){const i=this._options.textureUsageMask;return Promise.all(t.map(t=>{if(0===(t.usage&i))return null;const s=o.selectEncoding(t.encodings,this._options.textureEncodings);if(null==s)return this._logger.error("#loadTextures",this._logLayer,`No known encoding for texture found on node ${e.id}`),Promise.reject();const n=e.resources.texture||e.id,a=`${this._layerUrl}/nodes/${n}/textures/${s.name}`;return this._loadTexture(a,t.id,t.usage,s.encoding,r)}))}_loadFeatureData(e,t){const r=`${this._layerUrl}/nodes/${e}/features/0`;return this._load(r,0,t)}_loadGeometry(e,t,r){const i=`${this._layerUrl}/nodes/${e}/geometries/${t}`;return this._load(i,1,r)}}return a});