// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../../../chunks/tslib.es6","../../../../request","../../../../core/Accessor","../../../../core/arrayUtils","../../../../core/asyncUtils","../../../../core/Collection","../../../../core/handleUtils","../../../../core/has","../../../../core/Logger","../../../../core/maybe","../../../../core/memoryEstimations","../../../../core/promiseUtils","../../../../core/ReactiveSet","../../../../core/reactiveUtils","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/decorators/subclass","../../../../geometry/support/spatialReferenceUtils","../../../../intl/number","../../../../layers/support/featureQueryAll","../../../../support/requestUtils"],function(e,t,r,s,i,o,a,n,d,c,h,l,u,y,p,g,m,_,b,f,v,O){"use strict";t.I3SOverrides=class extends i{constructor(e){super(e),this._warnMaximumChangedObjectsExceeded=!1,this._maximumNumberOfEditOVerrides=A,this._definitionExpressionDirty=!0,this._interactiveEditingSessions=new n,this.geometryOverrides=new n,this._clientGeometryCache=new Map,this._attributeChangedObjectIds=new p,this._geometryChangedObjectIds=new p,this._pendingFetchChangedObjectIds=null,this._pendingFetchAbortController=new AbortController,this._applyGeometryOverridesTask=null,this._featureIdLocks=new Map}initialize(){this._memCache=new C(this.memoryController.newCache(`i3s-attribute-overrides-${this.layer.uid}`)),this.addHandles(g.watch(()=>this.layer.definitionExpression,async()=>{this._definitionExpressionDirty=!0,this._pendingFetchChangedObjectIds||(this._applyGeometryOverridesTask=l.abortMaybe(this._applyGeometryOverridesTask),this._applyGeometryOverridesTask=a.createTask(e=>this._queryAndAddGeometryOverrides(e)),await this._applyGeometryOverridesTask.promise)},g.sync)),this._pendingFetchChangedObjectIds=this._fetchChangedObjectIds(this._pendingFetchAbortController?.signal),this._pendingFetchChangedObjectIds.finally(()=>{this._pendingFetchAbortController=null,this._pendingFetchChangedObjectIds=null})}destroy(){this._set("layer",null),this._memCache=l.destroyMaybe(this._memCache),this._pendingFetchAbortController=l.abortMaybe(this._pendingFetchAbortController),this._pendingFetchChangedObjectIds=null,this._featureIdLocks.clear()}get is3DOFL(){return null!=this._associatedLayer?.infoFor3D}get sortedGeometryChangedObjectIds(){return this.is3DOFL?[...this._geometryChangedObjectIds].sort((e,t)=>e-t):[]}get _associatedLayer(){return null==this.layer?null:this.layer.associatedLayer}get hasGeometryChanges(){return this._geometryChangedObjectIds.size>0}get updating(){return!!this.is3DOFL&&!!(this._pendingFetchChangedObjectIds||this._applyGeometryOverridesTask&&!this._applyGeometryOverridesTask.finished)}get isEmpty(){return null==this._pendingFetchChangedObjectIds&&0===this._attributeChangedObjectIds.size&&0===this._geometryChangedObjectIds.size}featureHasGeometryChanges(e){return this._geometryChangedObjectIds.has(e)}featureHasAttributeChanges(e){return this._attributeChangedObjectIds.has(e)}createInteractiveEditSession(e){this._attributeChangedObjectIds.add(e);const t=this._interactiveEditingSessions,r=new I(e,()=>{t.remove(r)});return t.unshift(r),r}async applyAttributeOverrides(e,t,r,s=[]){if(this._pendingFetchChangedObjectIds&&await y.whenOrAbort(this._pendingFetchChangedObjectIds,r),null==t)return;const{attributeData:i,loadedAttributes:o}=t;if(null==o||null==i||0===this._attributeChangedObjectIds.size)return;const a=new Set;for(const e of o)a.add(e.index);for(const t of s)a.has(t.index)||(o.push(t),i[t.name]=new Array(e.length));const n=await this._lockFeatureIds(e);try{const t={attributeData:i,loadedAttributes:o},s=this._getOverridesFromCache(e,t,this._attributeChangedObjectIds),{objectIds:a,fieldNames:n}=s;if(0===a.length||0===n.length)return;const d=await this._queryAttributeOverridesFromAssociatedLayer(a,n,r);if(null==d)return;this._processOverridesFromAssociatedLayer(e,d,n,t)}finally{n.remove()}}updateGeometry(e,t){this._geometryChangedObjectIds.add(e);const r=this._clientGeometryCache.get(e);if(null!=r&&(this.geometryOverrides.remove(r),this._clientGeometryCache.delete(e)),null!=t){const r={oid:e,mesh:t};this.geometryOverrides.add(r),this._clientGeometryCache.set(e,r)}}updateAttributeValue(e,t,r){this._attributeChangedObjectIds.add(e),this._cacheAttributeValue(e,t,r)}featureAdded(e){this.is3DOFL&&this._geometryChangedObjectIds.add(e),this._attributeChangedObjectIds.add(e)}_cacheAttributeValue(e,t,r){this._memCache.put(e,t,r)}_getOverridesFromCache(e,{loadedAttributes:t,attributeData:r},s){const i=new Array;for(const e of t)i[e.index]=r[e.name];const o=new Set,a=new Set;for(let r=0;r<e.length;r++){const n=e[r];if(s.has(n))for(const e of t){const t=this._attributeFromCache(n,e.index);void 0===t?(o.add(n),a.add(e.name)):i[e.index][r]=t}}return{objectIds:Array.from(o),fieldNames:Array.from(a)}}_attributeFromCache(e,t){const r=this._fromInteractiveEditingSession(e,t);return void 0!==r?r:this._memCache.get(e,t)}_fromInteractiveEditingSession(e,t){if(null!=this._interactiveEditingSessions)for(const r of this._interactiveEditingSessions){if(r.objectId!==e)continue;const s=r.getAttribute(t);if(void 0!==s)return s}}async _queryAttributeOverridesFromAssociatedLayer(e,t,r){if(0===e.length)return null;this._logWarningIfMaximumObjectsExceeded();const{associatedLayer:s}=this.layer;if(null==s)return null;const i=s.createQuery(),{objectIdField:o}=s,a=[o,...t];i.where=this.layer.definitionExpression||"1=1",i.returnGeometry=!1,i.outFields=a,i.cacheHint=!0;const n=await this._executeBatchQuery(s,e,i,r),d=[];for(const e of n)if(e.ok)for(const t of e.value.features)d.push(t);return d}async _queryGeometryOverridesFromAssociatedLayer(t,r){if(0===t.length||!this.is3DOFL)return null;const s=this.layer.associatedLayer,i=s.infoFor3D,{spatialReference:o}=s,{state:{viewingMode:a},spatialReference:n}=this.view,d=1===a,c=o.isGeographic;if(d&&!c)return h.getLogger(this).warn("unsupported-pcs-edits-in-global-view",this.layer.title,F(o,n,this.view.viewingMode,0)),null;if(!d&&c)return h.getLogger(this).warn("unsupported-gcs-edits-in-local-view",this.layer.title,F(o,n,this.view.viewingMode,0)),null;if(!(b.equals(o,n)||d&&n.isWebMercator&&o.isWGS84))return h.getLogger(this).warn("unsupported-mismatched-spatial-reference-edits",this.layer.title,F(o,n,this.view.viewingMode,1)),null;this._logWarningIfMaximumObjectsExceeded();const{objectIdField:l,globalIdField:u}=s,y=[l,...null!=u?[u]:[]],p=s.createQuery();p.where=this.layer.definitionExpression||"1=1",p.returnGeometry=!0,p.outFields=y,p.cacheHint=!0,p.returnZ=s.hasZ,p.returnM=s.hasM;const{assetMapFromAssetMapsJSON:g,extractMesh:m}=await new Promise((t,r)=>e(["../../../../rest/support/meshFeatureSet"],t,r)),_=await this._executeBatchQuery(s,t,p,r),f=[];for(const e of _){if(!e.ok)continue;const t=e.value,{assetMaps:r,features:s,globalIdFieldName:a}=t;if(null==r)continue;const n=g(i,r);for(const e of s){const t=m(e,a,o,i,n),r=e;null!=t?(r.geometry=t,f.push(r)):r.geometry=null}}return f}_logWarningIfMaximumObjectsExceeded(){if(!this._warnMaximumChangedObjectsExceeded)return;this._warnMaximumChangedObjectsExceeded=!1;let e=`The number of edited objects that are not yet cached in the scene service exceeds the maximum limit. Attribute changes will only be available for the first ${f.formatNumber(this._maximumNumberOfEditOVerrides)} objects. Please consider re-caching the scene service`;const t=this.layer.portalItem;e+=t?.loaded?` (${t.portal.url}/home/item.html?id=${t.id}#settings)`:` (${this.layer.parsedUrl.path})`,h.getLogger(this).warn("#queryOverrides()",this.layer.title,`${e}.`)}async _executeBatchQuery(e,t,r,s){if(0===t.length)return[];const i=v.getMaximumQuerySize(e);t=[...t].sort((e,t)=>e-t);const n=o.splitIntoChunks(t,i).map(t=>{const i=r.clone();return i.objectIds=t,a.resultOrAbort(v.queryAllJSON(e,i,{signal:s}))});return Promise.all(n)}_processOverridesFromAssociatedLayer(e,t,r,{loadedAttributes:s,attributeData:i}){const o=this._associatedLayer;if(null==o)return;const a=o.objectIdField,n=r.map(t=>(t in i||(i[t]=new Array(e.length)),i[t])),d=new Map(s.map(e=>[e.name,e.index])),c=r.map(e=>d.get(e)),h=new Map(Array.from(e,(e,t)=>[e,t]));for(const e of t){const t=e.attributes[a];for(let s=0;s<r.length;s++){const i=c[s],o=h.get(t),a=e.attributes[r[s]];n[s][o]=a,this._cacheAttributeValue(t,i,a)}}}async _fetchChangedObjectIds(e){const t=this.layer;await t.load({signal:e}),this._geometryChangedObjectIds.clear(),this._attributeChangedObjectIds.clear();const{associatedLayer:r}=t;if(null==r||!r.capabilities?.operations?.supportsChangeTracking)return;const i=this._getFetchChangedObjectIdsServerGen();if(null==i)return;const o=r.layerId,n=this.is3DOFL,d={...r.customParameters,f:"json",returnIdsOnly:!0,layers:`[${o}]`,returnUpdates:!0,returnDeletes:n,returnInserts:n,layerServerGens:JSON.stringify([{id:o,serverGen:i}])};if(null!=r.apiKey&&(d.token=r.apiKey),n){const e=r.infoFor3D;d.fieldsToCompare=JSON.stringify({fields:[...Object.values(e.transformFieldRoles),e.sourceHashField]})}const c=await a.result(s(`${r.url}/extractChanges`,{method:"post",query:d,timeout:j,signal:e}));if(!c.ok&&O.isTimeoutError(c.error)){const e=this.layer.title;h.getLogger(this).warn("extractChanges:timeout",e,`${e} could not obtain edited features that are not cached in the scene service. Display of features may not be up to date with the latest edits. Consider re-caching the scene service.`)}if(c.ok&&1===c.value.data?.edits?.length){const t=c.value.data.edits[0],r=t?.objectIds,s=t?.fieldUpdates,i=r?.adds??[],o=r?.updates??[],a=r?.deletes??[],d=[...i,...o,...a],h=n?[...i,...s??o,...a]:[],l=Math.min(this._maximumNumberOfEditOVerrides,d.length);l<d.length&&(this._warnMaximumChangedObjectsExceeded=!0);const u=d.sort((e,t)=>e-t);for(let e=0;e<l;++e){const t=u[e];this._attributeChangedObjectIds.add(t)}for(const e of h)this._geometryChangedObjectIds.add(e);for(;this._definitionExpressionDirty;)await this._queryAndAddGeometryOverrides(e)}}async _queryAndAddGeometryOverrides(e){this._definitionExpressionDirty=!1;const t=this.layer,{associatedLayer:r}=t;if(null!=r&&r.capabilities?.operations?.supportsChangeTracking&&this.is3DOFL&&this._geometryChangedObjectIds.size>0){const t=await this._queryGeometryOverridesFromAssociatedLayer(Array.from(this._geometryChangedObjectIds),e);if(null!=t)for(const e of t)null!=e.geometry&&this.updateGeometry(e.attributes[r.objectIdField],e.geometry)}}_getFetchChangedObjectIdsServerGen(){const e=this.layer;if(null!=e.serviceUpdateTimeStamp?.lastUpdate)return e.serviceUpdateTimeStamp.lastUpdate;const t=e.associatedLayer;return null!=t?.serverGens?.minServerGen?t.serverGens.minServerGen:null}async _lockFeatureIds(e){const t=this._featureIdLocks;let r=!0;for(;r;){const s=new Array;for(const r of e){const e=t.get(r);e&&s.push(e)}0===s.length?r=!1:await Promise.all(s)}const s=y.createResolver(),i=s.promise;for(const r of e)t.set(r,i);return d.makeHandle(()=>{for(const r of e)t.delete(r);s.resolve()})}get test(){}},r.__decorate([m.property({constructOnly:!0})],t.I3SOverrides.prototype,"view",void 0),r.__decorate([m.property({constructOnly:!0})],t.I3SOverrides.prototype,"layer",void 0),r.__decorate([m.property({readOnly:!0})],t.I3SOverrides.prototype,"is3DOFL",null),r.__decorate([m.property()],t.I3SOverrides.prototype,"_interactiveEditingSessions",void 0),r.__decorate([m.property({readOnly:!0})],t.I3SOverrides.prototype,"sortedGeometryChangedObjectIds",null),r.__decorate([m.property({readOnly:!0})],t.I3SOverrides.prototype,"geometryOverrides",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"_clientGeometryCache",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"_associatedLayer",null),r.__decorate([m.property({constructOnly:!0})],t.I3SOverrides.prototype,"memoryController",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"_attributeChangedObjectIds",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"_geometryChangedObjectIds",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"hasGeometryChanges",null),r.__decorate([m.property()],t.I3SOverrides.prototype,"_pendingFetchChangedObjectIds",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"_pendingFetchAbortController",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"_applyGeometryOverridesTask",void 0),r.__decorate([m.property()],t.I3SOverrides.prototype,"updating",null),r.__decorate([m.property()],t.I3SOverrides.prototype,"isEmpty",null),t.I3SOverrides=r.__decorate([_.subclass("esri.views.3d.layers.i3s.I3SOverrides")],t.I3SOverrides);class I{constructor(e,t){this.objectId=e,this._remove=t,this._updates=new Map,this._isActive=!0}getAttribute(e){return this._updates.get(e)}setAttribute(e,t){this.isActive&&this._updates.set(e,t)}remove(){this.isActive&&(this._isActive=!1,this._remove())}get isActive(){return this._isActive}}class C{constructor(e){this._cache=e}destroy(){this._cache.destroy()}put(e,t,r){this._cache.put(this._getKey(e,t),new w(r))}get(e,t){return this._cache.get(this._getKey(e,t))?.value}_getKey(e,t){return`${e}-${t}`}}class w{constructor(e){this.value=e,this.cachedMemory="string"==typeof e?u.estimateStringMemory(e):u.estimateNumberMemory}}const j=1e4,A=5e4;function F(e,t,r,s){return`Displaying the edits of a SceneLayer with a${0===s?e.isGeographic?" geographic ":" projected ":" "}spatial reference (wkid:${e.wkid}) in ${r} viewing mode${1===s?` with spatial reference (wkid:${t.wkid}) `:" "}is not supported. No geometry edits will be displayed for this layer.\nPlease consider re-caching the scene service or changing the ${0===s?"viewing mode":"view spatial reference"} to display edits.`}Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});