// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/Error","../../../../core/has","../../../../core/maybe","../../../../core/promiseUtils","../../../../core/screenUtils","../../../../core/libs/gl-matrix-2/factories/vec2f64","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../../symbols/callouts/calloutUtils","./ElevationAligners","./elevationAlignmentUtils","./ElevationContext","./focusAreaStyle","./Graphics3DObject3DGraphicLayer","./Graphics3DObjectMetadata","./Graphics3DSymbolLayer","./graphicUtils","./LabelParameters","./placementUtils","./pointUtils","../../webgl-engine/lib/FontMetrics","../../webgl-engine/lib/GeometryUtil","../../webgl-engine/lib/TextRenderParameters","../../webgl-engine/lib/TextTextureFactory","../../webgl-engine/materials/HUDMaterial"],function(e,t,n,r,s,o,i,a,l,c,h,u,m,d,f,p,g,y,v,b,x,O,P,S,w,E){"use strict";const G=a.freeze(0,0,1);class L extends g.Graphics3DSymbolLayer{constructor(e,t,n,r){super(e,t,n,r),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const e=y.validateSymbolLayerSize(this.symbolLayer.size);if(e)throw new t("graphics3dtextsymbollayer:invalid-size",e)}await this._createTextRenderParameters()}async _createTextRenderParameters(){const e=this._context.graphicsCoreOwner.view.state.rasterPixelRatio;this._textRenderParameters=await S.TextRenderParameters.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy()}createGraphics3DGraphic(e){const t=e.graphic,n=x.placePointOnGeometry(t.geometry);if(null==n)return this.logger.warn(`unsupported geometry type for text symbol: ${t.geometry.type}`),null;const r=this.view.focusAreasView?.containsGeometry(n)??!0,s=this.symbolLayer.text;if(null==s||""===s)return null;const o=c.hasCalloutSupport(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol.verticalOffset:null;if(null!=o&&!c.textSymbolLayerSupportsVerticalOffset(this.symbolLayer))return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`),null;const{verticalAlignment:i}=this.symbolLayer,a=new v.LabelPlacement(o);b.verticalScreenOffsetFromAlignment(i,a.screenOffset);const l=new v.LabelParameters(a,this.symbolLayer.horizontalAlignment,b.verticalPlacementFromAlignment(i));return l.isFocused=r??l.isFocused,this._createAs3DShape(t,n,s,l)}updateFocus(e,t){t.forEach(t=>{const n=x.placePointOnGeometry(t.graphic.geometry);if(null==n)return void this.logger.warn(`unsupported geometry type for text symbol: ${t.graphic.geometry.type}`);const r=this.view.focusAreasView?.containsGeometry(n)??!0;t.layers.forEach(n=>{n?.graphics3DSymbolLayer===this&&n.stageObject&&n.stageObject.geometries.some(e=>e.material.parameters.isFocused!==r)&&e(t)})})}createLabel(e,t,n,r,s){const o=e.graphic,i=x.placePointOnGeometry(o.geometry);if(null==i)return this.logger.warn(`unsupported geometry type for label: ${o.geometry.type}`),null;const a=this.view.focusAreasView?.containsGeometry(i)??!0,l=t.text;return!l||/^\s+$/.test(l)?null:(t.isFocused=a??t.isFocused,this._createAs3DShape(o,i,l,t,n,r,s))}setGraphicElevationContext(e,t=new m.ElevationContext,n=0){return super.setGraphicElevationContext(e,t),t.addOffsetRenderUnits(n),t}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return A(e,t,(e,t)=>{this.updateGraphicElevationContext(t,e)}),1}slicePlaneEnabledChanged(e,t){return A(e,t,e=>{for(const t of e.stageObject.geometries)t.material.setParameters({hasSlicePlane:this._context.slicePlaneEnabled})}),!0}physicalBasedRenderingChanged(){return!0}get pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){const{elevationContext:n,metadata:r}=t;this.setGraphicElevationContext(e,n,r?.elevationOffset??0),t.needsElevationUpdates=u.needsElevationUpdates2D(n.mode)||"absolute-height"===n.mode}updateGeometry(e,t){if(this.draped||!this._validateGeometry(t))return!1;const{elevationContext:n,stageObject:r}=e;if(n.mode!==this.getGeometryElevationMode(t))return!1;const s=x.placePointOnGeometry(t);if(!s)return!1;const o=x.updateStageObjectGeometry(r,this._context,s,n);if(null==o)return!1;const i=x.getLocalOriginForPoint(this._context,s);return r.geometries[0].localOrigin===i&&(e.alignedSampledElevation=o,x.extendPointGraphicElevationContext(e,s,this._context.elevationProvider),!0)}_defaultElevationInfoNoZ(){return C}_createAs3DShape(e,t,a,c,g,y=null,v=()=>c.placement.elevationOffset){const S=this.setGraphicElevationContext(e,new m.ElevationContext,c.placement.elevationOffset),L=e.uid;let A=null,C=null;if(null==y){const e=b.textRenderAlignmentFromHorizontalPlacement(c.horizontalPlacement);A=new w(a,e,this._textRenderParameters);let t=null;if(null!=this._context.sharedResources.textures){C=this._context.sharedResources.textures.fromData(A.key,()=>A.create()),C.texture.events.on("unloaded",()=>t=r.releaseMaybe(t));const e=this._context.stage.renderView.textures.acquire(C.texture.id);if(null==e||s.isPromiseLike(e))return C.release(),null;t=e}}const _=!n("disable-feature:non-occluded-hud"),D=function(e,t){if("baseline"===t.verticalPlacement){const n=b.horizontalPlacementToAnchorX[t.horizontalPlacement],r=null!=e?e.baselineAnchorY:0;return i.fromValues(n,r)}const n=b.anchorFromPlacements(t.horizontalPlacement,t.verticalPlacement);return b.namedAnchorToHUDMaterialAnchorPos[n]}(A,c),z={occlusionTest:!_,occludedFragmentFade:_,horizonCullingEnabled:_&&this._context.spherical,screenOffset:c.placement.screenOffset,anchorPosition:D,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:c.placement.centerOffsetUnits,depthEnabled:!1,drawAsLabel:!0,isLabel:!0,isFocused:c.isFocused};if("polyline"===e.geometry?.type&&(z.shaderPolygonOffset=1e-4),y?z.textureId=y.id:C&&(z.textureId=C.texture.id),null!=c.placement.verticalOffset){const{screenLength:e,minWorldLength:t,maxWorldLength:n}=c.placement.verticalOffset;z.verticalOffset={screenLength:o.pt2px(e),minWorldLength:t||0,maxWorldLength:null!=n?n:1/0}}const F=this._context.graphicsCoreOwner.view.focusAreasView?.polygons.length,U={screenOffset:z.screenOffset,anchorPosition:D,centerOffsetUnits:z.centerOffsetUnits,verticalOffset:z.verticalOffset,shaderPolygonOffset:z.shaderPolygonOffset,occlusionTest:z.occlusionTest,isFocused:c.isFocused,focusStyle:this.view.map?.focusAreas.style??"none"};if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources,n=O.getFontMetrics(this._textRenderParameters);z.screenSizePerspective=t.overrideFontHeight(n.maxHeight),z.screenSizePerspectiveAlignment=e,U.fontHeight=n.maxHeight}z.hasSlicePlane=this._context.slicePlaneEnabled;const R=this._context.spherical,T=g?JSON.stringify(U):"";let j=g?.get(T);if(null==j){if(!c.isFocused&&F){const e=this.view.map?.focusAreas.style;z.color=d.focusAreaHUDColor(z.color,e),z.outlineColor=d.focusAreaHUDColor(z.outlineColor,e)}j=new E.HUDMaterial(z,R),g?.set(T,j)}const H=c.placement.translation,V=A?i.fromValues(A.displayWidth,A.displayHeight):i.ZEROS,M=c.placement.centerOffset,W=G,$=y?l.fromValues(0,0,0,0):null,I=P.createPointGeometry(j,{normal:W,position:H,size:V,centerOffsetAndDistance:M,uvi:$}),k=x.createStageObject(this._context,t,I,S,L);if(null==k)return null;const N=new f.Graphics3DObject3DGraphicLayer(this,k.object,C,(t,n,r,s,o,i)=>{const a=v()||c.placement.elevationOffset,l=this.setGraphicElevationContext(e,n,a);return h.perObjectElevationAligner(t,l,r,s,o,i)},S);N.alignedSampledElevation=k.sampledElevation,N.needsElevationUpdates=u.needsElevationUpdates2D(S.mode)||"absolute-height"===S.mode,N.getScreenSize=(e=i.create())=>(e[0]=A?A.displayWidth:c.displaySize[0],e[1]=A?A.displayHeight:c.displaySize[1],e);const Z=new p.Graphics3DObjectMetadata(c.placement.elevationOffset,a);return N.metadata=Z,x.extendPointGraphicElevationContext(N,t,this._context.elevationProvider),N}}function A(e,t,n){e?.forEach(e=>{const r=t(e);null!=r&&n(r,e.graphic)})}const C={mode:"relative-to-ground",offset:0};e.Graphics3DTextSymbolLayer=L,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});