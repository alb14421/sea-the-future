// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","../../../chunks/tslib.es6","../../../core/Error","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../layers/support/ElevationTileData","../../../layers/support/LercDecoder","./ElevationLayerView3DModifications","./LayerView3D","./TiledLayerView3D","../terrain/TerrainConst","../terrain/terrainUtils","../../layers/LayerView"],function(e,i,t,o,r,a,s,n,l,c,d,y,p,h,f,u,g,m){"use strict";let w=class extends(f.TiledLayerView3D(h.LayerView3D(m))){constructor(){super(...arguments),this.type="elevation-3d",this.modifications=new p.ElevationLayerView3DModifications}get tileInfo(){return this.layer.tileInfo}initialize(){const e=this.view,i=e.map?.allLayers,o=i&&i.includes(this.layer),r=e.map?.ground?.layers,a=r&&r.includes(this.layer);if(o&&!a){const e=new t("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(e))}this._lercDecoder=y.acquireDecoder(e.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=r.releaseMaybe(this._lercDecoder)}async fetchElevationTile(e,i){const t=await this._fetchTileData(e.lij,i);if(!a.isAborted(i))return t&&await this.modifications.apply(t,e,i.signal),t}async _fetchTileData(e,i){const t=this.layer;if(g.useFetchTileForLayer(t)){const r=await t.fetchTile(e[0],e[1],e[2],{noDataValue:u.elevationNoDataValue,signal:i.signal});return a.isAborted(i)?void o.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):r}const r=this.getTileUrl(e),s=await i.requester.request(r,1,i),n=await this._lercDecoder.decode(s,{noDataValue:u.elevationNoDataValue},i.signal);if(n)return new d.ElevationTileData(n);throw new Error("LERC decoding failed")}async setModifications(i){if(this.modifications.modifications.length=0,!i||0===i.length)return;this._simplifyOperatorPromise??=new Promise((i,t)=>e(["../../../geometry/operators/simplifyOperator"],i,t));const t=await this._simplifyOperatorPromise;for(const e of i){const i=e.geometry;if("polygon"===i?.type){const r=t.execute(i);if("polygon"===r?.type){const i=new p.ElevationLayerView3DModification(e.type,r);this.modifications.modifications.push(i)}else o.getLogger(this).warn("Failed to simplify modification polygon")}else o.getLogger(this).warn("Invalid modification added to elevation layer: "+(i?`non polygon geometry ${i.type}`:"no geometry"))}}};return i.__decorate([s.property()],w.prototype,"layer",void 0),i.__decorate([s.property()],w.prototype,"tileInfo",null),i.__decorate([s.property()],w.prototype,"modifications",void 0),w=i.__decorate([c.subclass("esri.views.3d.layers.ElevationLayerView3D")],w),w});