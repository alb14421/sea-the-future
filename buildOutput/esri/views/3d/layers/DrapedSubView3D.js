// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../chunks/tslib.es6","../../../core/asyncUtils","../../../core/handleUtils","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../geometry/Extent","../../../geometry/support/aaBoundingRect","./SubView3D","./support/overlayImageUtils","../support/debugFlags","../webgl-engine/lib/RenderGeometry","../webgl-engine/lib/Texture","../webgl-engine/materials/ImageMaterial"],function(e,t,r,i,a,s,n,o,l,h,d,c,u,g,m,p,y,x,w,_){"use strict";e.default=class extends m{constructor(e){super(e),this.drapeSourceType=0,this.updatePolicy=1,this.type="draped",this.maximumDataResolution=null,this._images=new Array,this._extents=new Array,this._overlays=new Array,this._drapeSourceRenderer=null}initialize(){this._drapeSourceRenderer=this.view.basemapTerrain.overlayManager.registerGeometryDrapeSource(this),this.addHandles(i.makeHandle(()=>this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this)))}setDrapingExtent(e,t){this._spatialReference=t,e.forEach((e,t)=>{this._overlays[t]=e,this._updateImageExtent(e,t)})}destroy(){this.clear()}get spatialReference(){return this._spatialReference}_updateImageExtent(e,t){const r=this._clippedExtent(e.extent,f);if(null==r)return;const i=p.computeImageExportSize(e.extent,r,e.resolution);let s=e.pixelRatio*this.view.state.pixelRatio;const{layer:o}=this;if("imageMaxWidth"in o&&null!=o.imageMaxWidth||"imageMaxHeight"in o&&null!=o.imageMaxHeight){const e=o.imageMaxWidth,t=o.imageMaxHeight;if(i.width>e){const t=e/i.width;i.height=Math.floor(i.height*t),i.width=e,s*=t}if(i.height>t){const e=t/i.height;i.width=Math.floor(i.width*e),i.height=t,s*=e}}const l=this._extents[t];l&&g.equals(l.extent,r)&&this._imageSizeEquals(r,l.imageSize,i)||(this._extents[t]={extent:g.create(r),imageSize:i,pixelRatio:s},this.suspended||this._fetch(t).catch(e=>{n.isAbortError(e)||a.getLogger(this).error(e)}))}clear(){for(let e=0;e<this._images.length;e++)this._clearImage(e)}async doRefresh(e){const t=[];for(let r=0;r<this._extents.length;r++)this._extents[r]&&t.push(this._fetch(r,e));await Promise.allSettled(t)}async processResult(e,t,r){(t instanceof HTMLImageElement||t instanceof HTMLCanvasElement)&&(e.image=t)}findExtentInfoAt(e){for(const t of this._extents){const r=t.extent;if(new u(r[0],r[1],r[2],r[3],this._spatialReference).contains(e))return t}return null}async redraw(e,t){await r.forEach(this._images,async(r,i)=>{r&&(await e(r,t),await this._createStageObjects(i,r.image,t))})}_imageSizeEquals(e,t,r){if(!this.maximumDataResolution)return!1;const i=g.width(e)/this.maximumDataResolution.x,a=g.height(e)/this.maximumDataResolution.y,s=i/t.width,n=a/t.height,o=i/r.width,l=a/r.height,h=Math.abs(s-o),d=Math.abs(n-l),c=y.debugFlags.TESTS_DISABLE_OPTIMIZATIONS?0:1.5;return h<=c&&d<=c}async _fetch(e,t){if(this.suspended)return;const r=this._extents[e],i=r.extent;this._images[e]||(this._images[e]={texture:null,material:null,renderGeometry:null,loadingPromise:null,loadingAbortController:null,image:null,pixelData:null,renderExtent:g.create(i)});const o=this._images[e];o.loadingAbortController=s.abortMaybe(o.loadingAbortController);const l=new u(i[0],i[1],i[2],i[3],this._spatialReference);if(0===l.width||0===l.height)return void this._clearImage(e);const h=new AbortController;o.loadingAbortController=h,n.onAbort(t,()=>h.abort());const d=h.signal,c=this._waitFetchReady(d).then(async()=>{n.throwIfAborted(d);const t={requestAsImageElement:!0,pixelRatio:this._overlays[e].pixelRatio,...this.layerView.getFetchOptions(),signal:d},{height:i,width:a}=r.imageSize;return this.layer?"imagery"===this.layer.type?this.layer.internalFetchImage(l,a,i,t):this.layer.fetchImage(l,a,i,t):null}).then(e=>{if(n.isAborted(d))throw a.getLogger(this).warnOnce("A call to fetchImage resolved even though the request was aborted. fetchImage should not resolve if options.signal.aborted is true."),n.createAbortError();return this.processResult(o,e)}).then(()=>{g.copy(o.renderExtent,i)});o.loadingPromise=c,await this.updatingHandles.addPromise(c.then(async()=>{n.throwIfAborted(d),await this._createStageObjects(e,o.image,d)}).catch(e=>{throw e&&!n.isAbortError(e)&&a.getLogger(this).error(e),e}).finally(()=>{c===o.loadingPromise&&(o.loadingPromise=null,o.loadingAbortController=null)}))}_clearImage(e){const t=this._images[e];if(t){null!=t.renderGeometry&&(this._drapeSourceRenderer.removeGeometries([t.renderGeometry],1),t.renderGeometry=null);const e=this.view.stage,r=t.texture;r?.unload(),e.removeTexture(r),t.texture=null,t.material=null,t.loadingAbortController=s.abortMaybe(t.loadingAbortController),t.loadingPromise=null,t.image=null,t.pixelData=null}}async _createStageObjects(e,t,i){const a=this.view.stage,s=this._images[e],o=()=>{s.texture?.unload(),a.removeTexture(s.texture),s.texture=null,s.renderGeometry&&(this._drapeSourceRenderer.removeGeometries([s.renderGeometry],1),s.renderGeometry=null)};if(t){const l=new w.Texture(t,{width:t.width,height:t.height,preMultiplyAlpha:!0,wrap:{s:33071,t:33071}});if(await r.result(this._images[0===e?1:0].loadingPromise),n.throwIfAborted(i),o(),await a.schedule(()=>l.load(a.renderView.renderingContext),i),!l.loaded)return void o();let h;if(a.addTexture(l),s.texture=l,s.material??=new _.ImageMaterial({draped:!0,texture:l}),s.material.setParameters({texture:l}),0===e)h=p.createGeometryForExtent(s.material,s.renderExtent);else{const e=this._images[0].renderExtent;if(!e)return void o();h=p.createOuterImageGeometry(s.material,e,s.renderExtent)}s.renderGeometry=new x.RenderGeometry(h),s.renderGeometry.localOrigin=this._overlays[e].renderLocalOrigin,this._drapeSourceRenderer.addGeometries([s.renderGeometry],1)}else o(),s.material=null}_clippedExtent(e,t){if("local"!==this.view.viewingMode)return g.copy(t,e);const r=this.view.basemapTerrain;return r.ready?g.intersection(e,r.extent,t):g.copy(t,e)}async _waitFetchReady(e){await o.whenOnce(()=>this.view.stationary,e),n.throwIfAborted(e)}get usedMemory(){return this._images.reduce((e,t)=>e+(t.texture?.usedMemory??0),0)}},t.__decorate([l.property()],e.default.prototype,"type",void 0),e.default=t.__decorate([c.subclass("esri.views.3d.layers.DrapedSubView3D")],e.default);const f=g.create();return e.default});