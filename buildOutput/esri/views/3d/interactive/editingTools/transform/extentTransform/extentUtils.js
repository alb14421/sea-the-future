// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../core/reactiveUtils","../../../../../../core/libs/gl-matrix-2/math/vec2","../../../../../../chunks/vec32","../../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../../../chunks/boundedPlane","../../../../../../geometry/support/plane","../../../../../../geometry/support/vectorStacks","../../geometryUtils","../../manipulatedObjectUtils","../../../../layers/graphics/elevationAlignmentUtils","../../../../layers/graphics/ElevationContext","../../../../../interactive/editGeometry/support/editPlaneUtils","../../../../../support/extentUtils"],function(s,t,e,a,i,o,n,r,d,c,l,p,u,b){"use strict";const g=i.create(),h=i.create(),m=i.create(),v=i.create();s.TransformBounds=class{constructor(s,e){this._tool=s,this.mapBounds=o.create(),this.mapBoundsStart=o.create(),this.displayBounds=o.create(),s.addHandles(t.on(()=>s.object,"modified-externally",()=>this._resetMapBounds(),{onListenerAdd:()=>this._resetMapBounds()})),this._onDisplayBoundsChanged=e}get displayBoundsMargin(){const{view:s,object:t}=this._tool,e=c.manipulatedObjectGeometry(t),a=s.pointsOfInterest?.centerOnSurfaceFrequent.location??e?.extent?.center;return a?10*s.pixelSizeAt(a):0}backupMapBounds(){o.copy(this.mapBounds,this.mapBoundsStart)}updateDisplayBounds(){this._calculateDisplayBounds(),this._onDisplayBoundsChanged?.()}updateMapBoundsFromOperation(s){u.apply(s,this.mapBounds),this.updateDisplayBounds()}updateMapBoundsFromOperationInverse(s){u.applyInverse(s,this.mapBounds),this.updateDisplayBounds()}_resetMapBounds(){this._calculateMapBounds(),this.updateDisplayBounds()}_calculateMapBounds(){const{view:s,attachmentOrigin:t,object:a}=this._tool,i=a.operations?.data;if(!i)return;const o=i.geometry;this.spatialReference=o.spatialReference;const n=d.mainAxis(o);e.scale(n,n,-1);const r=80*(t?s.pixelSizeAt(t,o.spatialReference):0),c=i.coordinateHelper.hasZ()&&"on-the-ground"!==a.elevationInfo.mode;u.calculateOrientedBounds(n,i,r,this.mapBounds,c)}_calculateDisplayBounds(){const{view:s,attachmentOrigin:t}=this._tool,e=t?.z??l.evaluateElevationAlignmentAtPoint(this.mapBounds.origin,s.elevationProvider,p.ElevationContext.fromElevationInfo(this._tool.object.elevationInfo),s.renderCoordsHelper);!function(s,t,e,i,d=0,c){c||(c=o.create());const l=r.sv3d.get();a.add(l,s.origin,s.basis1),a.add(l,l,s.basis2),e.toRenderCoords(l,i,l);const p=r.sv3d.get();a.add(p,s.origin,s.basis1),a.subtract(p,p,s.basis2),e.toRenderCoords(p,i,p);const u=r.sv3d.get();a.subtract(u,s.origin,s.basis1),a.subtract(u,u,s.basis2),e.toRenderCoords(u,i,u);const b=r.sv3d.get();a.subtract(b,s.origin,s.basis1),a.add(b,b,s.basis2),e.toRenderCoords(b,i,b),a.add(c.origin,l,p),a.add(c.origin,c.origin,u),a.add(c.origin,c.origin,b),a.scale(c.origin,c.origin,.25),a.subtract(l,l,c.origin),a.subtract(p,p,c.origin),a.subtract(u,u,c.origin),a.subtract(b,b,c.origin);const g=a.lerp(r.sv3d.get(),l,p,.5),h=a.lerp(r.sv3d.get(),u,b,.5);a.scale(h,h,-1),a.lerp(c.basis1,g,h,.5);const m=a.lerp(r.sv3d.get(),l,b,.5),v=a.lerp(r.sv3d.get(),p,u,.5);a.scale(v,v,-1),a.lerp(c.basis2,m,v,.5);const B=a.cross(r.sv3d.get(),c.basis1,c.basis2);a.cross(c.basis2,B,c.basis1),a.normalize(c.basis1,c.basis1);const y=Math.max(Math.abs(a.dot(c.basis1,l)),Math.abs(a.dot(c.basis1,p)),Math.abs(a.dot(c.basis1,u)),Math.abs(a.dot(c.basis1,b)));a.normalize(c.basis2,c.basis2);const f=Math.max(Math.abs(a.dot(c.basis2,l)),Math.abs(a.dot(c.basis2,p)),Math.abs(a.dot(c.basis2,u)),Math.abs(a.dot(c.basis2,b)));a.scale(c.basis1,c.basis1,y+d),a.scale(c.basis2,c.basis2,f+d);const M=a.copy(r.sv3d.get(),s.origin);M[2]=t,e.toRenderCoords(M,i,M),n.fromPositionAndNormal(M,B,c.plane),n.projectPoint(c.plane,c.origin,c.origin),o.updateUnboundedPlane(c)}(this.mapBounds,e??0,s.renderCoordsHelper,this.spatialReference,this.displayBoundsMargin,this.displayBounds)}},s.mapPlaneAutoSize2D=function(s,t,e,i){return a.subtract(v,a.subtract(v,s.origin,s.basis1),s.basis2),a.scaleAndAdd(m,v,s.basis1,2),a.scaleAndAdd(h,m,s.basis2,2),a.scaleAndAdd(g,v,s.basis2,2),v[2]=m[2]=h[2]=g[2]=t,b.autoSize2D({topLeft:g,topRight:h,bottomRight:m,bottomLeft:v,spatialReference:e,automaticLengthMeasurementUtils:i})},Object.defineProperty(s,Symbol.toStringTag,{value:"Module"})});