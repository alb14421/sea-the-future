// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../chunks/tslib.es6","../../../../../core/has","../../../../../core/maybe","../../../../../core/memoize","../../../../../core/promiseUtils","../../../../../core/reactiveUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/Logger","../../../../../core/RandomLCG","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/support/UpdatingHandles","../../../../../geometry/Point","../../../../../layers/graphics/hydratedFeatures","../../../analysis/support/measurementUtils","../../SnappingVisualizer3D","../../editingTools/dragEventPipeline3D","./AreaMeasurement3DView","../support/PickRequest","../../../../interactive/AnalysisToolBase","../../../../interactive/coordinateHelper","../../../../interactive/dragEventPipeline","../../../../interactive/keybindings","../../../../interactive/ManipulatorCollection","../../../../interactive/editGeometry/EditGeometry","../../../../interactive/editGeometry/EditGeometryOperations","../../../../interactive/snapping/SnappingContext","../../../../interactive/snapping/SnappingDragPipelineStep","../../../../interactive/snapping/SnappingManagerPool","../../../../interactive/snapping/SnappingOperation","../../../../interactive/snapping/snappingUtils","../../../../support/screenUtils"],function(e,t,i,a,n,s,o,r,p,l,d,g,h,u,c,m,y,_,v,w,P,S,V,f,D,M,x,b,k,O,C,H){"use strict";e.default=class extends w.AnalysisToolBase{constructor(e){super(e),this._updatingHandles=new g.UpdatingHandles,this.polygonState="initial",this.removeIncompleteOnCancel=!1,this.manipulators=new f.ManipulatorCollection,this._getSnappingContext=n.memoize(e=>new x.SnappingContext({elevationInfo:{mode:"absolute-height",offset:0},pointer:e,editGeometryOperations:new M.EditGeometryOperations(new D.EditGeometry("point",P.createCoordinateHelper(!0,!1,this.view.spatialReference)),this.view.state.viewingMode),visualizer:new m.SnappingVisualizer3D}))}initialize(){const{view:e,analysisViewData:t,manipulators:i,visible:a}=this;this.measurementView=new _({view:e,analysisViewData:t,toolState:this,manipulators:i,visible:a});const n=k.acquire(e);this._snappingManagerResult=n,this.addHandles(n),this._snappingOperation=new O.SnappingOperation({view:e}),this._updatingHandles.add(()=>this.stagedPoint,e=>{this.analysisViewData.stagedPoint=null!=e?u.clonePoint(e,new h):null},o.syncAndInitial),C.setupSnappingToggleHandles(this,()=>{const e=this.view.inputManager.latestPointerType??"mouse",t=this._getSnappingContext(e);this._updatingHandles.addPromise(s.ignoreAbortErrors(this._snappingOperation.snapAgainNearPreviousMapPoint(this._snappingManager,t)))}),this._setupManipulators(),this.addHandles([o.when(()=>"measured"===this.state,()=>this.finishToolCreation(),o.syncAndInitial),this.analysisViewData.path.on("change",()=>{const e=this.analysisViewData.path;"initial"!==this.polygonState||e.isEmptyPolygon||(e.isValidPolygon?this.polygonState="measured":this.polygonState="drawing")})])}destroy(){this.measurementView.destroy(),this._set("measurementView",null),this._updatingHandles=a.destroyMaybe(this._updatingHandles)}get _snappingManager(){return this._snappingManagerResult.snappingManager}get state(){return 0===this.analysisViewData.path.numVertices?"ready":this.analysisViewData.path.isValidPolygon&&"editing"!==this.polygonState?"measured":"measuring"}get cursor(){return this.active?"crosshair":null}get updating(){return this._updatingHandles.updating||this._snappingManager.updating}get stagedPoint(){return this._snappingOperation.stagedPoint}set stagedPoint(e){this._snappingOperation.stagedPoint=e}get snappingOptions(){return this._snappingManager.options}finishMeasurement(){const{path:e}=this.analysisViewData;e.numVertices<=2||(e.close(),this.polygonState="measured",this._resetSnappingState(),this.active&&(this.view.activeTool=null))}resetCreated(){super.resetCreated(),this._resetSnappingState(),this.polygonState="initial","measured"===this.state&&(this.polygonState="measured",this.finishToolCreation())}onShow(){this.measurementView.show()}onHide(){this.measurementView.hide()}onDeactivate(){this._resetSnappingState()}onInputEvent(e){switch(e.type){case"immediate-double-click":this._handleImmediateDoubleClick(e);break;case"immediate-click":this._handleImmediateClick(e);break;case"pointer-move":this._handlePointerMove(e);break;case"drag":this._handleDrag(e);break;case"key-down":this._handleKeyDown(e)}}_setupManipulators(){const e=e=>e.events.on("grab-changed",()=>{if(this.analysisViewData.path.isValidPolygon){const e=this.manipulators.some(e=>e.manipulator.grabbing);this.polygonState=e?"editing":"measured"}}),t=t=>{this.addHandles([S.createManipulatorDragEventPipeline(t,(e,t,i,a)=>{const n=y.hideManipulatorWhileDragging(e),s=e.metadata,o=this._snappingManager,r=this._getSnappingContext(a),p=this._updatingHandles,{snappingStep:l,cancelSnapping:d}=b.createSnapDragEventPipelineStep({snappingManager:o,snappingContext:r,updatingHandles:p});i=i.next(n).next(t=>(this.analysisViewData.lastDraggedVertex=null,this.analysisViewData.path.setVertexPosition(s,g),e.location=g,t)).next(d),t.next(n).next(y.screenToMap3D(this.view)).next(...l).next(t=>{e.location=t.mapEnd,this.analysisViewData.lastDraggedVertex="end"===t.action?null:s,this.analysisViewData.path.setVertexPosition(s,u.clonePoint(t.mapEnd))});const g=u.clonePoint(this.analysisViewData.path.getVertexPositionAsPoint(s))}),e(t)],t)};this.manipulators.forEach(({manipulator:e})=>{t(e)}),this.addHandles([this.manipulators.on("after-add",({item:{manipulator:e}})=>{t(e)}),this.manipulators.on("after-remove",({item:{manipulator:e}})=>this.removeHandles(e))])}_handleImmediateDoubleClick(e){c.isPrimaryPointerAction(e)&&("drawing"===this.polygonState&&this.finishMeasurement(),e.stopPropagation())}_handleDrag(e){"editing"===this.polygonState&&e.stopPropagation()}_handleImmediateClick(e){if(!c.isPrimaryPointerAction(e))return;const t=H.createScreenPointFromEvent(e),{pointerType:i}=e;if(this.active)switch(this.polygonState){case"initial":case"measured":if(this._addVertexAt(t,i))return this.stagedPoint=null,this.polygonState="drawing",void e.stopPropagation();break;case"drawing":{const a=this.measurementView.vertexHandleAt(t,i);if(null==a){if(this._addVertexAt(t,i))return this.stagedPoint=null,void e.stopPropagation()}else 0===a.index&&(this.finishMeasurement(),e.stopPropagation());break}}"mouse"===e.pointerType&&this._hoverAt(t)}_handlePointerMove(e){if("mouse"===e.pointerType){const t=H.createScreenPointFromEvent(e);this._hoverAt(t)}}_handleKeyDown(e){const{path:t}=this.analysisViewData;e.key===V.sketchKeys.complete&&"drawing"===this.polygonState&&t.numVertices>=3&&(this.stagedPoint=null,this.finishMeasurement(),e.stopPropagation())}_hoverAt(e){const{polygonState:t}=this;if(this.active&&A.has(t)){const t=this._pick(e);if(null!=t?.mapPoint){const e=this._getSnappingContext("mouse");this._updatingHandles.addPromise(s.ignoreAbortErrors(this._snappingOperation.snap({point:t.mapPoint},this._snappingManager,e)))}}else this.stagedPoint=null}_addVertexAt(e,t){const i=this._pick(e),a=i?.mapPoint;if(null==a)return!1;this.analysis.valid&&"measured"===this.polygonState&&(this.analysis.clear(),this._set("created",!1),this.polygonState="initial");const n=this._getSnappingContext(t),s=this._snappingOperation.update({point:a},this._snappingManager,n),o=u.clonePoint(s,new h);return this.analysisViewData.path.add(o),!0}_pick(e){const t=new v.PickRequest(e);return this.measurementView.pick(t)}_resetSnappingState(){this._snappingManager.doneSnapping(),this._snappingOperation.abort(),this._snappingOperation.stagedPoint=null}get test(){}},t.__decorate([r.property({readOnly:!0})],e.default.prototype,"state",null),t.__decorate([r.property()],e.default.prototype,"polygonState",void 0),t.__decorate([r.property({readOnly:!0})],e.default.prototype,"cursor",null),t.__decorate([r.property()],e.default.prototype,"measurementView",void 0),t.__decorate([r.property()],e.default.prototype,"removeIncompleteOnCancel",void 0),t.__decorate([r.property({constructOnly:!0})],e.default.prototype,"view",void 0),t.__decorate([r.property({constructOnly:!0})],e.default.prototype,"analysis",void 0),t.__decorate([r.property({constructOnly:!0})],e.default.prototype,"analysisViewData",void 0),t.__decorate([r.property({readOnly:!0})],e.default.prototype,"manipulators",void 0),t.__decorate([r.property()],e.default.prototype,"updating",null),t.__decorate([r.property()],e.default.prototype,"stagedPoint",null),t.__decorate([r.property()],e.default.prototype,"snappingOptions",null),e.default=t.__decorate([d.subclass("esri.views.3d.interactive.measurementTools.areaMeasurement3D.AreaMeasurement3DTool")],e.default);const A=new Set(["initial","drawing","measured"]);return e.default});