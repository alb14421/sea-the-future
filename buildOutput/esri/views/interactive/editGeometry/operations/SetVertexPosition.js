// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../geometry/support/curves/curveUtils","../EditGeometry"],function(e,t,i){"use strict";class r{constructor(e,t,i){this._editGeometry=e,this._vertex=t,this._pos=i}apply(){const e=null==this._originalPosition;e&&(this._originalPosition=this._vertex.leftSegment?.toCurveOrCoordinate()??this._vertex.pos),this._apply(e?"apply":"redo")}undo(){const e=this._vertex.leftSegment;e&&this._originalPosition&&this._replaceEdge(e,this._vertex,this._originalPosition),this._vertex.pos=this._editGeometry.coordinateHelper.arrayToVector(t.getEndpoint(this._originalPosition)),this._editGeometry.notifyChanges({operation:"undo",updatedVertices:[this._vertex]})}accumulate(e){return e instanceof r&&e._vertex===this._vertex&&(this._pos=e._pos,this._apply("apply"),!0)}_apply(e){this._vertex.pos=this._editGeometry.coordinateHelper.arrayToVector(t.getEndpoint(this._pos));const i=this._pos,r=this._vertex.leftSegment;switch(r?.type){case void 0:break;case"line":t.isCoordinate(i)||this._replaceEdge(r,this._vertex,i);break;case"bezier":t.isBezierCurve(i)?(r.curveDefinition.controlPoint1=i.b[1],r.curveDefinition.controlPoint2=i.b[2]):this._replaceEdge(r,this._vertex,i);break;case"circular-arc":t.isCircularArc(i)?r.curveDefinition.interiorPoint=i.c[1]:this._replaceEdge(r,this._vertex,i);break;case"elliptic-arc-4":t.isEllipticArc4(i)?(r.curveDefinition.centerPoint=i.a[1],r.curveDefinition.sweep=i.a[2],r.curveDefinition.orientation=i.a[3]):this._replaceEdge(r,this._vertex,i);break;case"elliptic-arc-7":t.isEllipticArc7(i)?(r.curveDefinition.centerPoint=i.a[1],r.curveDefinition.sweep=i.a[2],r.curveDefinition.orientation=i.a[3],r.curveDefinition.rotation=i.a[4],r.curveDefinition.semiMajorAxisLength=i.a[5],r.curveDefinition.minorMajorAxisRatio=i.a[6]):this._replaceEdge(r,this._vertex,i)}this._editGeometry.parts.forEach(e=>e.unnormalizeVertexPositions()),this._editGeometry.notifyChanges({operation:e,updatedVertices:[this._vertex]})}_replaceEdge(e,t,r){const o=this._vertex.part,s=e?o.segments.indexOf(e):-1;if(s>-1&&e.leftVertex){const n=i.createConnectingSegment(o,e.leftVertex,t,r);this._vertex.part.segments.splice(s,1,n)}}}e.SetVertexPosition=r,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});