// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/arrayUtils","../../../../core/libs/gl-matrix-2/factories/mat3f64","../../../../core/libs/gl-matrix-2/math/vec2","../../../../core/libs/gl-matrix-2/factories/vec2f64","../../../../core/libs/gl-matrix-2/math/mat3","../EditGeometry","./curveOperationUtils"],function(t,e,a,i,c,r,o,s){"use strict";class n{constructor(t,e,a,i,r=0){this.origin=t,this.axis1=e,this.factor1=a,this.factor2=i,this._accumulationType=r,this.axis2=c.fromValues(e[1],-e[0])}_scale({pos:t,leftSegment:e},n,l){const f=e?.toCurveOrCoordinate(),{origin:u,axis1:h,axis2:m}=this;i.projectAndScale(t,t,u,h,n),i.projectAndScale(t,t,u,m,l),function(t,e,n,l,f,u,h){switch(t?.type){case null:case void 0:case"line":return;case"bezier":{const{controlPoint1:a,controlPoint2:c}=t.curveDefinition;i.projectAndScale(a,a,e,n,f),i.projectAndScale(a,a,e,l,u),i.projectAndScale(c,c,e,n,f),i.projectAndScale(c,c,e,l,u);break}case"circular-arc":case"elliptic-arc-4":case"elliptic-arc-7":{if(!h)return;const m=t.leftVertex.pos,p=s.getScaleTransform(e[0],e[1],n[0],n[1],l[0],l[1],f,u),x=r.invert(a.create(),p),g=x?i.transformMat3(c.create(),[m[0],m[1]],x):m,[,d,A,S,j,y,v]=s.scaleArc(h,[g[0],g[1]],t,e,n,l,f,u).a;if("elliptic-arc-7"===t.type){const e=t.curveDefinition;e.centerPoint=d,e.sweep=A,e.orientation=S,e.rotation=j,e.semiMajorAxisLength=y,e.minorMajorAxisRatio=v}else{const e=new o.EllipticArc7Segment(t.part,t.leftVertex,t.rightVertex,{centerPoint:d,sweep:A,orientation:S,rotation:j,semiMajorAxisLength:y,minorMajorAxisRatio:v});t.part.segments.splice(t.part.segments.indexOf(t),1,e)}}}}(e,u,h,m,n,l,f)}apply(t){this._scale(t,this.factor1,this.factor2)}undo(t){this._scale(t,1/this.factor1,1/this.factor2)}canAccumulate(t){return t instanceof n&&e.equals(this.origin,t.origin)&&e.equals(this.axis1,t.axis1)}accumulate(t,e){1===e._accumulationType?this._scale(t,e.factor1/this.factor1,e.factor2/this.factor2):this._scale(t,e.factor1,e.factor2)}accumulateParams(t){const e=1===t._accumulationType;this.factor1=e?t.factor1:this.factor1*t.factor1,this.factor2=e?t.factor2:this.factor2*t.factor2}}t.ScaleVertex=n,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});