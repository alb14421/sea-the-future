// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../chunks/tslib.es6","../../../../../core/Accessor","../../../../../core/arrayUtils","../../../../../core/maybe","../../../../../core/promiseUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/has","../../../../../core/Logger","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/support/UpdatingHandles","../../../../../core/workers/WorkerHandle","../../../../../geometry/support/typeUtils","../../../../../layers/graphics/dehydratedPoint"],function(e,t,o,r,a,n,i,s,d,l,p,c,u,h){"use strict";function y(e){return{filter:null!=e.filter?e.filter.toJSON():null,customParameters:e.customParameters,viewType:e.viewType}}e.FeatureServiceSnappingSourceWorkerHandle=class extends o{get updating(){return this._updatingHandles.updating||this._workerHandleUpdating}constructor(e){super(e),this._updatingHandles=new p.UpdatingHandles,this._suspendController=null,this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async e=>{const t=[];for(const{points:o}of e.pointsInFeatures)for(const{z:e}of o)t.push(e);return{elevations:t,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this.updateOutFields=n.debounce(async(e,t)=>{await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateOutFields",[...e],t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))})}destroy(){this._suspendController=a.abortMaybe(this._suspendController),this._workerHandle.destroy(),this._updatingHandles.destroy()}initialize(){this._workerHandle=new g(this.schedule,{alignElevation:async(e,{signal:t})=>({result:await this.elevationAlignPointsInFeatures(e.query,t)}),getSymbologyCandidates:async(e,{signal:t})=>({result:await this.queryForSymbologySnapping(e,t)})}),this.addHandles([this._workerHandle.on("notify-updating",({updating:e})=>this._workerHandleUpdating=e),this._workerHandle.on("notify-availability",({availability:e})=>this._set("availability",e))])}async setup(e,t){const o="multipatch"===(r=e.layer).geometryType||"mesh"===r.geometryType?null:{url:r.parsedUrl?.path??"",fieldsIndex:r.fieldsIndex.toJSON(),geometryType:u.featureGeometryTypeKebabDictionary.toJSON(r.geometryType),capabilities:r.capabilities,objectIdField:r.objectIdField,globalIdField:r.globalIdField,spatialReference:r.spatialReference.toJSON(),timeInfo:r.timeInfo?.toJSON()};var r;if(null==o)return;const a={configuration:y(e.configuration),serviceInfo:o,spatialReference:e.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:e.layer.elevationInfo?.toJSON()};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",a,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async configure(e,t){const o=y(e);await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",o,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async refresh(e){await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},e)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async fetchCandidates(e,t){const{point:o,filter:r,coordinateHelper:a}=e,n={...e,point:h.makeDehydratedPoint(o[0],o[1],o[2],a.spatialReference.toJSON()),filter:r?.toJSON()};return this._workerHandle.invoke(n,t)}async updateTiles(e,t){const o={tiles:e.tiles,tileInfo:null!=e.tileInfo?e.tileInfo.toJSON():null,tileSize:e.tileSize};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",o,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async handleEdits({historicMoment:e,addedFeatures:t,deletedFeatures:o,updatedFeatures:a},n){const i={historicMoment:e,addedFeatures:t?.map(({objectId:e})=>e).filter(r.isSome)??[],deletedFeatures:o?.map(({objectId:e,globalId:t})=>({objectId:e,globalId:t}))??[],updatedFeatures:a?.map(({objectId:e})=>e).filter(r.isSome)??[]};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("handleEdits",i,n)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},n))}async setHistoricMoment(e,t){await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("setHistoricMoment",{moment:e},t))}getDebugInfo(e){return this._workerHandle.invokeMethod("getDebugInfo",{},e)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(e){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",e)}async setSuspended(e){this._suspendController?.abort(),this._suspendController=new AbortController,await this._workerHandle.invokeMethod("setSuspended",e,this._suspendController.signal)}},t.__decorate([i.property({constructOnly:!0})],e.FeatureServiceSnappingSourceWorkerHandle.prototype,"schedule",void 0),t.__decorate([i.property({constructOnly:!0})],e.FeatureServiceSnappingSourceWorkerHandle.prototype,"hasZ",void 0),t.__decorate([i.property({constructOnly:!0})],e.FeatureServiceSnappingSourceWorkerHandle.prototype,"elevationAlignPointsInFeatures",void 0),t.__decorate([i.property({constructOnly:!0})],e.FeatureServiceSnappingSourceWorkerHandle.prototype,"queryForSymbologySnapping",void 0),t.__decorate([i.property({readOnly:!0})],e.FeatureServiceSnappingSourceWorkerHandle.prototype,"updating",null),t.__decorate([i.property({readOnly:!0})],e.FeatureServiceSnappingSourceWorkerHandle.prototype,"availability",void 0),t.__decorate([i.property()],e.FeatureServiceSnappingSourceWorkerHandle.prototype,"_workerHandleUpdating",void 0),e.FeatureServiceSnappingSourceWorkerHandle=t.__decorate([l.subclass("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],e.FeatureServiceSnappingSourceWorkerHandle);class g extends c.WorkerHandle{constructor(e,t){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:t})}}Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});