// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/libs/gl-matrix-2/math/vec2","../../../core/libs/gl-matrix-2/factories/vec2f64","../../../support/elevationInfoUtils","../sketch/normalizedPoint","./Settings","./SnappingAlgorithm","./snappingUtils","./candidates/ParallelLineSnappingCandidate","../support/viewUtils","../../support/geometry2dUtils"],function(e,t,n,i,r,s,a,o,l,c,h){"use strict";class g extends a.SnappingAlgorithm{snapNewVertex(e,t){const n=t.editGeometryOperations.data.parts[0],s=n.segments.length,a=n.vertices.length,l=[];if(s<2)return l;const{view:h}=this,g=c.vectorToScreenPoint(e,t.spatialReference,i.absoluteHeightElevationInfo,h),p=r.fromAnyMapPoint(n.vertices[a-1].pos,h,t),d=r.fromAnyMapPoint(n.vertices[0].pos,h,t),f=n.segments[s-1];let u=f;do{if(this.edgeExceedsShortLineThreshold(u,t)){const n=o.editEdgeToSnappingEdge(u,h,t);this._checkEdgeForParallelLines(n,p,e,g,t,l),this._checkEdgeForParallelLines(n,d,e,g,t,l)}u=u.leftVertex.leftSegment}while(u&&u!==f);return l}snapExistingVertex(e,t){const n=[],s=t.vertexHandle,a=s.part;if(a.segments.length<3)return n;const{view:l}=this,h=c.vectorToScreenPoint(e,t.spatialReference,i.absoluteHeightElevationInfo,l),g=s.leftSegment,p=s.rightSegment,d=a.vertices[0],f=r.fromAnyMapPoint(d.pos,l,t),u=a.vertices.length,m=a.vertices[u-1],P=r.fromAnyMapPoint(m.pos,l,t),v=a.segments[0];let V=v;do{if(V!==g&&V!==p&&this.edgeExceedsShortLineThreshold(V,t)){const i=o.editEdgeToSnappingEdge(V,l,t);g&&this._checkEdgeForParallelLines(i,r.fromAnyMapPoint(g.leftVertex.pos,l,t),e,h,t,n),p&&this._checkEdgeForParallelLines(i,r.fromAnyMapPoint(p.rightVertex.pos,l,t),e,h,t,n),s===d?this._checkEdgeForParallelLines(i,P,e,h,t,n):s===m&&this._checkEdgeForParallelLines(i,f,e,h,t,n)}V=V.rightVertex.rightSegment}while(V&&V!==v);return n}_checkEdgeForParallelLines(e,n,a,g,d,f){const u=e.left,m=e.right;if(h.projectPointToLine(p,r.asVec2(n),r.asVec2(u),r.asVec2(m)),t.squaredDistance(p,r.asVec2(n))<s.defaults.parallelLineThreshold)return;h.projectPointToLine(p,r.asVec2(a),r.asVec2(u),r.asVec2(m),r.asVec2(n));const{spatialReference:P,pointer:v}=d,V=r.markAsTarget(r.fromValues(p[0],p[1],a[2]));if(o.squaredScreenDistance(g,c.vectorToScreenPoint(V,P,i.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(v)){if(this.isVertical(V,n,d)||this.isVertical(u,m,d))return;if(function(e,n){const i=e.left,a=e.right;for(const o of n)if(h.projectPointToLine(p,r.asVec2(a),r.asVec2(o.constraint.start),r.asVec2(o.constraint.end),r.asVec2(i)),t.squaredDistance(p,r.asVec2(a))<s.defaults.parallelLineThreshold)return o.addReferenceLine(e),!0;return!1}(e,f))return;f.push(new l.ParallelLineSnappingCandidate({referenceLine:e,lineStart:n,targetPoint:V,isDraped:"on-the-ground"===d.elevationInfo?.mode}))}}}const p=n.create();e.ParallelLineSnapper=g,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});