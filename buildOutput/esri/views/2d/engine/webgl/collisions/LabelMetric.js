// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../definitions","./BoundingBox","../util/serializationUtils"],function(e,i,t,s){"use strict";class r{constructor(e,i,t,s,r,a,h,l,n,d,o,c=[],u=0,f=0){this.displayId=e,this.labelClassId=i,this.labelIdHash=t,this.hash=s,this.anchorX=r,this.anchorY=a,this.directionX=h,this.directionY=l,this.maxScale=n,this.minScale=d,this.referenceBounds=o,this.bounds=c,this.recordStart=u,this.recordCount=f,this.priority=0,this._colliders=null,this.uniqueSymbol=null,this.selectedForRendering=!1}get xTile(){return this.anchorX}get yTile(){return this.anchorY}colliders(e){if(!this._colliders){const t=e.attributeView,s=i.labelPlacementOffsetPadding;let r=this.referenceBounds?.size??0;const a=e.layerView.labelingCollisionInfos[0].vvEvaluators[0];if(null!=a){const e=a(t.getVisualVariableData(this.displayId,0));r=isNaN(e)||null==e||e===1/0?r:e}const h=this.minScale?e.layerView.view.featuresTilingScheme.scaleToZoom(this.minScale):0,l=this.maxScale?e.layerView.view.featuresTilingScheme.scaleToZoom(this.maxScale):25,n=this.directionX*(s+r/2),d=this.directionY*(s+r/2);this._colliders=this.bounds.map(e=>({labelId:this.labelIdHash,xTile:this.anchorX,yTile:this.anchorY,dxPixels:e.x-e.halfWidth+n,dyPixels:e.y-e.halfHeight+d,hard:!0,partIndex:1,width:e.width+2,height:e.height+2,angle:0,xScreen:0,yScreen:0,dxScreen:0,dyScreen:0,enabled:!0,minLod:h,maxLod:l}))}return this._colliders}get id(){return this.displayId}serialize(e){e.push(this.displayId),e.push(this.labelClassId),e.push(this.labelIdHash),e.push(this.hash),e.push(this.recordStart),e.push(this.recordCount),e.writeF32(this.anchorX),e.writeF32(this.anchorY),e.writeF32(this.directionX),e.writeF32(this.directionY),e.writeF32(this.maxScale),e.writeF32(this.minScale),this.referenceBounds?(e.writeF32(this.referenceBounds.size),e.writeF32(this.referenceBounds.offsetX),e.writeF32(this.referenceBounds.offsetY)):(e.writeF32(0),e.writeF32(0),e.writeF32(0)),s.serializeList(e,this.bounds)}static deserialize(e){const i=e.readInt32(),a=e.readInt32(),h=e.readInt32(),l=e.readInt32(),n=e.readInt32(),d=e.readInt32(),o=e.readF32(),c=e.readF32(),u=e.readF32(),f=e.readF32(),F=e.readF32(),w=e.readF32(),S=e.readF32(),b=e.readF32(),m=e.readF32(),I=s.deserializeList(e,t)??[];return new r(i,a,h,l,o,c,u,f,F,w,{size:S,offsetX:b,offsetY:m},I,n,d)}}e.LabelMetric=r,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});