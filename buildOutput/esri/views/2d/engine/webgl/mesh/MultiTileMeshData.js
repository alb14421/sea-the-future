// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../tiling/TileInfoView","../../../tiling/TileKey","../../../tiling/TileQueue","../../../tiling/TileStrategy","../definitions","./MeshData"],function(e,t,s,i,r,n,h){"use strict";function a(e){switch(e){case 1:case 8:case 32:return-1;case 2:case 64:return 0;case 4:case 16:case 128:return 1}}function o(e){switch(e){case 1:case 2:case 4:return-1;case 8:case 16:return 0;case 32:case 64:case 128:return 1}}e.MultiTileMeshData=class{constructor(e,t,s,i,r=0){this.tileKey=e,this._bufferingEnabled=t,this._sizeHint=r,this._meshes={self:new h.MeshData(this.id,this._sizeHint),neighbors:new Array},this._currentRecordOverlaps=0,this._currentEntityOverlaps=0;const n=i?1:0;this._copyBufferedDataIntoSelf=s&&this._bufferingEnabled&&e.level===n}get id(){return this.tileKey.id}vertexStart(){return this._meshes.self.vertexStart()??0}vertexCount(){return this._meshes.self.vertexCount()}indexCount(){return this._meshes.self.indexCount()}indexEnsureSize(e){this._meshes.self.indexEnsureSize(e)}entityStart(e,t=e){this._currentEntityOverlaps=0,this._meshes.self.entityStart(e,t)}entityRecordCount(){return this._meshes.self.entityRecordCount()}entityEnd(){if(this._meshes.self.entityEnd(),this._bufferingEnabled){if(this._copyBufferedDataIntoSelf)return;for(let e=0;e<8;e++){const t=1<<e;this._currentEntityOverlaps&t&&this._meshes.neighbors[e].entityEnd()}}}recordStart(e,t,s){this._currentRecordOverlaps=0,this._meshes.self.recordStart(e,t,s)}recordEnd(e=0){const t=this._meshes.self.recordEnd(this._currentRecordOverlaps);return t&&0!==this._currentRecordOverlaps?(this._copyIntoNeighbors(),this._currentEntityOverlaps|=this._currentRecordOverlaps,!0):t}recordBounds(e,t,s,i){this._bufferingEnabled&&this._addOverlap(e,t,s,i)}recordCount(){return this._meshes.self.recordCount()}metricStart(e){this._meshes.self.metricStart(e)}metricBoxWrite(e){this._meshes.self.metricBoxWrite(e)}metricEnd(){this._meshes.self.metricEnd()}vertexWrite(e){this._meshes.self.vertexWrite(e)}vertexWriteF32(e){this._meshes.self.vertexWriteF32(e)}vertexWriteRegion(e){this._meshes.self.vertexWriteRegion(e)}indexWrite(e){this._meshes.self.indexWrite(e)}serialize(e){const t={message:[],transferList:[]},i=this._meshes.self.serialize();return t.message.push({tileId:this.tileKey.id,...i.message}),t.transferList.push(...i.transferList),this._meshes.neighbors.forEach((i,r)=>{const n=i.serialize(),h=1<<r,c=a(h),l=o(h),f=new s(this.tileKey).getNormalizedNeighbor(c,l,e);t.message.push({tileId:f.id,...n.message}),t.transferList.push(...n.transferList)}),t}_addOverlap(e,t,s,i){const r=Math.min(n.tileSize/2,s),h=Math.min(n.tileSize/2,i),a=255^((e<0+r?148:e>=n.tileSize-r?41:189)|(t<0+h?224:t>=n.tileSize-h?7:231));this._currentRecordOverlaps|=a}_copyIntoNeighbors(){for(let e=0;e<8;e++){const t=1<<e;if(this._currentRecordOverlaps&t){if(this._copyBufferedDataIntoSelf){const e=-a(t)*n.tileSize,s=-o(t)*n.tileSize;if(0!==s)continue;this._meshes.self.copyLast(e,s);continue}if(!this._meshes.neighbors[e]){const s=Math.floor(this._sizeHint/16);this._meshes.neighbors[e]=new h.MeshData(t,s)}const s=this._meshes.neighbors[e],i=-a(t)*n.tileSize,r=-o(t)*n.tileSize;s.copyLastFrom(this._meshes.self,i,r)}}}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});