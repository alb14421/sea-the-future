// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../../../core/libs/gl-matrix-2/factories/vec4f32","../FeatureTile","./WGLBrush","../shaders/BackgroundPrograms","../shaders/TileInfoPrograms","../../../../webgl/enums","../../../../webgl/ProgramTemplate","../../../../webgl/Texture","../../../../webgl/TextureDescriptor","../../../../webgl/VertexArrayObject","../../../../webgl/VertexAttributeLayouts","../../../../webgl/VertexBuffer"],function(e,t,r,i,o,s,n,l,a,c,u,f){"use strict";const d=16;return class extends r{constructor(){super(...arguments),this._color=e.fromValues(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,r){const{context:i,requestRender:o,allowDelayedRender:n}=e;if(!r.isReady&&r instanceof t.FeatureTile&&r.hasData)return;if(this._loadWGLResources(i),n&&null!=o&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void o();i.bindVAO(this._outlineVertexArrayObject),i.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",r.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f("u_coord_range",r.rangeX,r.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),i.drawArrays(s.PrimitiveType.LINE_STRIP,0,4);const l=this._getTexture(i,r);l?(i.bindVAO(this._tileInfoVertexArrayObject),i.useProgram(this._tileInfoProgram),i.bindTexture(l,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",r.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",r.rangeX/r.width,r.rangeY/r.height),this._tileInfoProgram.setUniform2f("u_delta",0,0),this._tileInfoProgram.setUniform2f("u_dimensions",l.descriptor.width,l.descriptor.height),i.drawArrays(s.PrimitiveType.TRIANGLE_STRIP,0,4),i.bindVAO(null)):i.bindVAO(null)}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const t=new Int8Array([0,0,1,0,1,1,0,1]),r=new f.VertexBuffer(e,u.Pos2b,t);this._outlineVertexArrayObject=new c.VertexArrayObject(e,r),this._outlineProgram=n.createProgram(e,i.background,this._outlineVertexArrayObject.locations);const s=new Int8Array([0,0,1,0,0,1,1,1]),l=new f.VertexBuffer(e,u.Pos2b,s);this._tileInfoVertexArrayObject=new c.VertexArrayObject(e,l),this._tileInfoProgram=n.createProgram(e,o.tileInfo,this._tileInfoVertexArrayObject.locations)}_getTexture(e,t){if(!this._ctx){const e=document.createElement("canvas");e.width=512,e.height=512,this._ctx=e.getContext("2d")}if(!t.tileDebugInfoTexture){const r=new a.TextureDescriptor(512,512);r.wrapMode=33071,r.samplingMode=9729,r.isImmutable=!0,t.tileDebugInfoTexture=new l.Texture(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign="left",r.textBaseline="top",r.font="14px sans-serif",r.lineWidth=2,r.fillStyle="white",r.strokeStyle="black";const{debugSlot:i}=t;let o=8+99.2*i;const s=`${i}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,8,o),r.fillText(s,8,o),o+=d;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:i,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,8,o),r.fillText(t,8,o),o+=d}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,8,o),r.fillText(e,8,o),o+=d}if(i){const e=`Min unordered length: ${i}`;r.strokeText(e,8,o),r.fillText(e,8,o),o+=d}if(s>0){s>1e5&&(r.fillStyle="red",r.strokeStyle="white");const e=`Triangle count: ${s}`;r.strokeText(e,8,o),r.fillText(e,8,o),o+=d}const{bytesUsed:l,bytesReserved:a}=n.memory;if(r.fillStyle="white",r.strokeStyle="black",l>0||a>0){const e=`Memory usage: ${l} of ${a} bytes`;r.strokeText(e,8,o),r.fillText(e,8,o),o+=d}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}});