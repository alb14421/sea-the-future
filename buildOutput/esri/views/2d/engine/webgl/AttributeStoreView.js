// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/Error","../../../../core/has","../../../../core/Logger","./definitions","./DisplayId","./Utils","../../../webgl/FramebufferObject","../../../webgl/Texture","../../../webgl/TextureDescriptor"],function(t,e,i,s,r,a,n,u,h,o){"use strict";class l{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:s,pixelType:r,textureOnly:a}=t,u=n.getPixelArrayCtor(r);this.blockIndex=i,this.pixelType=r,this.size=e,this.textureOnly=a,a||(this.data=new u(s)),this._resetRange()}destroy(){this._texture?.dispose();for(const t in this._fbos){const e=this._fbos[t];e&&("0"===t&&e.detachColorTexture(),e.dispose()),this._fbos[t]=null}this._texture=null}get _textureDesc(){const t=new o.TextureDescriptor(this.size);return t.wrapMode=33071,t.samplingMode=9728,t.dataType=this.pixelType,t}setData(t,e,i){const s=a.getDisplayIdTexel(t),r=this.data,n=s*this.texelSize+e;!r||n>=r.length||(r[n]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,e){if(null==this.data)return null;const i=a.getDisplayIdTexel(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return this._texture??this._initTexture(t)}getFBO(t,e=0){if(!this._fbos[e]){const i=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new u.FramebufferObject(t,i)}return this._fbos[e]}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(t,r){try{const a=this.dirtyStart,u=this.dirtyEnd;if(!this.hasDirty)return;i("esri-2d-update-debug")&&console.debug(`Version[${r}] AttributeStoreView.updateTexture`,{start:a,end:u,firstBytes:new Uint8Array(this.data.buffer.slice(0,16)),block:this}),this._resetRange();const h=this.data.buffer,o=this.getTexture(t),l=4,d=(a-a%this.size)/this.size,g=(u-u%this.size)/this.size,c=d,x=this.size,p=g,_=d*this.size*l,b=(x+p*this.size)*l-_,f=n.getPixelArrayCtor(this.pixelType),T=new f(h,_*f.BYTES_PER_ELEMENT,b),y=this.size,w=p-c+1;if(w>this.size)return void s.getLogger("esri.views.2d.engine.webgl.AttributeStoreView").error(new e("mapview-webgl","Out-of-bounds index when updating AttributeData"));o.updateData(0,0,c,y,w,T)}catch(t){}}update(t){const{data:e,start:i,end:s}=t;if(null!=e&&null!=this.data){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,s)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=n.getPixelArrayCtor(this.pixelType);this.destroy(),this.data=new s(t.buffer)}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new h.Texture(t,this._textureDesc,this.data??void 0);if(null!=this._lastTexture&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,u=this.getFBO(t),h=n.getPixelBytes(r),o=new(n.getPixelArrayCtor(r))(new ArrayBuffer(i*s*h*this.texelSize)),l=t.getBoundFramebufferObject(),{x:d,y:g,width:c,height:x}=t.getViewport();t.bindFramebuffer(u),u.readPixels(0,0,i,s,a,r,o),e.updateData(0,0,0,2*i,s/2,o),t.setViewport(d,g,c,x),t.bindFramebuffer(l)}return this.destroy(),this._texture=e,this._texture}}t.AttributeStoreView=class{constructor(){this.size=0,this._pendingAttributeUpdates=[],this._version=0,this._epoch=0,this._locked=!1}get locked(){return this._locked}_initialize(t){if(!t)throw new Error("InternalError: initArgs must be defined");const e=t.blockDescriptors;if(this.size=t.blockSize,i("esri-2d-update-debug")&&console.debug("AttributeStoreView.initialize",{message:t}),null==this._data)this._data=e.map((t,e)=>null!=t?new l(t,this.size,e):null);else for(let t=0;t<this._data.length;t++){const i=this._data[t],s=e[t];null!=s&&(null==i?this._data[t]=new l(s,this.size,t):i.resize(s,this.size))}}destroy(){for(const t of this._data??[])t?.destroy();this._defaultTexture?.dispose(),this._defaultTexture=null,this._pendingAttributeUpdates=[]}isEmpty(){return null==this._data}getBlock(t){return null==this._data?null:this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}setLocalTimeOrigin(t,e){this.setData(t,7,0,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVisualVariableData(t,e){return this.getData(t,3,e,0)}getData(t,e,i,s){if(!this._data)return 0;const r=this._data[e];if(null==r)return 0;const a=r.getData(t,i);return null!=a?a:s}setData(t,e,i,s){this._data[e].setData(t,i,s)}lockTextureUploads(){this._locked=!0}unlockTextureUploads(){this._locked=!1,this.update()}requestUpdate(t){this._version=t.version,this._pendingAttributeUpdates.push(t),i("esri-2d-update-debug")&&console.debug(`Version[${this._version}] AttributeStoreView.requestUpdate`,{message:t})}get currentEpoch(){return this._epoch}get hasPendingUpdates(){return this._pendingAttributeUpdates.length>0}update(){if(this._locked)return;const t=this._pendingAttributeUpdates;this._pendingAttributeUpdates=[];for(const e of t){const{blockData:t,initArgs:s,sendUpdateEpoch:r,version:a}=e;i("esri-2d-update-debug")&&console.debug(`Version[${this._version}] Epoch[${r}] AttributeStoreView.applyUpdate`),this._version=a,this._epoch=r,null!=s&&this._initialize(s);const n=this._data;for(let e=0;e<t.length;e++){const s=t[e],r=n[e];null!=r&&null!=s&&(i("esri-2d-update-debug")&&console.debug(`Version[${this._version}] CpuBlock[${e}] AttributeStoreView.update`,{block:s}),r.update(s))}}}getUniforms(t){return{filterFlags:{texture:this._getTexture(t,0),unit:r.filterFlagsUnit},animation:{texture:this._getTexture(t,1),unit:r.animationUnit},gpgpu:{texture:this._getTexture(t,2),unit:r.gpgpuUnit},localTimeOrigin:{texture:this._getTexture(t,7),unit:r.localTimeOriginUnit},visualVariableData:{texture:this._getTexture(t,3),unit:r.visualVariableUnit},dataDriven0:{texture:this._getTexture(t,4),unit:r.dataDrivenUnit0},dataDriven1:{texture:this._getTexture(t,5),unit:r.dataDrivenUnit1},dataDriven2:{texture:this._getTexture(t,6),unit:r.dataDrivenUnit2},size:this.size}}_getTexture(t,e){const i=this._data?.[e];return i?(i.updateTexture(t,this._version),i.getTexture(t)):this._getDefaultTexture(t)}_getDefaultTexture(t){if(null==this._defaultTexture){const e=new o.TextureDescriptor(1);e.wrapMode=33071,e.samplingMode=9728,this._defaultTexture=new h.Texture(t,e,new Uint8Array(4))}return this._defaultTexture}},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});