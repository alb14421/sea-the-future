// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../chunks/tslib.es6","../../GraphShaderModule","../../graph/glsl","./markerConstants","../shaders/AFeatureShader","../shaders/constants","../shaders/hittestUtils","../shaders/MosaicInfo","../shaders/utils","../shaders/VisualVariableColor","../shaders/VisualVariableOpacity","../shaders/VisualVariableRotation","../shaders/VisualVariableSizeMinMaxValue","../shaders/VisualVariableSizeScaleStops","../shaders/VisualVariableSizeStops","../shaders/VisualVariableSizeUnitValue","../shaders/vvUtils"],function(t,e,i,o,a,l,r,s,n,u,d,c,p,y,V,m,h,x){"use strict";class _ extends l.FeatureVertexInput{}e.__decorate([i.location(3,o.Vec4)],_.prototype,"color",void 0),e.__decorate([i.location(4,o.Vec4)],_.prototype,"outlineColor",void 0),e.__decorate([i.location(5,o.Vec2)],_.prototype,"offset",void 0),e.__decorate([i.location(6,o.Vec2)],_.prototype,"textureUV",void 0),e.__decorate([i.location(7,o.Vec4)],_.prototype,"sizing",void 0),e.__decorate([i.location(8,o.Float)],_.prototype,"placementAngle",void 0),e.__decorate([i.location(9,o.Float)],_.prototype,"sdfDecodeCoeff",void 0),e.__decorate([i.location(10,o.Vec2)],_.prototype,"zoomRange",void 0);class g extends i.ComputeVertexInput{}e.__decorate([i.location(11,o.Vec2)],g.prototype,"offsetNextVertex1",void 0),e.__decorate([i.location(12,o.Vec2)],g.prototype,"offsetNextVertex2",void 0),e.__decorate([i.location(13,o.Vec2)],g.prototype,"textureUVNextVertex1",void 0),e.__decorate([i.location(14,o.Vec2)],g.prototype,"textureUVNextVertex2",void 0);class v extends l.FeatureFragmentInput{}function b(t,e,i,o){return e.multiply(t.x).add(i.multiply(t.y)).add(o.multiply(t.z))}function S(t){return t.multiply(t).divide(128)}class w extends l.AFeatureShader{constructor(){super(...arguments),this.type="MarkerShader",this.computeAttributes={offset:["offsetNextVertex1","offsetNextVertex2"],textureUV:["textureUVNextVertex1","textureUVNextVertex2"]}}vertex(t,e){const i=S(t.sizing.x),l=S(t.sizing.y),s=S(t.sizing.z),n=t.placementAngle,d=u.getBit(t.bitset,a.MarkerConstants.bitset.isSDF),c=u.getBit(t.bitset,a.MarkerConstants.bitset.isMapAligned),p=u.getBit(t.bitset,a.MarkerConstants.bitset.scaleSymbolsProportionally),y=u.getBitBool(t.bitset,a.MarkerConstants.bitset.colorLocked),V=x.getVisualVariableOpacity(this,t.id),m=x.getVisualVariableColor(this,t.id,t.color,y).multiply(V),h=this.view.displayViewScreenMat3.multiply(new o.Vec3(t.pos.xy,1)),_=x.getVisualVariableSize(this,t.id,s).divide(s),g=i.multiply(_),v=t.offset.xy.multiply(_);let b=l.multiply(p.multiply(_.subtract(1)).add(1));b=o.min(b,o.max(g.subtract(.99),new o.Float(0)));const w=o.max(b,new o.Float(1)),f=o.min(b,new o.Float(1)),M=o.Mat3.fromRotation(n.multiply(r.c256ToRad)),C=x.getVisualVariableRotation(this,t.id),z=this._getViewRotationMatrix(c).multiply(C).multiply(M).multiply(new o.Vec3(v.xy,0)),F=this.clip(t.id,t.zoomRange),T=new o.Vec4(h.xy.add(z.xy),F,1),R=t.textureUV.divide(this.mosaicInfo.size),U=t.outlineColor.multiply(f),k=u.getBit(t.bitset,a.MarkerConstants.bitset.overrideOutlineColor),B=t.sdfDecodeCoeff.multiply(g);return{glPosition:T,color:m,textureUV:R,outlineColor:U,outlineSize:w,distanceToPx:B,isSDF:d,overrideOutlineColor:k,...this.maybeRunHittest(t,e,{pos:t.pos,size:g,sizeCorrection:_,isMapAligned:c,vvRotationMat3:C,placementMat3:M,outlineSize:w,distanceToPx:B,isSDF:d})}}fragment(t){const e=this._getColor(t.textureUV,t);return this.getFragmentOutput(e,t)}hittest(t,e,i){return o.ifElse(o.lessThan(i.size,this.hittestRequest.smallSymbolSizeThreshold),this._hittestSmallMarker(t,e,i),this._hittestMarker(t,e,i))}_getViewRotationMatrix(t){const e=this.view.displayViewMat3,i=this.view.displayMat3,a=new o.Float(1).subtract(t);return e.multiply(t).add(i.multiply(a))}_getViewScreenMatrix(t){const e=this.view.viewMat3.multiply(this.view.tileMat3),i=this.view.tileMat3,a=new o.Float(1).subtract(t);return e.multiply(t).add(i.multiply(a))}_getColor(t,e){return o.ifElse(o.equal(e.isSDF,new o.Float(1)),this._getSDFColor(t,e),this._getSpriteColor(t,e))}_getSpriteColor(t,e){return o.texture2D(this.mosaicInfo.texture,t).multiply(e.color)}_getSDFColor(t,e){const i=o.texture2D(this.mosaicInfo.texture,t),a=new o.Float(.5).subtract(u.rgba2float(i)).multiply(e.distanceToPx).multiply(r.softEdgeRatio),l=o.clamp(new o.Float(.5).subtract(a),new o.Float(0),new o.Float(1)),s=e.color.multiply(l);let n=e.outlineSize;this.highlight&&(n=o.max(n,e.overrideOutlineColor.multiply(4)));const d=n.multiply(.5),c=o.abs(a).subtract(d),p=o.clamp(new o.Float(.5).subtract(c),new o.Float(0),new o.Float(1)),y=o.mix(e.outlineColor,e.color,e.overrideOutlineColor).multiply(p);return new o.Float(1).subtract(y.a).multiply(s).add(y)}_hittestSmallMarker(t,e,i){const{position:a,distance:l,smallSymbolDistance:r}=this.hittestRequest,s=l.subtract(r),{viewMat3:n,tileMat3:u}=this.view,d=n.multiply(u).multiply(new o.Vec3(i.pos,1)).xy,c=i.size.multiply(.5);return o.distance(d,a).subtract(c).add(s)}_hittestMarker(t,e,i){const{pos:a,sizeCorrection:l,isMapAligned:r}=i,n=new o.Vec3(t.offset.multiply(l),0),u=new o.Vec3(e.offsetNextVertex1.multiply(l),0),d=new o.Vec3(e.offsetNextVertex2.multiply(l),0),{viewMat3:c,tileMat3:p}=this.view,y=c.multiply(p).multiply(new o.Vec3(a,1)),V=this._getViewScreenMatrix(r).multiply(i.vvRotationMat3).multiply(i.placementMat3),m=y.add(V.multiply(n)).xy,h=y.add(V.multiply(u)).xy,x=y.add(V.multiply(d)).xy,_=this.hittestRequest.position,g=this.hittestRequest.distance,v=s.distPointTriangle(_,m,h,x);return o.ifElse(o.greaterThan(v,g),v,this._hittestSamples(m,h,x,t,e,i))}_hittestSamples(t,e,i,a,l,r){const{outlineSize:n,isSDF:u,distanceToPx:d}=r,c=this.hittestRequest.position,p=this.hittestRequest.distance,y=s.xyToBarycentric(c.add(new o.Vec2(o.negate(p),o.negate(p))),t,e,i),V=s.xyToBarycentric(c.add(new o.Vec2(0,o.negate(p))),t,e,i),m=s.xyToBarycentric(c.add(new o.Vec2(p,o.negate(p))),t,e,i),h=s.xyToBarycentric(c.add(new o.Vec2(o.negate(p),0)),t,e,i),x=s.xyToBarycentric(c,t,e,i),_=s.xyToBarycentric(c.add(new o.Vec2(p,0)),t,e,i),g=s.xyToBarycentric(c.add(new o.Vec2(o.negate(p),p)),t,e,i),v=s.xyToBarycentric(c.add(new o.Vec2(0,p)),t,e,i),S=s.xyToBarycentric(c.add(new o.Vec2(p,p)),t,e,i),w=a.textureUV.divide(this.mosaicInfo.size),f=l.textureUVNextVertex1.divide(this.mosaicInfo.size),M=l.textureUVNextVertex2.divide(this.mosaicInfo.size),C={color:new o.Vec4(1),outlineColor:new o.Vec4(1),overrideOutlineColor:new o.Float(1),outlineSize:n,distanceToPx:d,isSDF:u};let z=new o.Float(0);return z=z.add(s.inTriangle(y).multiply(this._getColor(b(y,w,f,M),C).a)),z=z.add(s.inTriangle(V).multiply(this._getColor(b(V,w,f,M),C).a)),z=z.add(s.inTriangle(m).multiply(this._getColor(b(m,w,f,M),C).a)),z=z.add(s.inTriangle(h).multiply(this._getColor(b(h,w,f,M),C).a)),z=z.add(s.inTriangle(x).multiply(this._getColor(b(x,w,f,M),C).a)),z=z.add(s.inTriangle(_).multiply(this._getColor(b(_,w,f,M),C).a)),z=z.add(s.inTriangle(g).multiply(this._getColor(b(g,w,f,M),C).a)),z=z.add(s.inTriangle(v).multiply(this._getColor(b(v,w,f,M),C).a)),z=z.add(s.inTriangle(S).multiply(this._getColor(b(S,w,f,M),C).a)),o.step(z,new o.Float(.05)).multiply(s.failHittest(this.hittestRequest))}}e.__decorate([i.option(d.VisualVariableColor)],w.prototype,"visualVariableColor",void 0),e.__decorate([i.option(c.VisualVariableOpacity)],w.prototype,"visualVariableOpacity",void 0),e.__decorate([i.option(p.VisualVariableRotation)],w.prototype,"visualVariableRotation",void 0),e.__decorate([i.option(y.VisualVariableSizeMinMaxValue)],w.prototype,"visualVariableSizeMinMaxValue",void 0),e.__decorate([i.option(V.VisualVariableSizeScaleStops)],w.prototype,"visualVariableSizeScaleStops",void 0),e.__decorate([i.option(m.VisualVariableSizeStops)],w.prototype,"visualVariableSizeStops",void 0),e.__decorate([i.option(h.VisualVariableSizeUnitValue)],w.prototype,"visualVariableSizeUnitValue",void 0),e.__decorate([i.uniform(n.MosaicInfo)],w.prototype,"mosaicInfo",void 0),e.__decorate([e.__param(0,i.input(_)),e.__param(1,i.input(g))],w.prototype,"vertex",null),e.__decorate([e.__param(0,i.input(v))],w.prototype,"fragment",null),t.MarkerFragmentInput=v,t.MarkerShader=w,t.MarkerVertexInput=_,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});