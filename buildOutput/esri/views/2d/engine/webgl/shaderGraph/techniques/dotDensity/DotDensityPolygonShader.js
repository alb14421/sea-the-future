// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../chunks/tslib.es6","../../../definitions","../../GraphShaderModule","../../graph/glsl","../shaders/AFeatureShader","../shaders/hittestUtils","../shaders/utils"],function(t,e,o,r,i,s,a,n){"use strict";class l extends s.FeatureVertexInput{}e.__decorate([r.location(3,i.Float)],l.prototype,"inverseArea",void 0);class d extends s.FeatureFragmentInput{}class p extends r.UniformGroup{}e.__decorate([r.uniform(i.FixedArray.ofType(i.Vec4,2))],p.prototype,"isActive",void 0),e.__decorate([r.uniform(i.FixedArray.ofType(i.Vec4,8))],p.prototype,"colors",void 0),e.__decorate([r.uniform(i.Float)],p.prototype,"dotValue",void 0);class u extends r.UniformGroup{}e.__decorate([r.uniform(i.Sampler2D)],u.prototype,"dotTexture0",void 0),e.__decorate([r.uniform(i.Sampler2D)],u.prototype,"dotTexture1",void 0),e.__decorate([r.uniform(i.Float)],u.prototype,"tileZoomFactor",void 0),e.__decorate([r.uniform(i.Float)],u.prototype,"pixelRatio",void 0),e.__decorate([r.uniform(i.Float)],u.prototype,"tileDotsOverArea",void 0);class c extends s.AFeatureShader{constructor(){super(...arguments),this.type="DotDensityPolygonShader"}_dotThreshold(t,e,o){return t.divide(e).divide(o)}vertex(t){const e=new i.Mat3(2/o.tileSize,0,0,0,-2/o.tileSize,0,-1,1,1).multiply(new i.Vec3(t.pos,1)),r=this.clip(t.id),s=new i.Vec4(e.xy,r,1),a=this.storage.getVVData(t.id).multiply(this.instance.isActive.get(0)).multiply(t.inverseArea),n=this.storage.getDataDrivenData0(t.id).multiply(this.instance.isActive.get(1)).multiply(t.inverseArea),l=this.draw.tileZoomFactor.multiply(o.tileSize).divide(this.draw.pixelRatio),d=this._dotThreshold(a,this.instance.dotValue,this.draw.tileDotsOverArea),p=this._dotThreshold(n,this.instance.dotValue,this.draw.tileDotsOverArea),u=t.pos.add(.5).divide(l);return{glPosition:s,color:new i.Vec4(0,0,0,0),textureCoords:u,thresholds0:d,thresholds1:p}}fragment(t){const e=new r.FragmentOutput,o=i.texture2D(this.draw.dotTexture0,t.textureCoords),s=i.texture2D(this.draw.dotTexture1,t.textureCoords),a=t.thresholds0.subtract(o),l=t.thresholds1.subtract(s);let d;const p=i.Mat4.fromColumns(this.instance.colors[0],this.instance.colors[1],this.instance.colors[2],this.instance.colors[3]),u=i.Mat4.fromColumns(this.instance.colors[4],this.instance.colors[5],this.instance.colors[6],this.instance.colors[7]);if(this.blending){const t=i.step(new i.Float(0),a),e=i.step(new i.Float(0),l),o=i.dot(t,a).add(i.dot(e,l)),r=i.step(o,new i.Float(0)),s=new i.Float(1).subtract(r),n=o.add(r),c=a.multiply(t).divide(n),h=l.multiply(e).divide(n),m=p.multiply(c).add(u.multiply(h));d=s.multiply(m)}else{const t=i.max(n.max4(a),n.max4(l)),e=i.step(t,new i.Float(0)),o=new i.Float(1).subtract(e),r=i.step(t,a),s=i.step(t,l),c=p.multiply(r).add(u.multiply(s));d=o.multiply(c)}return e.fragColor=d,e}hittest(t){return a.failHittest(this.hittestRequest)}}e.__decorate([r.define],c.prototype,"blending",void 0),e.__decorate([r.uniform(p)],c.prototype,"instance",void 0),e.__decorate([r.uniform(u)],c.prototype,"draw",void 0),e.__decorate([e.__param(0,r.input(l))],c.prototype,"vertex",null),e.__decorate([e.__param(0,r.input(s.FeatureFragmentInput))],c.prototype,"fragment",null),t.DotDensityPolygonDrawUniforms=u,t.DotDensityPolygonFragmentInput=d,t.DotDensityPolygonInstanceUniforms=p,t.DotDensityPolygonShader=c,t.DotDensityPolygonVertexInput=l,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});