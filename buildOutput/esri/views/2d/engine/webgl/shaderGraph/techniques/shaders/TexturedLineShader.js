// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../chunks/tslib.es6","../../../../../../../core/screenUtils","../../../../../../../symbols/cim/constants","../../GraphShaderModule","../../graph/glsl","./AFeatureShader","./constants","./LineShader","./MosaicInfo","./utils"],function(t,e,a,i,n,o,l,r,s,c,d){"use strict";class u extends s.LineVertexInput{}e.__decorate([n.location(9,o.Float)],u.prototype,"accumulatedDistance",void 0),e.__decorate([n.location(10,o.Vec2)],u.prototype,"segmentDirection",void 0),e.__decorate([n.location(11,o.Float)],u.prototype,"offsetAlongLine",void 0),e.__decorate([n.location(12,o.Float)],u.prototype,"capType",void 0),e.__decorate([n.location(13,o.Vec4)],u.prototype,"tlbr",void 0);class p extends s.LineFragmentInput{}class m extends s.LineShader{constructor(){super(...arguments),this.type="TexturedLineShader"}_getDistanceRatio(t,e){const i=d.getBit(t.bitset,r.bitsetLineScaleDash);return i.multiply(o.max(e,new o.Float(.25)).multiply(new o.Float(2))).add(new o.Float(1).subtract(i).multiply(a.pt2px(1)))}_getSDFAlpha(t){const{halfWidth:e,normal:a,tlbr:n,patternSize:l,accumulatedDistance:r,offsetAlongLine:s,dashToPx:c,capType:u}=t,p=l.x.divide(i.dashSdfRasterizationScale).multiply(c),m=o.fract(r.add(s).divide(p)),y=o.mix(n.xy,n.zw,new o.Vec2(m,.5)),h=d.rgba2float(o.texture2D(this.mosaicInfo.texture,y)).multiply(2).subtract(1).multiply(i.dashSdfDistanceNormalization).multiply(c),f=a.y.multiply(e),g=o.cond([o.equal(u,new o.Float(1)),h.subtract(e)],[o.equal(u,new o.Float(2)),o.sqrt(o.pow(o.max(h,new o.Float(0)),new o.Float(2)).add(f.multiply(f))).subtract(e)],[!0,h]),x=o.clamp(new o.Float(.25).subtract(g),new o.Float(0),new o.Float(1));return new o.Vec4(x)}_getPatternColor(t){const{halfWidth:e,normal:a,color:i,accumulatedDistance:n,patternSize:l,sampleAlphaOnly:r,tlbr:s}=t,c=l.y.multiply(new o.Float(2).multiply(e).divide(l.x)),d=o.fract(n.divide(c)),u=new o.Float(.5).multiply(a.y).add(new o.Float(.5)),p=o.mix(s.xy,s.zw,new o.Vec2(u,d));let m=o.texture2D(this.mosaicInfo.texture,p);return null!=this.visualVariableColor&&(m=o.ifElse(o.greaterThan(r,new o.Float(.5)),new o.Vec4(i.a),i)),m}vertex(t,e){const{segmentDirection:a,tlbr:i,bitset:n}=t,l=s.getLineVertexData(this,t),c=t.accumulatedDistance.divide(this.view.displayZoomFactor).add(o.dot(a,l.scaledOffset)),u=new o.Vec2(i.z.subtract(i.x),i.w.subtract(i.y)),p=i.divide(this.mosaicInfo.size.xyxy),m=d.getBit(n,r.bitsetLineIsSdf),y=d.getBit(n,r.bitsetGenericConsiderAlphaOnly),h=o.ifElse(o.greaterThan(m,new o.Float(.5)),this._getDistanceRatio(t,l.scaledHalfWidth),new o.Float(1));return{...l,tlbr:p,patternSize:u,accumulatedDistance:c,isSDF:m,sampleAlphaOnly:y,dashToPx:h,offsetAlongLine:t.offsetAlongLine,capType:t.capType,...this.maybeRunHittest(t,e,l.halfWidth)}}fragment(t){const{color:e,opacity:a,isSDF:i}=t,n=s.getLineAntialiasing(t,this.antialiasingControls.blur),l=o.ifElse(o.greaterThan(i,new o.Float(.5)),this._getSDFAlpha(t),this._getPatternColor(t)),r=e.multiply(a).multiply(n).multiply(l);return this.getFragmentOutput(r,t)}}e.__decorate([n.uniform(c.MosaicInfo)],m.prototype,"mosaicInfo",void 0),e.__decorate([e.__param(0,n.input(u)),e.__param(1,n.input(l.BaseHittestVertexInput))],m.prototype,"vertex",null),t.TexturedLineFragmentInput=p,t.TexturedLineShader=m,t.TexturedLineVertexInput=u,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});