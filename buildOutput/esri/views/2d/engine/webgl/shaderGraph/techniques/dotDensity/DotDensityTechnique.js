// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../definitions","../FeatureTechnique","../featureTechniqueUtils","./DotDensityPointShader","./DotDensityPolygonShader","./DotDensityResources","../shaders/FillShader"],function(e,t,i,r,s,o,n,a){"use strict";class l extends i.FeatureTechnique{constructor(){super(...arguments),this.type=8,this.shaders={polygon:new o.DotDensityPolygonShader,point:new s.DotDensityPointShader,fill:new a.FillShader},this._resources=new Map}render(e,t){r.isHighlight(e)||r.isHittest(e)?this._renderPolygons(e,t):this._renderDotDensity(e,t)}_renderPolygons(e,t){const{painter:i}=e;i.setShader({shader:this.shaders.fill,uniforms:{...r.getFeatureUniforms(e,t.target),visualVariableColor:null,visualVariableOpacity:null},defines:{...r.getSelectionDefines(e)},optionalAttributes:{zoomRange:!1},useComputeBuffer:r.isHittest(e)}),i.setPipelineState(r.getFeaturePipelineState(e)),i.submitDraw(e,t)}_renderDotDensity(e,i){const{context:s,painter:o,requiredLevel:n}=e,a=i.instance.getInput().uniforms,l=this._getOrCreateResourcesRecord(s),u=l.getDotDensityTextures(s,t.tileSize,a.seed),d=1/2**(n-i.target.key.level),c=t.tileSize,h=c*window.devicePixelRatio*c*window.devicePixelRatio,g=1/d*(1/d),p=a.dotScale?e.state.scale/a.dotScale:1,f=a.dotValue*p*g;o.setShader({shader:this.shaders.polygon,uniforms:{...r.getFeatureUniforms(e,i.target),instance:{isActive:a.isActive,colors:a.colors,dotValue:Math.max(1,f)},draw:{dotTexture0:{unit:t.textureBindingRenderer0,texture:u[0]},dotTexture1:{unit:t.textureBindingRenderer1,texture:u[1]},tileZoomFactor:d,pixelRatio:window.devicePixelRatio,tileDotsOverArea:h/(t.tileSize*window.devicePixelRatio*t.tileSize*window.devicePixelRatio)}},defines:{...r.getSelectionDefines(e),blending:a.blending},optionalAttributes:{},useComputeBuffer:!1});const w=s.getViewport();s.setViewport(0,0,t.tileSize,t.tileSize);const D=s.getBoundFramebufferObject(),S=l.getFBO(s);s.bindFramebuffer(S),s.setClearColor(0,0,0,0),s.clear(16384),o.setPipelineState({color:{write:[!0,!0,!0,!0],blendMode:"composite"},depth:!1,stencil:!1}),o.updatePipelineState(s),o.submitDraw(e,i),s.bindFramebuffer(D),s.setViewport(w.x,w.y,w.width,w.height);const y=l.getFBO(s).colorTexture,x={shader:this.shaders.point,uniforms:{view:r.getViewUniforms(e,i.target),instance:{dotSize:a.dotSize},draw:{locations:{unit:t.textureBindingRenderer0,texture:y},tileZoomFactor:1,pixelRatio:window.devicePixelRatio}},defines:{...r.getSelectionDefines(e)},optionalAttributes:{},useComputeBuffer:!1};o.setPipelineState(r.getFeaturePipelineState(e)),o.submitDrawMesh(s,x,l.getDotDensityMesh(s))}shutdown(e){super.shutdown(e),this._resources.get(e)?.destroy(),this._resources.delete(e)}_getOrCreateResourcesRecord(e){let t=this._resources.get(e);return null==t&&(t=new n.DotDensityResources,this._resources.set(e,t)),t}}e.DotDensityTechnique=l,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});