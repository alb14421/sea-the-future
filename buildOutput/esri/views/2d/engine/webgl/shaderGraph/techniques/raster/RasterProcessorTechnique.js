// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../definitions","../Technique","./processor/AspectTechnique","./processor/BandArithmeticTechnique","./processor/ColormapToRGBTechnique","./processor/CompositeBandTechnique","./processor/ComputeChangeTechnique","./processor/ContrastBrightnessTechnique","./processor/ConvolutionTechnique","./processor/CurvatureTechnique","./processor/ExtractBandTechnique","./processor/FocalStatisticsTechnique","./processor/GrayscaleTechnique","./processor/HillshadeTechnique","./processor/LocalTechnique","./processor/MaskTechnique","./processor/NDVITechnique","./processor/RemapTechnique","./processor/ReprojectTechnique","./processor/ShadedReliefTechnique","./processor/SlopeTechnique","./processor/StretchTechnique","./processor/textureUtils"],function(e,s,o,c,t,i,r,n,h,u,a,p,q,T,l,d,C,m,B,S,f,R,g,_){"use strict";const v=new Map([["Aspect",c.AspectTechnique],["BandArithmetic",t.BandArithmeticTechnique],["ColormapToRGB",i.ColormapToRGBTechnique],["CompositeBand",r.CompositeBandTechnique],["ComputeChange",n.ComputeChangeTechnique],["ContrastBrightness",h.ContrastBrightnessTechnique],["Convolution",u.ConvolutionTechnique],["Curvature",a.CurvatureTechnique],["ExtractBand",p.ExtractBandTechnique],["Grayscale",T.GrayscaleTechnique],["Hillshade",l.HillshadeTechnique],["Local",d.LocalTechnique],["Mask",C.MaskTechnique],["NDVI",m.NDVITechnique],["Remap",B.RemapTechnique],["Reproject",S.ReprojectTechnique],["ShadedRelief",f.ShadedReliefTechnique],["Slope",R.SlopeTechnique],["Statistics",q.FocalStatisticsTechnique],["Stretch",g.StretchTechnique]]);class b extends o.Technique{constructor(){super(...arguments),this.type=1,this.shaders={},this._techniques=new Map}shutdown(e){super.shutdown(e),this._fbo?.dispose(),this._fbo=void 0;for(const e of this._techniques.values())e.shutdown();this._techniques.clear()}render(e,o){this._fbo??=_.createNewFBO(e.context,s.tileSize,s.tileSize);let{name:c}=e.rasterFunction;if("Arithmetic"===c&&(c="Local"),!this._techniques.has(c)){const e=v.get(c);if(!e)return;this._techniques.set(c,new e)}this._techniques.get(c).render(e,{...o,processorFbo:this._fbo})}}e.RasterProcessorTechnique=b,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});