// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../chunks/tslib.es6","../../GraphShaderModule","../../graph/glsl","./AFeatureShader","./constants","./FillShader","./LocalTileOffset","./MosaicInfo","./utils"],function(e,t,o,l,i,a,r,n,s,d){"use strict";class c extends r.FillVertexInput{}t.__decorate([o.location(5,l.Vec4)],c.prototype,"tlbr",void 0),t.__decorate([o.location(6,l.Float)],c.prototype,"width",void 0),t.__decorate([o.location(7,l.Float)],c.prototype,"height",void 0),t.__decorate([o.location(8,l.Vec2)],c.prototype,"offset",void 0),t.__decorate([o.location(9,l.Vec2)],c.prototype,"scale",void 0),t.__decorate([o.location(10,l.Float)],c.prototype,"angle",void 0);class p extends i.FeatureFragmentInput{}function u(e,t,o,i,r){const n=l.equal(d.getBit(r,a.bitsetFillRandomPatternOffset),l.float(1)),s=d.rgba2float(new l.Vec4(e,0));return l.ifElse(n,l.mat3(i.divide(t.x),o.divide(t.y),0,l.negate(o.divide(t.x)),i.divide(t.y),0,d.rand(l.vec2(s,0)),d.rand(l.vec2(0,s)),1),l.mat3(i.divide(t.x),o.divide(t.y),0,l.negate(o.divide(t.x)),i.divide(t.y),0,0,0,1))}function f(e,t){const o=e.view.requiredZoomFactor,i=new l.Vec2(t.width,t.height),r=i.multiply(t.scale).multiply(o),n=t.angle.multiply(a.c256ToRad),s=l.sin(n),c=l.cos(n),p=u(t.id,r,s,c,t.bitset),f=e.localTileOffset.getPatternOffsetAtTileOrigin(i,s,c),m=o.multiply(t.scale).multiply(t.offset.subtract(f)).divide(r),x=new l.Vec3(t.pos,1),y=p.multiply(x).xy.subtract(m),g=t.tlbr.divide(e.mosaicInfo.size.xyxy);let v=d.getBit(t.bitset,a.bitsetGenericConsiderAlphaOnly);return null!=e.visualVariableColor&&(v=l.ifElse(d.isNan(e.storage.getColorValue(t.id)),new l.Float(0),v)),{tileTextureCoord:y,tlbr:g,sampleAlphaOnly:v}}function m(e,t){const o=l.mod(t.tileTextureCoord,new l.Float(1)),i=l.mix(t.tlbr.xy,t.tlbr.zw,o);let a=l.texture2D(e.mosaicInfo.texture,i);return a=l.ifElse(l.greaterThan(t.sampleAlphaOnly,new l.Float(.5)),a.aaaa,a),t.color.multiply(a)}class x extends r.FillShader{constructor(){super(...arguments),this.type="ComplexFillShader"}vertex(e,t){return{...super.vertex(e,t),...f(this,e)}}fragment(e){const t=m(this,e);return this.getFragmentOutput(t,e,new l.Float(0))}}t.__decorate([o.uniform(s.MosaicInfo)],x.prototype,"mosaicInfo",void 0),t.__decorate([o.uniform(n.LocalTileOffset)],x.prototype,"localTileOffset",void 0),t.__decorate([t.__param(0,o.input(c)),t.__param(1,o.input(i.BaseHittestVertexInput))],x.prototype,"vertex",null),t.__decorate([t.__param(0,o.input(p))],x.prototype,"fragment",null),e.ComplexFillFragmentInput=p,e.ComplexFillShader=x,e.ComplexFillVertexInput=c,e.getComplexFillFragmentColor=m,e.getComplexFillVertexData=f,e.getPatternMatrix=u,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});