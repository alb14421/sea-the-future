// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../chunks/tslib.es6","../../GraphShaderModule","../../graph/glsl","./AAnimatedPolyShader","./AAnimatedShader","../shaders/hittestUtils","../shaders/LineShader"],function(t,e,i,o,a,n,l,s){"use strict";class r extends a.PolyVertexInput{}e.__decorate([i.location(10,o.Float)],r.prototype,"accumulatedDistance",void 0),e.__decorate([i.location(11,o.Vec2)],r.prototype,"normal",void 0),e.__decorate([i.location(12,o.Vec2)],r.prototype,"segmentDirection",void 0);class d extends a.PolyFragmentInput{}class c extends a.AAnimatedPolyShader{constructor(){super(...arguments),this.type="AnimatedLineShader",this.computeAttributes={pos:["nextPos1","nextPos2"]}}vertex(t,e){const{animationPointerAndBaseSizeAndReferenceSize:i}=t,a=i.xy,{distanceToPx:l,ndc:s,z:r,color:d,isOutline:c,strokeWidth:u,isSDF:m,baseSize:p,scale:y,scaleSymbolsProportionally:h,evalParams:x}=this._vertexPoly(t),S=t.sizing.xy,v=S.x.multiply(p).divide(S.y),P=n.getValue(a,6,x).a,g=t.accumulatedDistance.subtract(P),{normal:w}=t,_=t.normal.y,b=g.divide(this.view.displayZoomFactor).add(o.dot(t.segmentDirection,t.offset)).divide(v),F=_.add(1).divide(2),f=new o.Vec2(b,F),A=t.tlbr.divide(this.mosaicInfo.size.xyxy);return{glPosition:new o.Vec4(s,r,1),tlbr:A,uv:f,color:d.multiply(new o.Float(1).subtract(c)),outlineColor:d.multiply(c),distanceToPx:l,strokeWidth:u.multiply(o.mix(new o.Float(1),y,h)),isOutline:c,isSDF:m,halfWidth:p.divide(2),normal:w,...this.maybeRunHittest(t,e,{pos:t.pos,size:p,sizeCorrection:new o.Float(1),isMapAligned:new o.Float(1),vvRotationMat3:new o.Mat3(1,0,0,0,1,0,0,0,1),placementMat3:new o.Mat3(1,0,0,0,1,0,0,0,1),outlineSize:new o.Float(1),distanceToPx:l,isSDF:m})}}fragment(t){const e=this._fragmentPoly(t),{halfWidth:i,normal:a}=t,n=s.getLineThinFactor(i),l=o.length(a).multiply(i),r=o.clamp(n.multiply(i.subtract(l)).divide(n.subtract(new o.Float(1))),new o.Float(0),new o.Float(1));return this.getFragmentOutput(e.multiply(r),t)}hittest(t,e,i){const{viewMat3:a,tileMat3:n}=this.view,s=a.multiply(n),r=s.multiply(new o.Vec3(t.pos,1)),d=s.multiply(new o.Vec3(e.nextPos1,1)),c=s.multiply(new o.Vec3(e.nextPos2,1)),{distance:u,smallSymbolDistance:m,smallSymbolSizeThreshold:p}=this.hittestRequest,y=o.step(i,p.multiply(.5)).multiply(u.subtract(m)),h=this.hittestRequest.position;return o.min(l.distPointSegment(h,r.xy,d.xy),l.distPointSegment(h,r.xy,c.xy)).subtract(i).add(y)}}e.__decorate([e.__param(0,i.input(r)),e.__param(1,i.input(a.PolyHittestVertexInput))],c.prototype,"vertex",null),e.__decorate([e.__param(0,i.input(d))],c.prototype,"fragment",null),t.AnimatedLineShader=c,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});