// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../../../chunks/tslib.es6","../../../../GraphShaderModule","../../../../graph/glsl","./BaseRasterProcessorShader","./math","./MultiRasterMixin"],function(e,a,t,s,o,n,l){"use strict";class r extends t.UniformGroup{}a.__decorate([t.uniform(s.Vec2)],r.prototype,"domainRange",void 0);class i extends(l.MultiRasterMixin(o.BaseRasterProcessorShader)){constructor(){super(...arguments),this.type="LocalShader",this.isOutputRounded=!1}_process(e){if("conditional"===this.operationName)return this._conditional(e);const{a,b:t,alpha:s}=this._getRasterValues(e),{value:o,alpha:n}=this._compute(a,t,s);return this._processResult(o,n)}_processResult(e,a){const t=n.getRangeClipFactor(e,this.domainRangeConfig.domainRange),o=new s.Vec4(e,e,e,a).multiply(t);return this.isOutputRounded?n.roundOutput(o):o}_compute(e,a,t){const{operationName:o}=this;let l;switch(o){case"plus":l=e.add(a);break;case"minus":l=e.subtract(a);break;case"times":l=e.multiply(a);break;case"divide":case"floatdivide":l=e.multiply(n.invertValue(a)),t=t.multiply(s.float(s.abs(s.sign(a))));break;case"floordivide":l=s.floor(e.multiply(n.invertValue(a))),t=t.multiply(s.float(s.abs(s.sign(a))));break;case"square":l=e.multiply(e);break;case"sqrt":l=s.sqrt(e);break;case"power":l=s.pow(e,a);break;case"ln":l=s.ifElse(s.greaterThan(e,new s.Float(0)),s.log(e),new s.Float(0)),t=t.multiply(this._isAboveZero(e));break;case"log10":l=s.ifElse(s.greaterThan(e,new s.Float(0)),s.log2(e).multiply(n.invertValue(s.log2(new s.Float(10)))),new s.Float(0)),t=t.multiply(this._isAboveZero(e));break;case"log2":l=s.ifElse(s.greaterThan(e,new s.Float(0)),s.log2(e),new s.Float(0)),t=t.multiply(this._isAboveZero(e));break;case"exp":l=s.exp(e);break;case"exp10":l=s.pow(new s.Float(10),e);break;case"exp2":l=s.pow(new s.Float(2),e);break;case"rounddown":l=s.floor(e);break;case"roundup":l=s.ceil(e);break;case"int":l=s.sign(e).multiply(s.floor(s.abs(e)));break;case"mod":l=s.mod(e,a);break;case"negate":l=s.negate(e);break;case"abs":l=s.abs(e);break;case"acos":{const a=this._isAbsBiggerThanOne(e);l=s.ifElse(a,new s.Float(0),s.acos(e)),t=s.ifElse(a,new s.Float(0),t);break}case"acosh":l=s.acosh(e);break;case"asin":{const a=this._isAbsBiggerThanOne(e);l=s.ifElse(a,new s.Float(0),s.asin(e)),t=s.ifElse(a,new s.Float(0),t);break}case"asinh":l=s.asinh(e);break;case"atan":l=s.atan(e);break;case"atanh":{const a=this._isAbsBiggerThanOne(e);l=s.ifElse(a,new s.Float(0),s.atanh(e)),t=s.ifElse(a,new s.Float(0),t);break}case"atan2":l=s.atan(e,a);break;case"cos":l=s.cos(e);break;case"cosh":l=s.cosh(e);break;case"sin":l=s.sin(e);break;case"sinh":l=s.sinh(e);break;case"tan":l=s.tan(e);break;case"tanh":l=s.tanh(e);break;case"bitwiseand":l=new s.Float(s.bitAnd(new s.Int(e),new s.Int(a)));break;case"bitwiseor":l=new s.Float(s.bitOr(new s.Int(e),new s.Int(a)));break;case"bitwiseleftshift":l=new s.Float(s.bitShift(new s.Int(e),new s.Int(a)));break;case"bitwiserightshift":l=new s.Float(s.bitRShift(new s.Int(e),new s.Int(a)));break;case"bitwisenot":l=new s.Float(s.bitNot(new s.Int(e)));break;case"bitwisexor":l=new s.Float(s.bitXor(new s.Int(e),new s.Int(a)));break;case"booleanand":l=s.float(s.and(s.notEqual(e,new s.Float(0)),s.notEqual(a,new s.Float(0))));break;case"booleanor":l=s.float(s.or(s.notEqual(e,new s.Float(0)),s.notEqual(a,new s.Float(0))));break;case"booleannot":l=s.float(s.equal(e,new s.Float(0)));break;case"booleanxor":l=s.float(s.xor(s.notEqual(e,new s.Float(0)),s.notEqual(a,new s.Float(0))));break;case"greaterthan":l=s.float(s.greaterThan(e,a));break;case"greaterthanequal":l=s.float(s.greaterThanEqual(e,a));break;case"lessthan":l=s.float(s.lessThan(e,a));break;case"lessthanequal":l=s.float(s.lessThanEqual(e,a));break;case"equalto":l=s.float(s.equal(e,a));break;case"notequal":l=s.float(s.notEqual(e,a));break;case"isnull":l=s.float(s.equal(t,new s.Float(0))),t=new s.Float(1);break;case"setnull":{const o=s.float(s.equal(e,new s.Float(0)));l=o.multiply(a),t=t.multiply(o);break}default:l=e}return{value:l,alpha:t}}_conditional(e){const{a,b:t,c:o,alpha:n}=this._getRasterValues(e),l=new s.Float(s.abs(s.sign(a))),r=s.mix(o,t,l);return this._processResult(r,n)}_isAboveZero(e){return s.float(s.greaterThan(e,new s.Float(0)))}_isAbsBiggerThanOne(e){return s.greaterThan(s.abs(e),new s.Float(1))}}a.__decorate([t.define],i.prototype,"operationName",void 0),a.__decorate([t.define],i.prototype,"isOutputRounded",void 0),a.__decorate([t.uniform(r)],i.prototype,"domainRangeConfig",void 0),e.DomainRangeConfig=r,e.LocalShader=i,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});