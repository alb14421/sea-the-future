// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../../../chunks/tslib.es6","../../../../GraphShaderModule","../../../../graph/glsl","../surface","./BaseRasterProcessorShader","./math"],function(e,t,o,r,i,s,p){"use strict";class d extends o.UniformGroup{}t.__decorate([o.uniform(r.Float)],d.prototype,"pixelSizePower",void 0),t.__decorate([o.uniform(r.Float)],d.prototype,"pixelSizeFactor",void 0),t.__decorate([o.uniform(r.Float)],d.prototype,"zFactor",void 0),t.__decorate([o.uniform(r.Vec2)],d.prototype,"cellSize",void 0);class a extends s.BaseRasterProcessorShader{constructor(){super(...arguments),this.type="SlopeShader",this.isOutputRounded=!1,this.percentRise=!1}_process(e){const{cellSize:t,pixelSizePower:o,pixelSizeFactor:s,zFactor:d}=this.slopeConfig,a=r.pow(t,new r.Vec2(o)).multiply(s).add(d).divide(t.multiply(8)),{texture:l}=this.config,u=i.getSurfaceValues(l,e,this.config.srcImageSize),{x:c,y:n}=i.computeDeltaZ(u,a),f=r.sqrt(c.multiply(c).add(n.multiply(n))),h=this.percentRise?f.multiply(100):r.atan(f).multiply(57.2957795),y=new r.Vec4(h,h,h,u[9]);return this.isOutputRounded?p.roundOutput(y):y}}t.__decorate([o.define],a.prototype,"isOutputRounded",void 0),t.__decorate([o.define],a.prototype,"percentRise",void 0),t.__decorate([o.uniform(d)],a.prototype,"slopeConfig",void 0),e.SlopeShader=a,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});