// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../../../../chunks/tslib.es6","../../../../GraphShaderModule","../../../../graph/glsl","./BaseRasterProcessorShader","./LocalShader","./math","./MultiRasterMixin"],function(e,t,o,a,r,i,s,n){"use strict";class d extends(n.MultiRasterMixin(r.BaseRasterProcessorShader)){constructor(){super(...arguments),this.type="ComputeChangeShader",this.isOutputRounded=!1}_process(e){const{a:t,b:o,alpha:r}=this._getRasterValues(e);let i=t.subtract(o);"relative-difference"===this.method&&(i=i.multiply(s.invertValue(a.max(a.abs(t),a.abs(o)))));const n=s.getRangeClipFactor(i,this.domainRangeConfig.domainRange),d=new a.Vec4(i,i,i,r).multiply(n);return this.isOutputRounded?s.roundOutput(d):d}}t.__decorate([o.define],d.prototype,"method",void 0),t.__decorate([o.define],d.prototype,"isOutputRounded",void 0),t.__decorate([o.uniform(i.DomainRangeConfig)],d.prototype,"domainRangeConfig",void 0),e.ComputeChangeShader=d,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});