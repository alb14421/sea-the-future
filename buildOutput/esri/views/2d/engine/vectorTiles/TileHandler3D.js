// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../../core/MemCache","../../../../core/promiseUtils","../../../../core/libs/gl-matrix-2/factories/mat3f32","../../../../geometry/support/aaBoundingRect","./constants","./TileHandler","./VectorTile","../../tiling/TileInfoViewPOT","../../tiling/TileKey"],function(e,t,i,s,o,n,l,r,a){"use strict";class h extends n.TileHandler{constructor(e,t,i,s){super(e,t,i,e.tileInfo.lods.length-1),this._memCache=s,this._vectorTiles=new Map,this._ongoingTileRequests=new Map,this._ongoingRequestToController=new Map,this._tileInfoView=new r(e.tileInfo,e.fullExtent)}destroy(){super.destroy(),this._ongoingRequestToController.forEach(e=>e.abort()),this._ongoingRequestToController.clear(),this._ongoingTileRequests.clear(),this._vectorTiles.clear()}async getVectorTile(n,r){const h=new a(n[0],n[1],n[2],0);let g=this._vectorTiles.get(h.id)??this._memCache.get(h.id);if(g)return g.retain(),g;const c=await this._getVectorTileData(h);if(t.throwIfAborted(r),!this._layer)return null;if(g=this._vectorTiles.get(h.id)??this._memCache.get(h.id),g)return g.retain(),g;const T=this._layer.tileInfo.getTileBounds(s.create(),h),u=this._tileInfoView.getTileResolution(n[0]);return g=new l.VectorTile(h,u,T[0],T[3],o.tilePixelSize,o.tilePixelSize,this._styleRepository,this),g.setData(c),c&&(g.retain(),this._memCache.put(h.id,g,e.MinPriority),this._vectorTiles.set(h.id,g)),g.neededForCoverage=!0,g.transforms.tileUnitsToPixels=i.fromValues(1/8,0,0,0,1/8,0,0,0,1),g}updateTileSize(e){this._memCache.updateSize(e.id,e)}onDisposeTile(e){this._vectorTiles.delete(e.id)}_getVectorTileData(e){const t=e.id;if(this._ongoingTileRequests.has(t))return this._ongoingTileRequests.get(t);const i=new AbortController,s={signal:i.signal},o=this._getParsedVectorTileData(e,s).then(e=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),e)).catch(()=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),null));return this._ongoingTileRequests.set(t,o),this._ongoingRequestToController.set(t,i),o}_getParsedVectorTileData(e,t){return this.fetchTileData(e,t).then(i=>this.parseTileData({key:e,data:i},t))}}return h});