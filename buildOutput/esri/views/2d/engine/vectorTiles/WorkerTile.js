// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../../core/promiseUtils","./Placement","./TileParser"],function(e,t,s){"use strict";return class{constructor(e,s,r,i){this.status=0,this.placementEngine=new t.PlacementEngine,this.tileKey=e,this.refKeys=s,this._workerTileHandler=r,this._styleRepository=i}release(){this.tileKey="",this.refKeys=null,this.status=0,this._workerTileHandler=null}async parse(t,s){const r=s?.signal;if(null!=r){const e=()=>{r.removeEventListener("abort",e),this.status=4};r.addEventListener("abort",e)}let i;const n={bucketsWithData:[],emptyBuckets:null};try{i=await this._parse(t,s)}catch(t){if(e.isAbortError(t))throw t;return{result:n,transferList:[]}}this.status=2;const a=n.bucketsWithData,l=[];for(const e of i)if(e.hasFeatures()){const t=e.serialize();a.push(t)}else l.push(e.layer.uid);const o=[...a];let u=null;return l.length>0&&(u=Uint32Array.from(l),o.push(u.buffer)),n.emptyBuckets=u,{result:n,transferList:o}}setObsolete(){this.status=4}getLayers(){return this._workerTileHandler.getLayers()}getWorkerTileHandler(){return this._workerTileHandler}async _parse(e,t){const r=e.sourceName2DataAndRefKey;return 0===Object.keys(r).length?[]:(this.status=3,new s(r,this,t.client,e.sourceDataMaxLOD,this._styleRepository,e.styleLayerUIDs).parse(t))}}});