// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../Color","../../../../../core/colorUtils","../../../unitBezier","../GeometryUtils","./types"],function(t,e,r,n,s,a){"use strict";class o{constructor(t){this._parent=t,this._vars={}}add(t,e){this._vars[t]=e}get(t){return this._vars[t]?this._vars[t]:this._parent?this._parent.get(t):null}}class i{constructor(){this.type=a.valueType}static parse(t){if(t.length>1)throw new Error('"id" does not expect arguments');return new i}evaluate(t,e){return t?.id}}class l{constructor(){this.type=a.stringType}static parse(t){if(t.length>1)throw new Error('"geometry-type" does not expect arguments');return new l}evaluate(t,e){if(!t)return null;switch(t.type){case 1:return"Point";case 2:return"LineString";case 3:return"Polygon";default:return null}}}class u{constructor(){this.type=a.objectType}static parse(t){if(t.length>1)throw new Error('"properties" does not expect arguments');return new u}evaluate(t,e){return t?.values}}class c{constructor(){this.type=a.numberType}static parse(t){if(t.length>1)throw new Error('"zoom" does not expect arguments');return new c}evaluate(t,e){return e}}class h{constructor(t,e,r){this._lhs=t,this._rhs=e,this._compare=r,this.type=a.booleanType}static parse(t,e,r){if(3!==t.length&&4!==t.length)throw new Error(`"${t[0]}" expects 2 or 3 arguments`);if(4===t.length)throw new Error(`"${t[0]}" collator not supported`);return new h(tt(t[1],e),tt(t[2],e),r)}evaluate(t,e){return this._compare(this._lhs.evaluate(t,e),this._rhs.evaluate(t,e))}}class p extends h{static parse(t,e){return h.parse(t,e,(t,e)=>t===e)}}class g extends h{static parse(t,e){return h.parse(t,e,(t,e)=>t!==e)}}class f extends h{static parse(t,e){return h.parse(t,e,(t,e)=>t<e)}}class w extends h{static parse(t,e){return h.parse(t,e,(t,e)=>t<=e)}}class y extends h{static parse(t,e){return h.parse(t,e,(t,e)=>t>e)}}class m extends h{static parse(t,e){return h.parse(t,e,(t,e)=>t>=e)}}class b{constructor(t){this._arg=t,this.type=a.booleanType}static parse(t,e){if(2!==t.length)throw new Error('"!" expects 1 argument');return new b(tt(t[1],e))}evaluate(t,e){return!this._arg.evaluate(t,e)}}class v{constructor(t){this._args=t,this.type=a.booleanType}static parse(t,e){const r=[];for(let n=1;n<t.length;n++)r.push(tt(t[n],e));return new v(r)}evaluate(t,e){for(const r of this._args)if(!r.evaluate(t,e))return!1;return!0}}class _{constructor(t){this._args=t,this.type=a.booleanType}static parse(t,e){const r=[];for(let n=1;n<t.length;n++)r.push(tt(t[n],e));return new _(r)}evaluate(t,e){for(const r of this._args)if(r.evaluate(t,e))return!0;return!1}}class d{constructor(t){this._args=t,this.type=a.booleanType}static parse(t,e){const r=[];for(let n=1;n<t.length;n++)r.push(tt(t[n],e));return new d(r)}evaluate(t,e){for(const r of this._args)if(r.evaluate(t,e))return!1;return!0}}class E{constructor(t,e,r){this.type=t,this._args=e,this._fallback=r}static parse(t,e,r){if(t.length<4)throw new Error('"case" expects at least 3 arguments');if(t.length%2==1)throw new Error('"case" expects an odd number of arguments');let n;const s=[];for(let a=1;a<t.length-1;a+=2){const o=tt(t[a],e),i=tt(t[a+1],e,r);n||(n=i.type),s.push({condition:o,output:i})}const a=tt(t[t.length-1],e,r);return n||(n=a.type),new E(n,s,a)}evaluate(t,e){for(const r of this._args)if(r.condition.evaluate(t,e))return r.output.evaluate(t,e);return this._fallback.evaluate(t,e)}}class x{constructor(t,e){this.type=t,this._args=e}static parse(t,e){if(t.length<2)throw new Error('"coalesce" expects at least 1 argument');let r;const n=[];for(let s=1;s<t.length;s++){const a=tt(t[s],e);r||(r=a.type),n.push(a)}return new x(r,n)}evaluate(t,e){for(const r of this._args){const n=r.evaluate(t,e);if(null!==n)return n}return null}}class T{constructor(t,e,r,n,s){this.type=t,this._input=e,this._labels=r,this._outputs=n,this._fallback=s}static parse(t,e){if(t.length<3)throw new Error('"match" expects at least 3 arguments');if(t.length%2==0)throw new Error('"case" expects an even number of arguments');let r;const n=tt(t[1],e),s=[],a={};let o;for(let n=2;n<t.length-1;n+=2){let i=t[n];Array.isArray(i)||(i=[i]);for(const t of i){const e=typeof t;if("string"!==e&&"number"!==e)throw new Error('"match" requires string or number literal as labels');if(o){if(e!==o)throw new Error('"match" requires labels to have the same type')}else o=e;a[t]=s.length}const l=tt(t[n+1],e);r||(r=l.type),s.push(l)}return new T(r,n,a,s,tt(t[t.length-1],e))}evaluate(t,e){const r=this._input.evaluate(t,e);return(this._outputs[this._labels[r]]||this._fallback).evaluate(t,e)}}class M{constructor(t,e,r,n,s){this._operator=t,this.type=e,this.interpolation=r,this.input=n,this._stops=s}static parse(t,e,r){const n=t[0];if(t.length<5)throw new Error(`"${n}" expects at least 4 arguments`);const s=t[1];if(!Array.isArray(s)||0===s.length)throw new Error(`"${s}" is not a valid interpolation`);switch(s[0]){case"linear":if(1!==s.length)throw new Error("Linear interpolation cannot have parameters");break;case"exponential":if(2!==s.length||"number"!=typeof s[1])throw new Error("Exponential interpolation requires one numeric argument");break;case"cubic-bezier":if(5!==s.length)throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1");for(let t=1;t<5;t++){const e=s[t];if("number"!=typeof e||e<0||e>1)throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1")}break;default:throw new Error(`"${t[0]}" unknown interpolation type "${s[0]}"`)}if(t.length%2!=1)throw new Error(`"${n}" expects an even number of arguments`);const o=tt(t[2],e,a.numberType);let i;"interpolate-hcl"===n||"interpolate-lab"===n?i=a.colorType:r&&"value"!==r.kind&&(i=r);const l=[];for(let r=3;r<t.length;r+=2){const s=t[r];if("number"!=typeof s)throw new Error(`"${n}" requires stop inputs as literal numbers`);if(l.length&&l[l.length-1][0]>=s)throw new Error(`"${n}" requires strictly ascending stop inputs`);const a=tt(t[r+1],e,i);i||(i=a.type),l.push([s,a])}if(i&&i!==a.colorType&&i!==a.numberType&&("array"!==i.kind||i.itemType!==a.numberType))throw new Error(`"${n}" cannot interpolate type ${a.typeToString(i)}`);return new M(n,i,s,o,l)}evaluate(t,n){const o=this._stops;if(1===o.length)return o[0][1].evaluate(t,n);const i=this.input.evaluate(t,n);if(i<=o[0][0])return o[0][1].evaluate(t,n);if(i>=o[o.length-1][0])return o[o.length-1][1].evaluate(t,n);let l=0;for(;++l<o.length&&!(i<o[l][0]););const u=o[l-1][0],c=o[l][0],h=M.interpolationRatio(this.interpolation,i,u,c),p=o[l-1][1].evaluate(t,n),g=o[l][1].evaluate(t,n);if("interpolate"===this._operator){if("array"===this.type.kind&&Array.isArray(p)&&Array.isArray(g))return p.map((t,e)=>s.interpolate(t,g[e],h));if("color"===this.type.kind&&p instanceof e&&g instanceof e){const t=new e(p),r=new e(g);return new e([s.interpolate(t.r,r.r,h),s.interpolate(t.g,r.g,h),s.interpolate(t.b,r.b,h),s.interpolate(t.a,r.a,h)])}if("number"===this.type.kind&&"number"==typeof p&&"number"==typeof g)return s.interpolate(p,g,h);throw new Error(`"${this._operator}" cannot interpolate type ${a.typeToString(this.type)}`)}if("interpolate-hcl"===this._operator){const t=r.toLCH(p),n=r.toLCH(g),a=n.h-t.h,o=r.toRGB({h:t.h+h*(a>180||a<-180?a-360*Math.round(a/360):a),c:s.interpolate(t.c,n.c,h),l:s.interpolate(t.l,n.l,h)});return new e({a:s.interpolate(p.a,g.a,h),...o})}if("interpolate-lab"===this._operator){const t=r.toLAB(p),n=r.toLAB(g),a=r.toRGB({l:s.interpolate(t.l,n.l,h),a:s.interpolate(t.a,n.a,h),b:s.interpolate(t.b,n.b,h)});return new e({a:s.interpolate(p.a,g.a,h),...a})}throw new Error(`Unexpected operator "${this._operator}"`)}interpolationUniformValue(t,e){const r=this._stops;if(1===r.length)return 0;if(t>=r[r.length-1][0])return 0;let n=0;for(;++n<r.length&&!(t<r[n][0]););const s=r[n-1][0],a=r[n][0];return M.interpolationRatio(this.interpolation,e,s,a)}getInterpolationRange(t){const e=this._stops;if(1===e.length){const t=e[0][0];return[t,t]}const r=e[e.length-1][0];if(t>=r)return[r,r];let n=0;for(;++n<e.length&&!(t<e[n][0]););return[e[n-1][0],e[n][0]]}static interpolationRatio(t,e,r,s){let a=0;return"linear"===t[0]?a=M._exponentialInterpolationRatio(e,1,r,s):"exponential"===t[0]?a=M._exponentialInterpolationRatio(e,t[1],r,s):"cubic-bezier"===t[0]&&(a=n.unitBezier(t[1],t[2],t[3],t[4])(M._exponentialInterpolationRatio(e,1,r,s),1e-5)),a<0?a=0:a>1&&(a=1),a}static _exponentialInterpolationRatio(t,e,r,n){const s=n-r;if(0===s)return 0;const a=t-r;return 1===e?a/s:(e**a-1)/(e**s-1)}}class ${constructor(t,e,r){this.type=t,this._input=e,this._stops=r}static parse(t,e){if(t.length<5)throw new Error('"step" expects at least 4 arguments');if(t.length%2!=1)throw new Error('"step" expects an even number of arguments');const r=tt(t[1],e,a.numberType);let n;const s=[];s.push([-1/0,tt(t[2],e)]);for(let r=3;r<t.length;r+=2){const a=t[r];if("number"!=typeof a)throw new Error('"step" requires stop inputs as literal numbers');if(s.length&&s[s.length-1][0]>=a)throw new Error('"step" requires strictly ascending stop inputs');const o=tt(t[r+1],e);n||(n=o.type),s.push([a,o])}return new $(n,r,s)}evaluate(t,e){const r=this._stops;if(1===r.length)return r[0][1].evaluate(t,e);const n=this._input.evaluate(t,e);let s=0;for(;++s<r.length&&!(n<r[s][0]););return this._stops[s-1][1].evaluate(t,e)}}class k{constructor(t,e){this.type=t,this._output=e}static parse(t,e,r){if(t.length<4)throw new Error('"let" expects at least 3 arguments');if(t.length%2==1)throw new Error('"let" expects an odd number of arguments');const n=new o(e);for(let r=1;r<t.length-1;r+=2){const s=t[r];if("string"!=typeof s)throw new Error(`"let" requires a string to define variable names - found ${s}`);n.add(s,tt(t[r+1],e))}const s=tt(t[t.length-1],n,r);return new k(s.type,s)}evaluate(t,e){return this._output.evaluate(t,e)}}class A{constructor(t,e){this.type=t,this.output=e}static parse(t,e,r){if(2!==t.length||"string"!=typeof t[1])throw new Error('"var" requires just one literal string argument');const n=e.get(t[1]);if(!n)throw new Error(`${t[1]} must be defined before being used in a "var" expression`);return new A(r||a.valueType,n)}evaluate(t,e){return this.output.evaluate(t,e)}}class L{constructor(t,e,r){this.type=t,this._index=e,this._array=r}static parse(t,e){if(3!==t.length)throw new Error('"at" expects 2 arguments');const r=tt(t[1],e,a.numberType),n=tt(t[2],e);return new L(n.type.itemType,r,n)}evaluate(t,e){const r=this._index.evaluate(t,e),n=this._array.evaluate(t,e);if(r<0||r>=n.length)throw new Error('"at" index out of bounds');if(r!==Math.floor(r))throw new Error('"at" index must be an integer');return n[r]}}class S{constructor(t,e){this._key=t,this._obj=e,this.type=a.valueType}static parse(t,e){let r,n;switch(t.length){case 2:return r=tt(t[1],e),new S(r);case 3:return r=tt(t[1],e),n=tt(t[2],e),new S(r,n);default:throw new Error('"get" expects 1 or 2 arguments')}}evaluate(t,e){const r=this._key.evaluate(t,e);return this._obj?this._obj.evaluate(t,e)[r]:t?.values[r]}}class N{constructor(t,e){this._key=t,this._obj=e,this.type=a.booleanType}static parse(t,e){let r,n;switch(t.length){case 2:return r=tt(t[1],e),new N(r);case 3:return r=tt(t[1],e),n=tt(t[2],e),new N(r,n);default:throw new Error('"has" expects 1 or 2 arguments')}}evaluate(t,e){const r=this._key.evaluate(t,e);return this._obj?r in this._obj.evaluate(t,e):!!t?.values[r]}}class C{constructor(t,e){this._key=t,this._vals=e,this.type=a.booleanType}static parse(t,e){if(3!==t.length)throw new Error('"in" expects 2 arguments');return new C(tt(t[1],e),tt(t[2],e))}evaluate(t,e){const r=this._key.evaluate(t,e);return this._vals.evaluate(t,e).includes(r)}}class q{constructor(t,e,r){this._item=t,this._array=e,this._from=r,this.type=a.numberType}static parse(t,e){if(t.length<3||t.length>4)throw new Error('"index-of" expects 3 or 4 arguments');const r=tt(t[1],e),n=tt(t[2],e);if(4===t.length){const s=tt(t[3],e,a.numberType);return new q(r,n,s)}return new q(r,n)}evaluate(t,e){const r=this._item.evaluate(t,e),n=this._array.evaluate(t,e);if(this._from){const s=this._from.evaluate(t,e);if(s!==Math.floor(s))throw new Error('"index-of" index must be an integer');return n.indexOf(r,s)}return n.indexOf(r)}}class R{constructor(t){this._arg=t,this.type=a.numberType}static parse(t,e){if(2!==t.length)throw new Error('"length" expects 2 arguments');const r=tt(t[1],e);return new R(r)}evaluate(t,e){const r=this._arg.evaluate(t,e);if("string"==typeof r)return r.length;if(Array.isArray(r))return r.length;throw new Error('"length" expects string or array')}}class j{constructor(t,e,r,n){this.type=t,this._array=e,this._from=r,this._to=n}static parse(t,e){if(t.length<3||t.length>4)throw new Error('"slice" expects 2 or 3 arguments');const r=tt(t[1],e),n=tt(t[2],e,a.numberType);if(n.type!==a.numberType)throw new Error('"slice" index must return a number');if(4===t.length){const s=tt(t[3],e,a.numberType);if(s.type!==a.numberType)throw new Error('"slice" index must return a number');return new j(r.type,r,n,s)}return new j(r.type,r,n)}evaluate(t,e){const r=this._array.evaluate(t,e);if(!Array.isArray(r)&&"string"!=typeof r)throw new Error('"slice" input must be an array or a string');const n=this._from.evaluate(t,e);if(n<0||n>=r.length)throw new Error('"slice" index out of bounds');if(n!==Math.floor(n))throw new Error('"slice" index must be an integer');if(this._to){const s=this._to.evaluate(t,e);if(s<0||s>=r.length)throw new Error('"slice" index out of bounds');if(s!==Math.floor(s))throw new Error('"slice" index must be an integer');return r.slice(n,s)}return r.slice(n)}}class I{constructor(){this.type=a.booleanType}static parse(t){if(1!==t.length)throw new Error('"has-id" expects no arguments');return new I}evaluate(t,e){return void 0!==t?.id}}class B{constructor(t,e){this._args=t,this._calculate=e,this.type=a.numberType}static parse(t,e,r){const n=t.slice(1).map(t=>tt(t,e));return new B(n,r)}evaluate(t,e){let r;return this._args&&(r=this._args.map(r=>r.evaluate(t,e))),this._calculate(r)}}class z extends B{static parse(t,e){switch(t.length){case 2:return B.parse(t,e,t=>-t[0]);case 3:return B.parse(t,e,t=>t[0]-t[1]);default:throw new Error('"-" expects 1 or 2 arguments')}}}class G extends B{static parse(t,e){return B.parse(t,e,t=>{let e=1;for(const r of t)e*=r;return e})}}class O extends B{static parse(t,e){if(3===t.length)return B.parse(t,e,t=>t[0]/t[1]);throw new Error('"/" expects 2 arguments')}}class P extends B{static parse(t,e){if(3===t.length)return B.parse(t,e,t=>t[0]%t[1]);throw new Error('"%" expects 2 arguments')}}class U extends B{static parse(t,e){if(3===t.length)return B.parse(t,e,t=>t[0]**t[1]);throw new Error('"^" expects 1 or 2 arguments')}}class H extends B{static parse(t,e){return B.parse(t,e,t=>{let e=0;for(const r of t)e+=r;return e})}}class D{constructor(t,e){this._args=t,this._calculate=e,this.type=a.numberType}static{this.ops={abs:t=>Math.abs(t[0]),acos:t=>Math.acos(t[0]),asin:t=>Math.asin(t[0]),atan:t=>Math.atan(t[0]),ceil:t=>Math.ceil(t[0]),cos:t=>Math.cos(t[0]),e:()=>Math.E,floor:t=>Math.floor(t[0]),ln:t=>Math.log(t[0]),ln2:()=>Math.LN2,log10:t=>Math.log(t[0])/Math.LN10,log2:t=>Math.log(t[0])/Math.LN2,max:t=>Math.max(...t),min:t=>Math.min(...t),pi:()=>Math.PI,round:t=>Math.round(t[0]),sin:t=>Math.sin(t[0]),sqrt:t=>Math.sqrt(t[0]),tan:t=>Math.tan(t[0])}}static parse(t,e){const r=t.slice(1).map(t=>tt(t,e));return new D(r,D.ops[t[0]])}evaluate(t,e){let r;return this._args&&(r=this._args.map(r=>r.evaluate(t,e))),this._calculate(r)}}class V{constructor(t){this._args=t,this.type=a.stringType}static parse(t,e){return new V(t.slice(1).map(t=>tt(t,e)))}evaluate(t,e){return this._args.map(r=>r.evaluate(t,e)).join("")}}class F{constructor(t,e){this._arg=t,this._calculate=e,this.type=a.stringType}static{this.ops={downcase:t=>t.toLowerCase(),upcase:t=>t.toUpperCase()}}static parse(t,e){if(2!==t.length)throw new Error(`${t[0]} expects 1 argument`);const r=tt(t[1],e);return new F(r,F.ops[t[0]])}evaluate(t,e){return this._calculate(this._arg.evaluate(t,e))}}class Q{constructor(t){this._args=t,this.type=a.colorType}static parse(t,e){if(4!==t.length)throw new Error('"rgb" expects 3 arguments');const r=t.slice(1).map(t=>tt(t,e));return new Q(r)}evaluate(t,r){const n=this._validate(this._args[0].evaluate(t,r)),s=this._validate(this._args[1].evaluate(t,r)),a=this._validate(this._args[2].evaluate(t,r));return new e({r:n,g:s,b:a})}_validate(t){if("number"!=typeof t||t<0||t>255)throw new Error(`${t}: invalid color component`);return Math.round(t)}}class Y{constructor(t){this._args=t,this.type=a.colorType}static parse(t,e){if(5!==t.length)throw new Error('"rgba" expects 4 arguments');const r=t.slice(1).map(t=>tt(t,e));return new Y(r)}evaluate(t,r){const n=this._validate(this._args[0].evaluate(t,r)),s=this._validate(this._args[1].evaluate(t,r)),a=this._validate(this._args[2].evaluate(t,r)),o=this._validateAlpha(this._args[3].evaluate(t,r));return new e({r:n,g:s,b:a,a:o})}_validate(t){if("number"!=typeof t||t<0||t>255)throw new Error(`${t}: invalid color component`);return Math.round(t)}_validateAlpha(t){if("number"!=typeof t||t<0||t>1)throw new Error(`${t}: invalid alpha color component`);return t}}class Z{constructor(t){this._color=t,this.type=a.arrayType(a.numberType,4)}static parse(t,e){if(2!==t.length)throw new Error('"to-rgba" expects 1 argument');const r=tt(t[1],e);return new Z(r)}evaluate(t,r){return new e(this._color.evaluate(t,r)).toRgba()}}class J{constructor(t,e){this.type=t,this._args=e}static parse(t,e){const r=t[0];if(t.length<2)throw new Error(`${r} expects at least one argument`);let n,s=1;if("array"===r){if(t.length>2){switch(t[1]){case"string":n=a.stringType;break;case"number":n=a.numberType;break;case"boolean":n=a.booleanType;break;default:throw new Error('"array" type argument must be string, number or boolean')}s++}else n=a.valueType;let e;if(t.length>3){if(e=t[2],null!==e&&("number"!=typeof e||e<0||e!==Math.floor(e)))throw new Error('"array" length argument must be a positive integer literal');s++}n=a.arrayType(n,e)}else switch(r){case"string":n=a.stringType;break;case"number":n=a.numberType;break;case"boolean":n=a.booleanType;break;case"object":n=a.objectType}const o=[];for(;s<t.length;s++){const r=tt(t[s],e);o.push(r)}return new J(n,o)}evaluate(t,e){let r;for(const n of this._args){const s=n.evaluate(t,e);if(r=a.getType(s),a.matchType(r,this.type))return s}throw new Error(`Expected ${a.typeToString(this.type)} but got ${a.typeToString(r)}`)}}class K{static{this.types={"to-boolean":a.booleanType,"to-color":a.colorType,"to-number":a.numberType,"to-string":a.stringType}}constructor(t,e){this.type=t,this._args=e}static parse(t,e){const r=t[0],n=K.types[r];if(n===a.booleanType||n===a.stringType){if(2!==t.length)throw new Error(`${r} expects one argument`)}else if(t.length<2)throw new Error(`${r} expects at least one argument`);const s=[];for(let r=1;r<t.length;r++){const n=tt(t[r],e);s.push(n)}return new K(n,s)}evaluate(t,r){if(this.type===a.booleanType)return Boolean(this._args[0].evaluate(t,r));if(this.type===a.stringType)return a.valueToString(this._args[0].evaluate(t,r));if(this.type===a.numberType){for(const e of this._args){const n=Number(e.evaluate(t,r));if(!isNaN(n))return n}return null}if(this.type===a.colorType){for(const n of this._args)try{const s=K.toColor(n.evaluate(t,r));if(s instanceof e)return s}catch{}return null}}static toBoolean(t){return Boolean(t)}static toString(t){return a.valueToString(t)}static toNumber(t){const e=Number(t);if(isNaN(e))throw new Error(`"${t}" is not a number`);return e}static toColor(t){if(t instanceof e)return t;if("string"==typeof t){const r=e.fromString(t);if(r)return r;throw new Error(`"${t}" is not a color`)}if(Array.isArray(t))return e.fromArray(t);throw new Error(`"${t}" is not a color`)}}class W{constructor(t){this._val=t,this.type=a.getType(t)}static parse(t){if(2!==t.length)throw new Error('"literal" expects 1 argument');return new W(t[1])}evaluate(t,e){return this._val}}class X{constructor(t){this._arg=t,this.type=a.stringType}static parse(t,e){if(2!==t.length)throw new Error('"typeof" expects 1 argument');return new X(tt(t[1],e))}evaluate(t,e){return a.typeToString(a.getType(this._arg.evaluate(t,e)))}}function tt(t,e,r){const n=typeof t;if("string"===n||"boolean"===n||"number"===n||null===t){if(r)switch(r.kind){case"string":"string"!==n&&(t=K.toString(t));break;case"number":"number"!==n&&(t=K.toNumber(t));break;case"color":t=K.toColor(t)}t=["literal",t]}if(!Array.isArray(t)||0===t.length)throw new Error("Expression must be a non empty array");const s=t[0];if("string"!=typeof s)throw new Error("First element of expression must be a string");const a=et[s];if(void 0===a)throw new Error(`Invalid expression operator "${s}"`);if(!a)throw new Error(`Unimplemented expression operator "${s}"`);return a.parse(t,e,r)}const et={array:J,boolean:J,collator:null,format:null,image:null,literal:W,number:J,"number-format":null,object:J,string:J,"to-boolean":K,"to-color":K,"to-number":K,"to-string":K,typeof:X,accumulated:null,"feature-state":null,"geometry-type":l,id:i,"line-progress":null,properties:u,at:L,get:S,has:N,in:C,"index-of":q,length:R,slice:j,"!":b,"!=":g,"<":f,"<=":w,"==":p,">":y,">=":m,all:v,any:_,case:E,coalesce:x,match:T,within:null,interpolate:M,"interpolate-hcl":M,"interpolate-lab":M,step:$,let:k,var:A,concat:V,downcase:F,"is-supported-script":null,"resolved-locale":null,upcase:F,rgb:Q,rgba:Y,"to-rgba":Z,"-":z,"*":G,"/":O,"%":P,"^":U,"+":H,abs:D,acos:D,asin:D,atan:D,ceil:D,cos:D,e:D,floor:D,ln:D,ln2:D,log10:D,log2:D,max:D,min:D,pi:D,round:D,sin:D,sqrt:D,tan:D,zoom:c,"heatmap-density":null,"has-id":I,none:d};t.ALL=v,t.ANY=_,t.Add=H,t.Assert=J,t.At=L,t.Calculate=D,t.Case=E,t.Coalesce=x,t.Coerce=K,t.Concat=V,t.Div=O,t.EQ=p,t.GE=m,t.GT=y,t.GeomType=l,t.Get=S,t.Has=N,t.HasID=I,t.ID=i,t.In=C,t.IndexOf=q,t.Interpolate=M,t.LE=w,t.LT=f,t.Length=R,t.Let=k,t.Literal=W,t.Match=T,t.Mod=P,t.Mul=G,t.NE=g,t.NONE=d,t.NOT=b,t.Pow=U,t.Properties=u,t.Rgb=Q,t.Rgba=Y,t.Slice=j,t.Step=$,t.String=F,t.Sub=z,t.ToRgba=Z,t.TypeOf=X,t.Var=A,t.Zoom=c,t.createExpression=tt,t.ops=et,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});