// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../core/has","./AProcessorStrategy","../sources/FeatureSourceMessage","../sources/strategies/chunks/Overrides","../support/arcadeUtils","../support/FeatureSetReaderJSON"],function(e,t,s,r,a,o,n){"use strict";class d extends s.ASendState{}class i extends s.AProcessorStrategy{constructor(e,t,s,r){super(e,t,r),this._arcadeContextInfo=s,this.handledChunks=new Set,this.handledChunksForIdCreation=new Set,this.handledChunksForAttributeData=new Set,this._streamLayerDeferredObjectIdsToRemove=[]}destroy(){super.destroy();for(const e of this._source.chunks())this._cleanupChunkIds(e)}invalidateAttributeData(e){this.handledChunksForAttributeData.clear(),this._arcadeContextInfo=e,null!=this._evalOptions&&(this._evalOptions=o.createArcadeEvaluationOptions(this._evalOptions.$view.scale,e))}onSubscribe(e){super.onSubscribe(e),this._evalOptions=e.tile.createArcadeEvaluationOptions(this._arcadeContextInfo)}createState(e){return new d(e)}get aggregateQueryEngine(){return null}displayMap(e,t,s){const r=new Map(e.map(e=>[t(e),e])),a=[];for(const e of this._source.chunks()){const t=e.reader.getCursor();for(;t.next();){const e=t.getObjectId(),o=t.getDisplayId(),n=r.get(e);if(null!=n){const t=s(o,n,e);a.push(t),r.delete(e)}}}return a}getDisplayFeatures(e){const t=new Set(e),s=new Set,r=[];for(const e of this._source.chunks()){const a=e.reader.getCursor();for(;a.next();){const e=a.getObjectId(),o=a.getDisplayId();t.has(o)&&!s.has(e)&&(r.push({...a.readLegacyFeatureWorldSpace(),displayId:o}),s.add(e))}}return{features:r,aggregates:[],tracks:[]}}async*applyOverrideUpdate(e){const s=[];for(const t of e.modified){const e=this._attributeStore.createDisplayIdForObjectId(t.objectId);t.displayId=e,s.push(e)}const o=n.FeatureSetReaderJSON.fromOptimizedFeatures(e.modified,this._source.metadata).getCursor();for(;o.next();)this._attributeStore.setAttributeData(o.getDisplayId(),o,this._evalOptions,this._sqlOptions);const d=[];for(const t of e.removed){const e=this._attributeStore.getDisplayIdForObjectId(t);null!=e&&d.push(e)}t("esri-2d-update-debug")&&console.debug("FeatureUpdateStrategy.applyLocalEdit",{message:e,modifiedDisplayIds:s,removedDisplayIds:d});const i=a.OverrideChunk.fromFeatures(e.modified,this._source.metadata);this.handledChunks.add(i.chunkId),this.handledChunksForAttributeData.add(i.chunkId),this.handledChunksForIdCreation.add(i.chunkId);for(const e of this._sendStates.values())e.handledChunks.add(i.chunkId),yield new r.FeatureTileUpdateMessage(e.subscription,null,s,!1,i.queryInfo);for(const e of this._sendStates.values()){const t=i.getTileReader(e.subscription.tile);yield new r.FeatureTileUpdateMessage(e.subscription,t,d,!1,i.queryInfo)}for(const t of e.removed)this._attributeStore.releaseDisplayIdForObjectId(t)}async*updateChunks(){if(this._source.chunks().length){this._updateAttributeData();for(const e of this._sendStates.values())yield*this._update(e)}}removeChunks(e){for(const t of e)this.handledChunks.delete(t.chunkId),this.handledChunksForAttributeData.delete(t.chunkId),this._cleanupChunkIds(t)}afterUpdateChunks(){for(const e of this._streamLayerDeferredObjectIdsToRemove)this._attributeStore.releaseDisplayIdForObjectId(e);this._streamLayerDeferredObjectIdsToRemove=[]}_cleanupChunkIds(e){if(this.handledChunksForIdCreation.has(e.chunkId)){const t=e.reader.getCursor();for(;t.next();){const e=t.getObjectId();this._source.isStream?this._streamLayerDeferredObjectIdsToRemove.push(e):this._attributeStore.releaseDisplayIdForObjectId(e)}this.handledChunksForIdCreation.delete(e.chunkId)}}_updateAttributeData(){for(const e of this._source.chunks()){const{chunkId:t,reader:s}=e;if(!this.handledChunksForIdCreation.has(t)){this.handledChunksForIdCreation.add(t);const e=s.getCursor();for(;e.next();){const t=this._attributeStore.createDisplayIdForObjectId(e.getObjectId());e.setDisplayId(t)}}}for(const e of this._source.chunks())if(!this.handledChunksForAttributeData.has(e.chunkId)){this.handledChunksForAttributeData.add(e.chunkId);const t=e.reader.getCursor();for(;t.next();){const e=t.getDisplayId();this._attributeStore.setAttributeData(e,t,this._evalOptions,this._sqlOptions)}}}*_update(e){const{subscription:t,handledChunks:s}=e;for(const a of this._source.chunks()){const{chunkId:o}=a;if(s.has(o)||!this.handledChunksForIdCreation.has(o)||!this.handledChunksForAttributeData.has(o))continue;s.add(o);const n=a.getTileReader(t.tile);n&&(yield new r.FeatureTileAppendMessage(e.subscription,n,!1,a.end,a.queryInfo))}}}e.DefaultSendState=d,e.FeatureUpdateStrategy=i,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});