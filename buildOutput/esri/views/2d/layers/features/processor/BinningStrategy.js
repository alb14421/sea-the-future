// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../geometry/SpatialReference","../../../../../layers/graphics/featureConversionUtils","../../../../../layers/graphics/OptimizedFeature","../../../../../layers/graphics/data/projectionSupport","../../../../../layers/support/FieldsIndex","../aggregation/ComputedAggregateField","./AAggregateStrategy","./AProcessorStrategy","../sources/FeatureSourceMessage","../support/ComputedAttributeStorage","../support/FeatureFilterEvaluator","../support/FeatureMetadata","../support/FeatureSetReaderJSON","../../../tiling/TileKey"],function(e,t,s,a,r,i,n,o,l,d,c,u,p,f,h){"use strict";class g extends l.ASendState{constructor(e,t){super(e),this.bins=new Map,this.featureCache=new Map,this.done=!1,this._store=t}reset(){this.destroy(),this.done=!1}destroy(){const e=this.subscription.tile.key.level;for(const t of this.featureCache.keys())this._store.releaseDisplayIdForObjectId(`${t}.${e}`);this.bins.clear(),this.featureCache.clear(),this.handledChunks.clear()}get tile(){return this.subscription.tile}*featuresWorldSpace(){for(const e of this.featureCache.values()){const t=e.clone();t.geometry&&s.unquantizeOptimizedGeometry(t.geometry,t.geometry,!1,!1,this.subscription.tile.transform),yield t}}}class y extends o.AAggregateStrategy{static async create(e,s,a,i,o,l){const d=new c.ComputedAttributeStorage({spatialReference:s}),p=await Promise.all(e.fields.map(async e=>n.ComputedAggregateField.create(d,e))),f=e.featureFilter?await u.create({geometryType:a.metadata.geometryType,hasM:!1,hasZ:!1,timeInfo:a.metadata.timeInfo,fieldsIndex:a.metadata.fieldsIndex,spatialReference:s,filterJSON:e.featureFilter}):null;return"geohash"===e.index.type&&await r.checkProjectionSupport(s,t.WGS84),new y(e,f,o,p,s,a,i,l)}constructor(e,t,s,a,r,n,o,l){super(n,o,r,a,l),this._schema=e,this._featureFilter=t,this._arcadeContextInfo=s,this._metadata=p.FeatureMetadata.createFeature({geometryType:"esriGeometryPolygon",featureIdInfo:{type:"object-id",fieldName:"aggregateId"},fieldsIndex:new i(e.fields).toJSON(),globalIdField:null,spatialReference:n.metadata.spatialReference,outSpatialReference:n.metadata.outSpatialReference,subtypeField:null,subtypes:null,timeInfo:null,timeReferenceUnknownClient:null,dateFieldsTimeZone:null,typeIdField:null,types:null})}createState(e){return new g(e,this._attributeStore)}async*applyOverrideUpdate(e){for(const e of this._sendStates.values()){e.reset();const t=new d.FeatureTileAppendMessage(e.subscription,f.FeatureSetReaderJSON.empty(this._source.metadata),!0,!1,{});yield t}}displayMap(e,t,s){const a=new Map(e.map(e=>[t(e),e])),r=[];for(const e of this._sendStates.values())for(const t of e.featuresWorldSpace()){const{objectId:e,displayId:i}=t,n=a.get(e);if(null!=n){const t=s(i,n,e);r.push(t),a.delete(e)}}return r}getDisplayFeatures(e){const t=new Set(e),a=new Set,r=[];for(const e of this._sendStates.values())for(const i of e.featuresWorldSpace())t.has(i.displayId)&&!a.has(i.objectId)&&(i.geometry&&r.push({...s.convertToFeature(i,this._metadata.geometryType,!1,!1),displayId:i.displayId}),a.add(i.objectId));return{features:[],aggregates:r,tracks:[]}}getFeatureObjectIdsForAggregate(e){for(const t of this._sendStates.values())for(const s of t.bins.values())if(s.id===e)return Array.from(s.containedObjectIds);return[]}async*updateChunks(){for(const e of this._sendStates.values())yield*this._update(e,this._source)}forEachAggregateWorldSpace(e){const t=new Set;for(const s of this._sendStates.values())for(const a of s.featuresWorldSpace())t.has(a.objectId)||(e(a),t.add(a.objectId))}_createIndexOptions(e){switch(this._schema.index.type){case"geohash":return{type:"geohash",fields:this.aggregateFields,featureFilter:this._featureFilter,geohashLevel:this._schema.index.fixBinLevel,spatialReference:this.spatialReference,arcadeContextInfo:this._arcadeContextInfo,scale:e.scale,sqlOptions:this._sqlOptions};case"grid":{const t=this._schema.index.fixedBinLevel,s=null!=t?e.tileInfoView.getLODInfoAt(t).scale:e.scale;return{type:"grid",fields:this.aggregateFields,cellSize:this._schema.index.size,featureFilter:this._featureFilter,spatialReference:this.spatialReference,arcadeContextInfo:this._arcadeContextInfo,scale:s,sqlOptions:this._sqlOptions}}}}async*_update(e,t){const{handledChunks:s,subscription:r,bins:i,featureCache:n}=e,o=r.tile;if(e.done)return;for(const a of t.chunks()){if(s.has(a.chunkId))continue;s.add(a.chunkId);const t=a.queryInfo;if("tileId"in t){const e=new h(t.tileId);if(e.level!==o.level||e.world!==o.key.world)continue}a.getAggregateIndex(this._createIndexOptions(e.tile)).putBounded(i,e.tile.extent,e.tile.resolution)}const l=[],c=r.tile.transform,u=r.tile.key.level;for(const e of i.values()){let t=n.get(e.id);if(t)t.attributes=e.getAttributes();else{const s=e.getGeometry(this.spatialReference,c);t=new a.OptimizedFeature(s,e.getAttributes(),null,e.id),s||(t.centroid=e.getGeometricCentroid(this.spatialReference,c)),t.displayId=this._attributeStore.createDisplayIdForObjectId(`${t.objectId}.${u}`),n.set(e.id,t)}l.push(t)}this.events.emit("changed"),e.done=!t.updateTracking.updating;const p=f.FeatureSetReaderJSON.fromOptimizedFeatures(l,this._metadata,c),g=p.getCursor(),y=e.subscription.tile.createArcadeEvaluationOptions(this._arcadeContextInfo);for(;g.next();)this._attributeStore.setAttributeData(g.getDisplayId(),g,y,this._sqlOptions);const m=new d.FeatureTileUpdateMessage(e.subscription,p,[],e.done,{});yield m}}e.BinningState=g,e.BinningStrategy=y,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});