// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../core/handleUtils","../../../../../../core/has","../../../../../../core/promiseUtils","./ATileLoadStrategy","./chunks/DrillDownTileSourceChunk","../../support/FeatureSetReaderJSON"],function(e,t,s,o,r,i,l){"use strict";class n{constructor(e,s){this.subscription=e,this._tileIdToResult=new Map,this._controller=new AbortController,this._handles=t.handlesGroup([o.onAbort(e.signal,()=>this._controller.abort()),o.onAbort(s,()=>this._controller.abort())])}destroy(){this._controller.abort(),this._handles.remove()}get(e){return this._tileIdToResult.get(e)}set(e,t){this._tileIdToResult.set(e,t)}get options(){return{signal:this._controller.signal}}}class a extends r.ATileLoadStrategy{constructor(){super(...arguments),this._loadStates=new Map}destroy(){super.destroy();for(const e of this._loadStates.values())e.destroy();this._loadStates.clear()}get about(){return{supportsDisplayFilter:!0,willQueryAllFeatures:!1,willQueryFullResolutionGeometry:!1}}async load(e){this._loadStates.has(e.key.id)||this._loadStates.set(e.key.id,new n(e,this._options));const t=this._loadStates.get(e.key.id);let s;try{for await(const s of this._fetchChunkInfos(t,e.tile,0)){const{queryJSON:e,reader:r,sourceTile:l,sourceTileDepth:n,tile:a}=s,u=new i.DrillDownTileSourceChunk(r,e,a,l,n,!1);o.throwIfAborted(t.options),this._addChunk(u)}}catch(e){s=e}const r=new i.DrillDownTileSourceChunk(l.FeatureSetReaderJSON.empty(this._metadata),null,e.tile,null,-1,!0);if(this._addChunk(r),s)throw s}unload(e){super.unload(e),this._loadStates.get(e.key.id)?.destroy(),this._loadStates.delete(e.key.id)}async*_fetchChunkInfos(e,t,o){let r=e.get(t.id);const i=!!r;if(r||(r=await this._fetchChunkInfo(e,t,o),e.set(t.id,r)),r.reader.exceededTransferLimit&&o<s("featurelayer-query-max-depth"))for(const s of t.createChildTiles())yield*this._fetchChunkInfos(e,s,o+1);else i||(yield r)}async _fetchChunkInfo(e,t,s){const o=e.subscription.tile.getQuantizationParameters(),r=this._queryInfo.createTileQuery(t,{returnExceededLimitFeatures:!1,quantizationParameters:o});return{reader:await this._fetch(r,e.options,{chunkId:t.id}),queryJSON:r.inner.toJSON(),tile:e.subscription.tile,sourceTile:t,sourceTileDepth:s}}}e.DrillDownTileLoadStrategy=a,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});