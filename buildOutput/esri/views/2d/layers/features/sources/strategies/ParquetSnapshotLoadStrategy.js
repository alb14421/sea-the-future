// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../core/promiseUtils","../../../../../../core/SetUtils","../../../../../../layers/support/FieldsIndex","../../../../../../libs/parquet/parquet","./ALoadStrategy","./chunks/FeatureSnapshotSourceChunk","../../support/FeatureSetReaderJSON","../../support/FeatureSetReaderParquet"],function(e,t,s,a,i,r,l,o,n){"use strict";class u extends r.ALoadStrategy{constructor(e,t,s,a){super(a),this._service=e,this._metadata=t,this._schema=s,this._chunkId=0,this._files=[],this._availableFields=new Set(s.mutable.availableFields)}destroy(){super.destroy();for(const e of this._files)e.free()}get about(){return{supportsDisplayFilter:!1,willQueryAllFeatures:!0,willQueryFullResolutionGeometry:!0}}async updateFields(e){await this._promise;const t=new Set(e),a=s.difference(t,this._availableFields);this._availableFields=s.union(a,this._availableFields);const i=this._fieldsIndex;if(null==i)return;const r=Array.from(a).map(e=>i.get(e)?.column);if(a.size)for(const e of this._files)await e.ensureFields(new Uint32Array(r))}async load(e){return null==this._promise&&(this._promise=this._download()),this._promise}unload(e){}async addParquetFile(e){this._insert(e)}async _insert(e){const s=await i.createParquetFile(e,{geometryInfo:this._service.geometryInfo,outSpatialReference:this._service.outSpatialReference,getCustomParameters:()=>this._schema.mutable.dataFilter.customParameters});this._files.push(s),t.throwIfAborted(this._options);const r=s.fields().map(e=>({name:e.name,alias:e.name,type:e.type,column:s.columnForFieldName(e.name)})),{timeZoneByFieldName:o}=this._service.metadata.fieldsIndex,u=a.fromJSON({fields:r,timeZoneByFieldName:o});this._fieldsIndex=u;const d=new Uint32Array(Array.from(this._availableFields.values()).map(e=>u.get(e)?.column).filter(e=>null!=e));await s.readAllChunks(d,this._signal,e=>{if(this._signal.aborted)return;const t=this._chunkId++,s=new n.FeatureSetReaderParquet(this._metadata,u,e,t),a=new l.FeatureSnapshotSourceChunk(s,null,t,!1);this._store.insert(a)})}async _download(){try{await Promise.all(this._service.source.urls.map(e=>this._insert(e)));const e=new l.FeatureSnapshotSourceChunk(o.FeatureSetReaderJSON.empty(this._metadata),null,-1,!0);this._store.insert(e)}catch(e){throw console.error(e),e}}}e.ParquetSnapshotLoadStrategy=u,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});