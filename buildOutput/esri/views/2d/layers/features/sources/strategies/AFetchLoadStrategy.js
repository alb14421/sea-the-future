// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../../../core/Error","../../../../../../core/Logger","../../../../../../core/QueueProcessor","../../../../../../rest/support/Query","./ALoadStrategy","./support/queryAdapters","../../support/FeatureSetReaderJSON"],function(e,t,r,s,n,u,o,a){"use strict";class i extends u.ALoadStrategy{constructor(e,t,r,n,u){super(r),this._serviceInfo=e,this._queryInfo=t,this._metadata=n,this._connection=u,this._queue=new s.QueueProcessor({concurrency:32,process:async e=>{const t={signal:e.options?.signal,query:e.query.customParameters,useRequestQueue:!0};return this._adapter.executeQuery(e.query.inner,t)}}),this._adapter=o.createQueryAdapter(e,n)}unsafeSetQueryHistoricMoment(e){this._queryInfo.updateHistoricMoment(e)}async updateFields(e){this._queryInfo.updateFields(e);const r=Array.from(this._store.chunks()).map(async e=>{const t=n.fromJSON(e.queryInfo.queryJSON);if(t)try{return await this._tryUpdateFields(e.reader,t,{chunkId:e.chunkId}),null}catch(e){return e}}),s=(await Promise.all(r)).filter(e=>e);if(s.length)throw new t("featurelayer-query","Encountered errors when downloading fields",{errors:s})}async queryByObjectId(e){if(0===e.length)return a.FeatureSetReaderJSON.empty(this._metadata);const t=this._queryInfo.createQuery({objectIds:e});return this._fetch(t,null,null)}async _fetch(e,t,r){const s=await this._enqueue(e,t);return await this._tryUpdateFields(s,e.inner,r),s}async _tryUpdateFields(e,s,n){const u=this._queryInfo.createPatchFieldsQuery(s,e,n);if(!u)return;const o=await this._enqueue(u,this._options);o.getSize()===e.getSize()?e.joinAttributes(o):r.getLogger("esri.views.2d.layers.features.sources.strategies.AFetchLoadStrategy").error(new t("featurelayer-query",`Failed to join features. Expected a count of ${e.getSize()} features, but got ${o.getSize()}`,{query:u.inner.toJSON(),debugInfo:n}))}async _enqueue(e,t){return this._connection.onEvent({type:"fetchStart"}),this._queue.push({query:e,options:t}).finally(()=>{this._connection.onEvent({type:"fetchEnd",done:0===this._queue.length})})}}e.AFetchLoadStrategy=i,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});