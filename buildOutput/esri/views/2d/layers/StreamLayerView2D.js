// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../chunks/tslib.es6","../../../core/Error","../../../core/handleUtils","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../rest/support/FeatureSet","../../../support/guards","./FeatureLayerView2D","./support/handleNoEngineError","../../layers/StreamLayerView"],function(e,r,t,s,n,i,a,o,c,l,h,u,d,p){"use strict";let y=class extends(p.StreamLayerView(u)){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([s.watch(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&"clear"===e.type&&this.incrementSourceRefreshVersion()}),s.watch(()=>this.layer.purgeOptions,()=>this._update()),s.watch(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new r("stream-controller",this.pipelineErrorString):null}on(e,r){if(Array.isArray(e))return t.handlesGroup(e.map(e=>this.on(e,r)));const s=["data-received","message-received"].includes(e);s&&this.getWorker().then(r=>r.streamMessenger.enableEvent(e,!0));const n=super.on(e,r),i=this;return t.makeHandle(()=>{n.remove(),s&&(i._workerProxy.closed||i.hasEventListener(e)||i.getWorker().then(r=>r.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new r("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const s=await this.getWorker();return d.handleNoEngineError(s.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(e=>{const r=l.fromJSON(e);return r.features.forEach(e=>{e.layer=this.layer,e.sourceLayer=this.layer,e.origin=this.layer.graphicOrigin}),r}),new l({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,r){return(await super.queryObjectIds(e,r)).filter(h.isNumber)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){null!=this._refreshInterval&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){null==this._refreshInterval&&(this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),null==this._refreshInterval&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),r=this;return{...e,get container(){return r.featureContainer},setProperty:e=>{this.set(e.propertyName,e.value)}}}};return e.__decorate([n.property()],y.prototype,"pipelineConnectionStatus",void 0),e.__decorate([n.property()],y.prototype,"pipelineErrorString",void 0),e.__decorate([n.property({readOnly:!0})],y.prototype,"connectionError",null),e.__decorate([n.property({readOnly:!0})],y.prototype,"_streamConnectionStatus",null),y=e.__decorate([c.subclass("esri.views.2d.layers.StreamLayerView2D")],y),y});