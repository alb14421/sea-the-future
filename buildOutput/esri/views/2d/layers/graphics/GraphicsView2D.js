// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/arrayUtils","../../../../core/has","../../../../core/Identifiable","../../../../core/maybe","../../../../core/promiseUtils","../../../../core/reactiveUtils","../../../../core/accessorSupport/decorators/property","../../../../core/Logger","../../../../core/accessorSupport/decorators/subclass","../../../../geometry/support/aaBoundingRect","../../../../geometry/support/jsonUtils","../../../../layers/support/FieldsIndex","../../../../symbols/cim/CIMSymbolHelper","../../../../symbols/cim/OverrideHelper","../../../../symbols/support/defaults","../../engine/webgl/definitions","../../engine/webgl/FeatureTile","../../engine/webgl/mesh/MeshData","../../engine/webgl/mesh/factories/ResourceProxy","../../engine/webgl/shaderGraph/techniques/createGraphicSymbolMeshSchemas","../features/schema/processor/StorageSchema","../features/support/AttributeStore","../features/support/ComputedAttributeStorage","../features/support/FeatureMetadata","../features/support/GraphicsReader","./GraphicStore","../support/FeatureCommandQueue","../support/UpdateTracking2D"],function(e,t,r,s,i,a,o,n,d,h,c,l,u,p,y,g,m,_,f,b,S,w,I,v,T,M,R,x,U,C,P){"use strict";class G{static getOrCreate(e,t,r){let s=t.get(e.id);return s||(s=new G(e,r),t.set(e.id,s)),s}static fromItems(e,t,r){const s=new G(e,r);for(const e of t)s.append(e);return s}constructor(e,t){this.tile=e,this.metadata=t,this.addedOrModified=[],this.removed=[],this.objectIdMap=null}get reader(){return this._reader||(this._reader=x.GraphicsReader.from(this.addedOrModified,this.tile,this.metadata)),this._reader}append(e){this.addedOrModified.push(e),e.hasAnimations&&(this.objectIdMap=this.objectIdMap||{},this.objectIdMap[e.displayId]=e.objectId)}}return e.default=class extends(a.IdentifiableMixin(r)){constructor(e){super(e),this._attached=!1,this._tiles=new Map,this._controller=new AbortController,this._hashToSymbolInfo=new Map,this._lastCleanup=performance.now(),this._cleanupRequired=!0,this.lastUpdateId=-1,this.renderer=null,this._updateTracking=new P.UpdateTracking2D({debugName:"GraphicsView2D"}),this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this._commandQueue=new C.FeatureCommandQueue({process:e=>{if("update"===e.type)return this._update();throw new Error("InternalError: Unsupported command")}}),this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this.container.destroy(),this.view=null,this.renderer=null,this._set("graphics",null),this._controller.abort(),this._graphicStore.clear(),this._graphicStore.destroy(),this._attributeStore=null,this._hashToSymbolInfo.clear(),this._updateTracking.destroy(),this._commandQueue.destroy()}_initAttributeStore(){this._storage=new M.ComputedAttributeStorage({spatialReference:this.view.spatialReference,fields:new y}),this._attributeStore=new T.AttributeStore({isLocal:!0,update:e=>{i("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateStart`,{message:e}),this.container.attributeView.requestUpdate(e),this.container.requestRender(),i("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateEnd`,{message:e})}});const e=v.createStorageSchema(null,[]);this._attributeStore.update(e,this._storage,null),this.container.checkHighlight=()=>this._attributeStore.hasHighlight}initialize(){this._initAttributeStore(),this._metadata=R.GraphicsMetadata.createGraphics(this.view.spatialReference),this._resourceProxy=new w.ResourceProxy({fetch:e=>Promise.all(e.map(e=>this.view.stage.textureManager.rasterizeItem(e))),fetchDictionary:e=>{throw new Error("InternalError: Graphics do not support Dictionary requests")}}),this.addHandles([d.watch(()=>this._effectiveRenderer,()=>this._pushUpdate()),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",()=>{this.addHandles([this.graphics.on("change",()=>this._pushUpdate())]),this._graphicStore?.destroy(),this._graphicStore=new U(this.view.spatialReference,this._cimResourceManager,this.view.featuresTilingScheme,this.view.state.scale,this._attributeStore),this._attached=!0,this.requestUpdate(),this._pushUpdate()})]),this._updateTracking.addUpdateTracking("CommandQueue",this._commandQueue.updateTracking);const e=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:e,removed:[]})}get _effectiveRenderer(){return"function"==typeof this.renderer?this.renderer():this.renderer}get _cimResourceManager(){return this.view.stage.textureManager.resourceManager}get updating(){const e=!this._attached||this._updateTracking.updating;return i("esri-2d-log-updating")&&console.log(`Updating GraphicsView2D: ${e}\n  -> attaching ${!this._attached}\n  -> updateTracking ${this._updateTracking.updating}`),e}hitTest(e){if(!this.view||this.view.suspended)return[];const{resolution:t,rotation:r}=this.view.state,i=this._graphicStore.hitTest(e.x,e.y,2,t,r),a=new Set(i),o=this.graphics.items.reduce((e,t)=>(a.has(t.uid)&&e.set(t.uid,t),e),new Map);return i.map(e=>o.get(e)).filter(s.isSome)}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback()),this.notifyChange("updating")}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}viewChange(){this.requestUpdate()}setHighlight(e){const t=[];for(const{objectId:r,highlightFlags:s}of e){const e=this._graphicStore.getItem(r)?.displayId;t.push({objectId:r,highlightFlags:s,displayId:e})}this._attributeStore.setHighlight(t,e),this._pushUpdate()}graphicUpdateHandler(e){this._pushUpdate()}update(e){this.updateRequested=!1,this._attached&&this._graphicStore.updateLevel(e.state.resolution)&&this.pushUpdate()}pushUpdate(){this._pushUpdate()}_pushUpdate(){n.ignoreAbortErrors(this._commandQueue.push({type:"update"}))}async _update(){try{i("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView._update start`);const e=await this._graphicStore.update(this.graphics,e=>this._getSymbolForGraphic(e),e=>this._ensureSymbolResource(e));for(const t of e.updated)this.container.restartAnimation(t.objectId);if(!e.hasAnyUpdate())return void this._attributeStore.sendUpdates();e.removed.length&&(this._cleanupRequired=!0),i("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView updateMessage`,e);const t=this._createTileMessages(e);await this._densifyItemsForDisplay(t),await this._fetchResources(t),this._write(t);for(const t of e.added)this._setFilterState(t);for(const t of e.updated)this._setFilterState(t);i("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate`,e),this._attributeStore.sendUpdates(),i("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate.await`,e)}catch(e){}this._cleanupSharedResources()}_createTileMessages(e){const t=new Map;for(const r of e.added){const e=this.view.graphicsTileStore.getIntersectingTiles(r.symbolBounds);for(const s of e)G.getOrCreate(s,t,this._metadata).append(r)}for(const r of e.updated){const e=this.view.graphicsTileStore.getIntersectingTiles(r.prevSymbolBounds),s=this.view.graphicsTileStore.getIntersectingTiles(r.symbolBounds);for(const s of e)G.getOrCreate(s,t,this._metadata).removed.push(r.displayId);for(const e of s)G.getOrCreate(e,t,this._metadata).append(r)}for(const r of e.removed){const e=this.view.graphicsTileStore.getIntersectingTiles(r.symbolBounds);for(const s of e)G.getOrCreate(s,t,this._metadata).removed.push(r.displayId)}return Array.from(t.values())}async _densifyItemsForDisplay(e){const t=new Map;for(const r of e)for(const e of r.addedOrModified)t.has(e)||t.set(e,e.densifyCurvedGeometryForDisplay(this.view.spatialReference));await Promise.all(t.values())}async _fetchResources(e){const t={timeZone:null,timeExtent:null};for(const{tile:r,reader:s}of e){i("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${r.id}] GraphicsView fetchResources`,e);const a=s.getCursor();for(;a.next();)for(const e of a.getMeshWriters())e.enqueueRequest(this._resourceProxy,a,r.createArcadeEvaluationOptions(t))}await this._resourceProxy.fetchEnqueuedResources()}_write(e){for(const t of e){i("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView write`,t);const e=this._writeMeshes(t);let r=this._tiles.get(t.tile.key);r||(r=this._createFeatureTile(t.tile.key)),i("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView onTileData`,t),this.container.onTileData(r,{type:"update",modify:e,remove:t.removed,end:!1,attributeEpoch:this._attributeStore.epoch,objectIdMap:t.objectIdMap}),this.container.requestRender()}}_writeMeshes(e){const t={timeZone:null,timeExtent:null},r=new S.MeshData(e.tile.id),s=e.reader.getCursor();for(;s.next();){r.entityStart(s.getDisplayId(),s.getZOrder());for(const i of s.getMeshWriters())i.write(r,this._resourceProxy,s,e.tile.createArcadeEvaluationOptions(t),e.tile.level);r.entityEnd()}return{...r.serialize().message,tileId:e.tile.id}}_setFilterState(e){const t=e.displayId,r=this._attributeStore.getHighlightFlags(e.objectId);this._attributeStore.setData(t,0,0,r|(e.visible?f.filterFlag0:0))}_getSymbolForGraphic(e){return null!=e.symbol?e.symbol:null!=this._effectiveRenderer?this._effectiveRenderer.getSymbol(e):this._getNullSymbol(e)}async _ensureSymbolResource(e){if(!e.symbol)return;const t=await this._getSymbolInfo(e.symbol);if(!t)return;const r=t.linearCIM.filter(e=>"text"===e.type);if(r.length>0){const s=await this._getTextResources(e,r);return void(e.symbolResource={symbolInfo:t,textInfo:s})}e.symbolResource={symbolInfo:t}}_getSymbolInfo(e){const t=e.hash();return this._hashToSymbolInfo.has(t)||this._hashToSymbolInfo.set(t,this._createSymbolInfo(t,e).catch(e=>null)),this._hashToSymbolInfo.get(t)}async _createSymbolInfo(e,t){const r=await this._convertToCIMSymbol(t),s=await this._createLinearCIM(r);return{hash:e,cimSymbol:r,linearCIM:s,meshWriters:await this._createMeshWriters(r,s)}}async _convertToCIMSymbol(e){const t=g.symbolToCIM(e);return"web-style"===t.type?this._convertToCIMSymbol(await t.fetchSymbol({acceptedFormats:["cim","web"]})):t}async _createLinearCIM(e){return await Promise.all(g.CIMSymbolHelper.fetchResources(e.symbol,this._cimResourceManager,[])),this.view.stage.cimAnalyzer.analyzeSymbolReference(e,!1)}async _createMeshWriters(e,t){n.throwIfAborted(this._controller.signal);const r=this.container.instanceStore,s=this.view.stage.meshWriterRegistry,i=await I.createGraphicSymbolMeshSchemas(e,t,r);return Promise.all(i.map(e=>s.createMeshWriter(this._storage,this._resourceProxy,{tileInfo:this.view.featuresTilingScheme.tileInfo},e,null)))}_onTileUpdate(e){if(e.added&&e.added.length>0)for(const t of e.added)this._updateTracking.addPromise(this._addTile(t));if(e.removed&&e.removed.length>0)for(const t of e.removed)this._removeTile(t.key)}_createFeatureTile(e){const t=this.view.featuresTilingScheme.getTileBounds(u.create(),e),r=this.view.featuresTilingScheme.getTileResolution(e.level),s=new b.FeatureTile(e,r,t[0],t[3]);return this._tiles.set(e,s),this.container.addChild(s),s}async _addTile(e){if(!this._attached)return;const t=this._graphicStore.queryItems(e);if(!t.length)return;const r=this._createFeatureTile(e.key),s=G.fromItems(e,t,this._metadata);await this._densifyItemsForDisplay([s]),await this._fetchResources([s]);const i=this._writeMeshes(s);r.onMessage({type:"append",append:i,clear:!1,end:!0,attributeEpoch:this._attributeStore.epoch,objectIdMap:s.objectIdMap})}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_getNullSymbol(e){const t=e.geometry;return t?p.isPolyline(t)?_.errorPolylineSymbol2D:p.isPolygon(t)||p.isExtent(t)?_.errorPolygonSymbol2D:this.defaultPointSymbolEnabled?_.errorPointSymbol2D:null:this.defaultPointSymbolEnabled?_.errorPointSymbol2D:null}async _getTextResources(e,t){const r=new Array,s=new Array;for(let i=0;i<t.length;i++){const a=t[i],{resource:o,overrides:n}=a.textRasterizationParam;if(n?.length>0){const t=m.OverrideHelper.resolveSymbolOverrides({type:"CIMSymbolReference",primitiveOverrides:n,symbol:{type:"CIMPointSymbol",symbolLayers:[{type:"CIMVectorMarker",enable:!0,size:o.symbol.height,anchorPointUnits:"Relative",frame:{xmin:-5,ymin:-5,xmax:5,ymax:5},markerGraphics:[{type:"CIMMarkerGraphic",geometry:{x:0,y:0},symbol:o.symbol,textString:o.textString}],scaleSymbolsProportionally:!0,respectFrame:!0}]}},e,this.view.spatialReference,null,p.getJsonType(e.projectedGeometry),null,null);t.then(e=>{const t=e.symbolLayers[0],{textString:r}=t.markerGraphics[0];s.push({type:"cim-rasterization-info",resource:{type:"text",textString:r||"",font:o.font}}),a.text=o.textString=r||""}),r.push(t)}else s.push({type:"cim-rasterization-info",resource:o})}r.length>0&&await Promise.all(r);const i=s.map(e=>this.view.stage.textureManager.rasterizeItem(e)),a=await Promise.all(i);o.assertIsSome(a);const n=new Map;for(let e=0;e<t.length;e++){const r=t[e];n.set(r.textRasterizationParam.resource.symbol,{text:r.text,glyphMosaicItems:a[e]})}return n}_cleanupSharedResources(){if(!this._cleanupRequired)return;const e=performance.now();if(e-this._lastCleanup<5e3)return;this._cleanupRequired=!1,this._lastCleanup=e;const t=new Set;for(const e of this._graphicStore.items()){const r=e.symbolResource?.symbolInfo.hash;t.add(r)}const r=new Set(this._hashToSymbolInfo.keys());for(const e of r.values())t.has(e)||this._hashToSymbolInfo.delete(e)}},t.__decorate([h.property()],e.default.prototype,"_effectiveRenderer",null),t.__decorate([h.property({constructOnly:!0})],e.default.prototype,"layerId",void 0),t.__decorate([h.property({constructOnly:!0})],e.default.prototype,"requestUpdateCallback",void 0),t.__decorate([h.property()],e.default.prototype,"container",void 0),t.__decorate([h.property({constructOnly:!0})],e.default.prototype,"graphics",void 0),t.__decorate([h.property()],e.default.prototype,"renderer",void 0),t.__decorate([h.property()],e.default.prototype,"_updateTracking",void 0),t.__decorate([h.property()],e.default.prototype,"updating",null),t.__decorate([h.property()],e.default.prototype,"view",void 0),t.__decorate([h.property()],e.default.prototype,"updateRequested",void 0),t.__decorate([h.property()],e.default.prototype,"defaultPointSymbolEnabled",void 0),e.default=t.__decorate([l.subclass("esri.views.2d.layers.graphics.GraphicsView2D")],e.default),e.default});