// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../chunks/tslib.es6","../../../core/Accessor","../../../core/MapUtils","../../../core/maybe","../../../core/SetUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../core/libs/gl-matrix-2/math/vec2","../../support/ScheduledQueueProcessor"],function(e,t,s,r,o,c,i,u,n,a,l,h){"use strict";const p=[0,0];let y=class extends t{constructor(e){super(e),this._keyToItem=new Map,this._tilesByScale=new Map,this.concurrency=6}initialize(){const{concurrency:e,process:t,scheduler:s,priority:r}=this;this._queue=new h.ScheduledQueueProcessor({concurrency:e,scheduler:s,priority:r,process:(e,s)=>{const r=this._keyToItem.get(e);return t(r,{signal:s})},peeker:e=>this._peek(e)})}destroy(){this.clear(),this._queue=r.destroyMaybe(this._queue)}get length(){return this._queue?this._queue.length:0}abort(e){const t="string"==typeof e?e:e.id;this._queue.abort(t)}clear(){this._queue.clear(),this._keyToItem.clear(),this._tilesByScale.clear()}has(e){return"string"==typeof e?this._keyToItem.has(e):this._keyToItem.has(e.id)}pause(){this._queue.pause()}push(e){const t=e.key.id;if(this._queue.has(t))return this._queue.get(t);const r=this._queue.push(t),o=this.tileInfoView.getTileScale(e.key),c=s.getOrCreateMapValue(this._tilesByScale,o,()=>new Set),i=()=>{c.delete(e.key),0===c.size&&this._tilesByScale.delete(o),this._keyToItem.delete(t)};return c.add(e.key),this._keyToItem.set(t,e),r.then(i,i),r}reset(){this._queue.reset()}resume(){this._queue.resume()}_peek(e){if(!this.state)return e.values().next().value;const t=new Set;for(const s of e)t.add(this._keyToItem.get(s).key);const s=this.state.scale;let r,c=Number.POSITIVE_INFINITY;for(const[e,i]of this._tilesByScale)if(o.someSet(i,e=>t.has(e))){const t=Math.abs(e-s);t<c&&(r=i,c=t)}return this._getClosestTileKey(r,e).id}_getClosestTileKey(e,t){const s=this.tileInfoView,r=this.state.center;let o,c=Number.POSITIVE_INFINITY;for(const i of e)if(t.has(i.id)){s.getTileCoords(p,i);const e=l.distance(p,r);e<c&&(c=e,o=i)}return o}};return e.__decorate([c.property({constructOnly:!0})],y.prototype,"concurrency",void 0),e.__decorate([c.property({constructOnly:!0})],y.prototype,"priority",void 0),e.__decorate([c.property({constructOnly:!0})],y.prototype,"process",void 0),e.__decorate([c.property({constructOnly:!0})],y.prototype,"scheduler",void 0),e.__decorate([c.property()],y.prototype,"state",void 0),e.__decorate([c.property({constructOnly:!0})],y.prototype,"tileInfoView",void 0),y=e.__decorate([a.subclass("esri.views.2d.tiling.TileQueue")],y),y});