// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/clock","../../../core/maybe","../InputHandler","./support"],function(t,e,i,n,o){"use strict";class r extends n.InputHandler{constructor(t={},i=e.clock){super(!1),this._clock=i,this._pointerState=new Map,this._parameters=o.getHoldAndDragParameters(t),this._pointerDrag=this.registerOutgoing("pointer-drag"),this._immediateClick=this.registerOutgoing("immediate-click"),this._pointerHold=this.registerOutgoing("hold"),this.registerIncoming("pointer-down",t=>this._handlePointerDown(t)),this.registerIncoming("pointer-up",t=>this._handlePointerLoss(t,"pointer-up")),this.registerIncoming("pointer-capture-lost",t=>this._handlePointerLoss(t,"pointer-capture-lost")),this.registerIncoming("pointer-cancel",t=>this._handlePointerLoss(t,"pointer-cancel")),this._moveHandle=this.registerIncoming("pointer-move",t=>this._handlePointerMove(t)),this._moveHandle.pause()}onUninstall(){this._pointerState.forEach(t=>{t.holdTimeout=i.removeMaybe(t.holdTimeout)}),super.onUninstall()}_handlePointerDown(t){const e=t.data,i=e.native.pointerId;let n=null;0===this._pointerState.size&&(n=this._clock.setTimeout(()=>{const e=this._pointerState.get(i);if(e){if(!e.isDragging){const i=e.previousEvent;this._pointerHold.emit(i,void 0,t.modifiers),e.holdEmitted=!0}e.holdTimeout=null}},this._parameters.holdDelay));const o={startEvent:e,previousEvent:e,startTimestamp:t.timestamp,isDragging:!1,downButton:e.native.button,holdTimeout:n,modifiers:new Set};this._pointerState.set(i,o),this.startCapturingPointer(e.native),this._moveHandle.resume(),this._pointerState.size>1&&this._startDragging(t)}_handlePointerMove(t){const e=t.data,i=e.native.pointerId,n=this._pointerState.get(i);n&&(n.isDragging?this._pointerDrag.emit(s("update",n,e),void 0,n.modifiers):o.euclideanDistance(e,n.startEvent)>this._getDragThreshold(e.native.pointerType)&&this._startDragging(t),n.previousEvent=e)}_getDragThreshold(t){switch(t){case"touch":return this._parameters.movementUntilTouchDrag;case"pen":return this._parameters.movementUntilPenDrag;default:return this._parameters.movementUntilMouseDrag}}_startDragging(t){const e=t.data,i=e.native.pointerId;this._pointerState.forEach(n=>{null!=n.holdTimeout&&(n.holdTimeout.remove(),n.holdTimeout=null),n.isDragging||(n.modifiers=t.modifiers,n.isDragging=!0,i===n.startEvent.native.pointerId?this._pointerDrag.emit(s("start",n,e)):this._pointerDrag.emit(s("start",n,n.previousEvent),t.timestamp))})}_handlePointerLoss(t,e){const i=t.data,n=i.native.pointerId,o=this._pointerState.get(n);o&&(null!=o.holdTimeout&&(o.holdTimeout.remove(),o.holdTimeout=null),o.isDragging?this._pointerDrag.emit(s("end",o,"pointer-up"===e?i:o.previousEvent),void 0,o.modifiers):"pointer-up"===e&&o.downButton===i.native.button&&t.timestamp-o.startTimestamp<=this._parameters.maximumClickDelay&&!o.holdEmitted&&this._immediateClick.emit(i),this._pointerState.delete(n),this.stopCapturingPointer(i.native),0===this._pointerState.size&&this._moveHandle.pause())}}function s(t,e,i){return{action:t,startEvent:e.startEvent,previousEvent:e.previousEvent,currentEvent:i}}t.PointerClickHoldAndDrag=r,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});