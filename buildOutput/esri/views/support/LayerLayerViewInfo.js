// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../core/Error","../../core/maybe","../../core/promiseUtils","../../layers/Layer"],function(e,r,t,i,l){"use strict";e.LayerLayerViewInfo=class{constructor(e,t,l){this.layer=e,this.view=t,this.layerViewImporter=l,this._controller=new AbortController,this._deferred=i.createResolver(),this._started=!1,this.done=!1,this.promise=this._deferred.promise,i.onAbort(this._controller.signal,()=>{this._recycleController?.abort();const t=new r("cancelled:layerview-create","layerview creation cancelled",{layer:e});this._deferred.reject(t)})}tryRecycle(e){if(!this.done||!this.layerView||!("tryRecycleWith"in this.layerView))return null;this._recycleController?.abort(),this._recycleController=new AbortController;const r=this.layer.type,t=this._recycleController.signal;for(let l=0;l<e.length;l++){const a=e[l];if(a.type!==r)continue;const o=this.layerView.tryRecycleWith(a,{signal:t});if(o){e.splice(l,1),this.layer=a;const r=this.layerView,s=r.view;return this.promise=o.then(()=>(i.throwIfAborted(t),a.emit("layerview-destroy",{view:s,layerView:r}),s.emit("layerview-destroy",{view:s,layerView:r}),a.emit("layerview-create",{view:s,layerView:r}),s.emit("layerview-create",{view:s,layerView:r}),r)),this.promise}}return null}destroy(){this._controller.abort();const{layerView:e}=this;if(e){const{layer:r,view:t}=this;r.emit("layerview-destroy",{view:t,layerView:e}),t.emit("layerview-destroy",{layer:r,layerView:e})}this.done=!0,this.layer=null,this.layerView=null,this.view=null,this.layerViewImporter=null,this._map=null}async start(){const{view:e}=this;if(this._started||!e.map)return;this._started=!0;const{_controller:{signal:a},layer:o}=this;this._map=e.map;try{let s,y;if(await o.load({signal:a}),o.prefetchResources&&await o.prefetchResources({signal:a}),function(e){return e.createLayerView!==l.prototype.createLayerView}(o))s=await o.createLayerView(e,{signal:a});else{if(!this.layerViewImporter.hasLayerViewModule(o))throw new r("layer:view-not-supported","No layerview implementation was found");const t=await this.layerViewImporter.importLayerView(o);i.throwIfAborted(a),s="default"in t?new t.default({layer:o,view:e}):new t({layer:o,view:e})}const n=()=>{y=t.removeMaybe(y),s.destroyed||s.destroy(),this.done=!0};y=i.onAbort(a,n),i.throwIfAborted(a);try{await s.when()}catch(e){throw n(),e}const w=this._map?.allLayers?.includes(o);if(!w)return n(),void this._deferred.reject(new r("view:no-layerview-for-layer","The layer has been removed from the map",{layer:o}));this.layerView=s,o.emit("layerview-create",{view:e,layerView:s}),e.emit("layerview-create",{layer:o,layerView:s}),this.done=!0,this._deferred.resolve(s)}catch(t){o.emit("layerview-create-error",{view:e,error:t}),e.emit("layerview-create-error",{layer:o,error:t}),this.done=!0,this._deferred.reject(new r("layerview:create-error","layerview creation failed",{layer:o,error:t}))}}},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});