// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../core/mathUtils","../../core/libs/gl-matrix-2/math/vec2","../../core/libs/gl-matrix-2/factories/vec2f64","../../chunks/vec32","../../core/libs/gl-matrix-2/factories/vec3f64","../../core/libs/gl-matrix-2/math/common","../../geometry/support/plane","../3d/support/mathUtils","./geometry2dUtils"],function(t,e,n,r,s,c,i,o,a,u){"use strict";function d(t,{start:e,end:n,type:r},i=c.create()){const o=s.sub(P,t,e),a=s.sub(V,n,e),u=s.dot(o,a)/s.dot(a,a);return s.scaleAndAdd(i,e,a,0===r?Math.max(u,0):u)}function l({start:t,end:e,type:n},r){const c=s.sub(P,r,t),o=s.sub(V,e,t);if(0===n&&s.dot(o,c)<-i.getEpsilon())return s.distance(t,r);const a=s.cross(q,o,c);return s.len(a)/s.len(o)}const f=(()=>{const t=c.create(),e=c.create(),i=c.create();return({start:d,end:l},{center:f,radius:p,normal:A,slicePlane:b})=>{const m=o.fromPositionAndNormal(f,A,v);if(h(o.distance(m,d),0)&&h(o.distance(m,l),0)){a.tangentFrame(A,t,e);const o=(r,c)=>(s.subtract(i,c,f),n.set(r,s.dot(i,t),s.dot(i,e)),r),h=u.intersectLineLikeAndCircle({start:o(L,d),end:o(g,l),type:1},r.ZEROS,p),m=[];for(const[n,r]of h){const i=s.copy(c.create(),f);s.scaleAndAdd(i,i,t,n),s.scaleAndAdd(i,i,e,r),b&&!y(b,i)||m.push(i)}return m}const P=c.create();return o.intersectLine(m,d,l,P)?!h(s.distance(P,f),p)||b&&!y(b,P)?[]:[P]:[]}})();function p(t,e){const n=t.start,r=t.end,o=e.start,a=e.end,u=s.sub(P,r,n),d=s.sub(V,a,o),l=s.sub(q,o,n),f=s.cross(C,u,d);if(!h(s.dot(l,f),0))return[];const p=s.sqrLen(f);if(h(p,0))return[];const A=s.cross(M,l,d),b=s.dot(A,f)/p,y=s.scaleAndAdd(k,n,u,b);if(0===t.type){const t=s.sub(E,y,n);if(s.dot(u,t)<-i.getEpsilon())return[]}if(0===e.type){const t=s.sub(E,y,o);if(s.dot(d,t)<-i.getEpsilon())return[]}return[c.clone(y)]}function A({start:t,end:e,type:n},r){const o=s.sub(P,r,t),a=s.sub(V,e,t),u=s.cross(q,a,o),d=s.sqrLen(u)/s.sqrLen(a),l=i.getEpsilon();if(d<l)switch(n){case 1:return[c.clone(r)];case 0:return s.dot(a,o)<-l?[]:[c.clone(r)]}return[]}function b(t,e,{start:n,end:r,type:c}){return s.set(t.start,n[0],n[1],e),s.set(t.end,r[0],r[1],e),t.type=m[c],t}function h(t,n){return e.floatEqualAbsolute(Math.abs(t-n),0,i.getEpsilon())}function y(t,e){return o.isPointInside(t,e)}const m={0:1,1:0},L=r.create(),g=r.create(),P=c.create(),V=c.create(),q=c.create(),C=c.create(),M=c.create(),k=c.create(),E=c.create(),v=o.create(),T={start:c.create(),end:c.create(),type:1},x={start:c.create(),end:c.create(),type:1};t.intersectLineAndPoint=A,t.intersectLineLikeAndCircle=f,t.intersectLineLikeAndVerticalCylinder=function({start:t,end:e,type:r},i,o){const a=[],u=s.subtract(P,e,t),d=n.subtract(g,t,i),l=n.squaredLength(u),f=2*n.dot(u,d),p=f*f-4*l*(n.squaredLength(d)-o*o);if(0===p){const e=-f/(2*l);(1===r||e>=0)&&a.push(s.scaleAndAdd(c.create(),t,u,e))}else if(p>0){const e=Math.sqrt(p),n=(-f+e)/(2*l);(1===r||n>=0)&&a.push(s.scaleAndAdd(c.create(),t,u,n));const i=(-f-e)/(2*l);(1===r||i>=0)&&a.push(s.scaleAndAdd(c.create(),t,u,i))}return a},t.intersectLineLikes=p,t.intersectVerticalCylinderAndPoint=function(t,e,r){return h(n.squaredDistance(r,t),e*e)?[c.clone(r)]:[]},t.intersectVerticalCylinders=function(t,e,s,c){const[i,o]=t,[a,u]=s,d=a-i,l=u-o,f=d*d+l*l,p=Math.sqrt(f);if(p>e+c)return[];if(p<Math.abs(e-c))return[];if(h(p,0)&&h(e,c))return[];const A=(e*e-c*c+f)/(2*p),b=Math.sqrt(e*e-A*A),y=b*l/p,m=b*d/p,[g,P]=n.lerp(L,t,s,A/p);return h(y,m)?[r.fromValues(g,P)]:[r.fromValues(g+y,P-m),r.fromValues(g-y,P+m)]},t.intersectVerticalPlaneAndLineLike=function(t,e){const r=t.start,o=t.end,a=n.subtract(L,o,r),u=s.set(V,-a[1],a[0],0),d=e.start,l=e.end,f=s.sub(q,l,d),p=s.dot(f,u),A=s.set(C,r[0],r[1],0),b=s.sub(M,A,d),h=s.dot(b,u),y=i.getEpsilon();if(Math.abs(p)<y)return Math.abs(h),[];const m=h/p,P=s.scaleAndAdd(k,d,f,m);if(0===e.type){const t=s.sub(E,P,d);if(s.dot(t,f)<-y)return[]}if(1===t.type){const t=n.sub(g,P,r);if(n.dot(t,a)<-y)return[]}return[c.clone(P)]},t.intersectVerticalPlaneAndPoint=function(t,e){return A(b(T,e[2],t),e)},t.intersectVerticalPlaneAndVerticalCylinder=function({start:t,end:e,type:s},c,i){const o=[],a=n.subtract(L,e,t),u=n.subtract(g,t,c),d=n.squaredLength(a),l=2*n.dot(a,u),f=l*l-4*d*(n.squaredLength(u)-i*i);if(0===f){const e=-l/(2*d);(0===s||e>=0)&&o.push(n.scaleAndAdd(r.create(),t,a,e))}else if(f>0){const e=Math.sqrt(f),c=(-l+e)/(2*d);(0===s||c>=0)&&o.push(n.scaleAndAdd(r.create(),t,a,c));const i=(-l-e)/(2*d);(0===s||i>=0)&&o.push(n.scaleAndAdd(r.create(),t,a,i))}return o},t.intersectVerticalPlanes=function(t,e){return p(b(T,0,t),b(x,0,e)).map(([t,e])=>r.fromValues(t,e))},t.isClose=h,t.isPointInsidePlane=y,t.pointToLineLikeDistance=l,t.pointToVerticalCylinderDistance=function(t,e,r){return n.distance(t,e)-r},t.pointToVerticalPlaneDistance=function(t,e){return l(b(T,t[2],e),t)},t.pointsInsidePlane=function(t,e){return e.filter(e=>y(t,e))},t.projectPointToLineLike=d,t.projectPointToVerticalCylinder=function(t,e,r,s=c.create()){const i=n.subtract(L,t,e),o=n.length(i),a=0===o?1:r/o;return n.scaleAndAdd(s,e,i,a),s[2]=t[2],s},t.projectPointToVerticalPlane=function(t,e,n){return d(t,b(T,t[2],e),n)},t.vectorsHaveCloseZ=function(t,e){return h(t[2],e[2])},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});