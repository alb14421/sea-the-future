// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../chunks/tslib.es6","../../Color","../../Graphic","../../core/Accessor","../../core/Collection","../../core/mathUtils","../../core/accessorSupport/decorators/property","../../core/has","../../core/Logger","../../core/RandomLCG","../../core/accessorSupport/decorators/subclass","../../symbols/PointSymbol3D","../../symbols/SimpleFillSymbol","../../symbols/TextSymbol","../../symbols/TextSymbol3DLayer","../../symbols/callouts/LineCallout3D","../../symbols/callouts/LineCallout3DBorder","../../symbols/support/Symbol3DVerticalOffset"],function(e,s,l,o,t,r,i,a,n,c,h,y,b,p,u,g,d,m,_){"use strict";const w=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];e.TileTreeDebugger=class extends t{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._symbols=w.map(e=>new p({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}})),this._enabled=!0}initialize(){this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=this.getTiles(),s=new Array,t=new Set(this._labels.size>0?this._labels.keys():this._polygons.keys());e.forEach((a,n)=>{const c=a.lij.toString();t.delete(c);const h=a.measures?.lodLevel??a.level,y=a.geometry;if(this.enablePolygons&&!this._polygons.has(c)){const e=a.polygonSymbol??this._symbols[h%this._symbols.length],l=new o({geometry:y,symbol:e});this._polygons.set(c,l),s.push(l)}if(this.enableLabels){const t=(e=>{if(null!=e.label)return e.label;let s=e.lij.toString();return null!=e.loadPriority&&(s+=` (${e.loadPriority})`),e.measures&&(s+=`[${e.measures.lodLevel}]`),s})(a),h=n/(e.length-1),p=i.lerp(0,200,h),w=i.lerp(20,6,h)/.75,v=null!=a.loadPriority&&a.loadPriority>=e.length,f=new l([p,v?0:p,v?0:p]),T="3d"===this.view.type?()=>new b({verticalOffset:new _({screenLength:40/.75}),callout:new d({color:new l("white"),border:new m({color:new l("black")})}),symbolLayers:new r([new g({text:t,halo:{color:"white",size:1/.75},material:{color:f},size:w})])}):()=>new u({text:t,haloColor:"white",haloSize:1/.75,color:f,size:w}),S=this._labels.get(c);if(S){const e=T();null!=S.symbol&&JSON.stringify(e)===JSON.stringify(S.symbol)||(S.symbol=e)}else{const e=new o({geometry:y.extent.center,symbol:T()});this._labels.set(c,e),s.push(e)}}});const a=new Array;t.forEach(e=>{const s=this._polygons.get(e);null!=s&&(a.push(s),this._polygons.delete(e));const l=this._labels.get(e);null!=l&&(a.push(l),this._labels.delete(e))}),this.view.graphics.removeMany(a),this.view.graphics.addMany(s)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}},s.__decorate([a.property({constructOnly:!0})],e.TileTreeDebugger.prototype,"view",void 0),s.__decorate([a.property({readOnly:!0})],e.TileTreeDebugger.prototype,"updating",void 0),s.__decorate([a.property()],e.TileTreeDebugger.prototype,"enabled",null),e.TileTreeDebugger=s.__decorate([y.subclass("esri.views.support.TileTreeDebugger")],e.TileTreeDebugger),Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});