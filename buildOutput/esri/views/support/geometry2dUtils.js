// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../core/mathUtils","../../core/libs/gl-matrix-2/math/vec2","../../core/libs/gl-matrix-2/factories/vec2f64"],function(t,e,n,r){"use strict";function c(t,e){return t[0]*e[1]-t[1]*e[0]}function s(t,e,r){const c=n.dot(r,e)/n.squaredLength(r);return n.scale(t,r,c)}function o(t,e,r,c,o=r){return n.subtract(u,c,r),n.subtract(d,e,o),s(l,d,u),n.add(t,o,l)}function a(t,e,r,c){n.subtract(u,e,r);const s=c/n.length(u);return n.scaleAndAdd(t,r,u,s)}const u=r.create(),i=r.create(),d=r.create(),l=r.create();t.cross=c,t.intersectCircleAndPoint=function(t,n,c){return a(d,c,t,n),e.floatEqualAbsolute(d[0],c[0])&&e.floatEqualAbsolute(d[1],c[1])?[r.clone(c)]:[]},t.intersectLineAndPoint=function(t,n){return o(d,n,t.start,t.end),e.floatEqualAbsolute(d[0],n[0])&&e.floatEqualAbsolute(d[1],n[1])?[r.clone(n)]:[]},t.intersectLineAndRay=function(t,e){const r=t.start,s=t.end,o=e.start,a=e.end,f=n.subtract(u,s,r),A=n.subtract(i,a,o),b=c(f,A);if(Math.abs(b)<=1e-6)return[];const p=n.subtract(d,r,o),h=c(A,p)/b,y=c(f,p)/b;if(h>=0){if(y>=0||1===e.type)return[n.scaleAndAdd(l,r,f,h)]}else if(1===t.type&&(y>=0||1===e.type))return[n.scaleAndAdd(l,r,f,h)];return[]},t.intersectLineLikeAndCircle=function(t,e,r){const c=[],s=n.subtract(u,t.end,t.start),o=n.subtract(i,t.start,e),a=n.squaredLength(s),f=2*n.dot(s,o),A=f*f-4*a*(n.squaredLength(o)-r*r);if(0===A){const e=-f/(2*a);(1===t.type||e>=0)&&c.push(n.scaleAndAdd(l,t.start,s,e))}else if(A>0){const e=Math.sqrt(A),r=(-f+e)/(2*a);(1===t.type||r>=0)&&c.push(n.scaleAndAdd(l,t.start,s,r));const o=(-f-e)/(2*a);(1===t.type||o>=0)&&c.push(n.scaleAndAdd(d,t.start,s,o))}return c},t.pointToLineDistance=function(t,e,r){const c=(e[0]-t[0])*(r[1]-t[1])-(e[1]-t[1])*(r[0]-t[0]);return Math.abs(c)/n.distance(e,r)},t.projectPoint=s,t.projectPointToCircle=a,t.projectPointToLine=o,t.projectPointToRay=function(t,e,r,c){n.subtract(u,c,r),n.subtract(d,e,r);const s=n.dot(u,d)/n.squaredLength(u);return s>0?n.scaleAndAdd(t,r,u,s):n.copy(t,r)},Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});