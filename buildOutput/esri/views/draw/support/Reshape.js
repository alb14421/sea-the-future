// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["../../../chunks/tslib.es6","../../../Graphic","../../../core/asyncUtils","../../../core/Collection","../../../core/Error","../../../core/Evented","../../../core/Logger","../../../core/maybe","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../geometry/Point","../../../geometry/Polyline","../../../geometry/support/coordsUtils","../../../layers/GraphicsLayer","../../../symbols/SimpleMarkerSymbol","../../2d/interactive/SnappingVisualizer2D","./ConnectedReshapeManager","./drawUtils","./GraphicMover","./HighlightHelper","./layerUtils","./reshapeTooltipUtils","./settings","../../input/InputManager","../../interactive/coordinateHelper","../../interactive/keybindings","../../interactive/editGeometry/EditGeometryOperations","../../interactive/sketch/SketchOptions","../../interactive/snapping/SnappingContext","../../interactive/tooltip/tooltipCommonUtils"],function(e,t,i,o,s,r,n,a,p,h,c,l,d,y,_,v,m,g,u,x,G,f,M,b,V,S,w,E,I,T,C,O,k){"use strict";const R=S.settings.reshapeGraphics,H={vertices:{default:new g({style:"circle",size:R.vertex.size,color:R.vertex.color,outline:{color:R.vertex.outlineColor,width:1}}),hover:new g({style:"circle",size:R.vertex.hoverSize,color:R.vertex.hoverColor,outline:{color:R.vertex.hoverOutlineColor,width:1}}),selected:new g({style:"circle",size:R.selected.size,color:R.selected.color,outline:{color:R.selected.outlineColor,width:1}})},midpoints:{default:new g({style:"circle",size:R.midpoint.size,color:R.midpoint.color,outline:{color:R.midpoint.outlineColor,width:1}}),hover:new g({style:"circle",size:R.midpoint.size,color:R.midpoint.color,outline:{color:R.midpoint.outlineColor,width:1}})}},A=Symbol();let U=class extends r.EventedAccessor{constructor(e){super(e),this._updateHandlesOnExternalGeometryChange=null,this._activeOperationInfo=null,this._connectedReshapeManager=null,this._editGeometryOperations=null,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingContext=null,this._snappingGraphicsLayer=null,this._hoverGraphic=null,this._snappingTask=null,this._stagedVertex=null,this.tooltip=null,this.activeTooltipInfo=null,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.connectedReshapeProviders=[],this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.highlightName=null,this.highlightsEnabled=!0,this.layer=null,this.midpointGraphics=new o,this.midpointSymbol=new g({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=new o,this.snappingManager=null,this.symbols=H,this.sketchOptions=new C,this.type="reshape",this.vertexGraphics=new o,this.view=null}initialize(){const e=this.view;this._highlightHelper=new M({view:e}),this._setup(),this._updateHandlesOnExternalGeometryChange=p.pausable(()=>this.graphic?.geometry,e=>{if(!e)return;const t=new Set(this.selectedVertices.map(e=>e.attributes?.pointIndex));this._highlightHelper.removeAll(),this._setUpHighlights(),this._setupGraphics(),this._clearSelection(),this.vertexGraphics.filter(e=>t.has(e.attributes.pointIndex)).forEach(e=>this._addToSelection(e));const{enableMovement:i,_mover:o,graphic:s,midpointGraphics:r,vertexGraphics:n}=this,a=n.concat(r).items;i&&a.push(s),o?.set("graphics",a)},p.sync),this.tooltip=k.makeTooltip(()=>({view:e,options:this.sketchOptions.tooltips})),this.tooltipInfos=V.createTooltipInfos(this.sketchOptions),this.addHandles([p.when(()=>e?.ready,()=>{const{layer:e,view:t}=this;b.addUniqueLayer(t,e),this.addHandles(t.on("key-down",e=>this._keyDownHandler(e),w.ViewEventPriorities.TOOL))},{once:!0,initial:!0}),p.watch(()=>this.graphic,()=>this.refresh()),p.watch(()=>this.layer,(e,t)=>{t&&(this._clearSelection(),this._resetGraphics(t)),this.refresh()}),p.watch(()=>[this.highlightsEnabled,this.highlightName],()=>{this._highlightHelper?.removeAll(),this._setUpHighlights()}),p.watch(()=>this.enableMidpoints,()=>this.refresh()),V.connectTooltip(this.tooltip,()=>this._tooltipsContext),p.watch(()=>this.view.effectiveTheme.accentColor,()=>this._updateSymbolsForTheme(),p.initial),this._updateHandlesOnExternalGeometryChange]),this._updateTooltip()}destroy(){this._reset(),this._mover?.destroy(),this._mover=null,this._connectedReshapeManager=a.destroyMaybe(this._connectedReshapeManager),this.tooltip=a.destroyMaybe(this.tooltip)}get _coordinateHelper(){return this._editGeometryOperations?.data.coordinateHelper??E.createCoordinateHelper(!!this.graphic.geometry?.hasZ,!!this.graphic.geometry?.hasM,this.view.spatialReference)}get _selectedVertex(){return 1===this.selectedVertices.length?this.selectedVertices.at(0):void 0}get _tooltipsContext(){const{automaticAreaMeasurementUtils:e,automaticLengthMeasurementUtils:t,sketchOptions:i,activeTooltipInfo:o,graphic:s}=this;return{sketchOptions:i,activeTooltipInfo:o,graphic:s,selectedVertex:this._selectedVertex,automaticAreaMeasurementUtils:e,automaticLengthMeasurementUtils:t,updateGeometry:(e,t,i,o,s)=>{this._setUpGeometryHelper();const r=e===this.graphic;if(r?this._emitMoveStartEvent(0,0):this._emitReshapeStartEvent(e),this._syncGeometryAfterVertexMove(e,t,o,s,!0),r){const{view:e}=this,o=e.toScreen(i),s=e.toScreen(t),r=(s?.x??0)-(o?.x??0),n=(s?.y??0)-(o?.y??0);this._emitMoveEvent(r,n),this._emitMoveStopEvent(r,n)}else this._emitReshapeEvent(e),this._emitReshapeStopEvent(e);this._editGeometryOperations=a.destroyMaybe(this._editGeometryOperations)}}}get state(){const e=this.view.ready,t=!(!this.graphic||!this.layer);return e&&t?"active":e?"ready":"disabled"}isUIGraphic(e){const t=[];return this.graphic&&t.push(this.graphic),t.concat(this.vertexGraphics.items,this.midpointGraphics.items),t.length>0&&t.includes(e)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){const{selectedVertices:e}=this;e.length&&this._removeVertices(e)}_setup(){const{graphic:e,layer:t}=this;if(!t||null==e?.geometry)return;const i=e.geometry;"mesh"!==i.type&&"extent"!==i.type?("polygon"===i.type&&v.closeRingsAndFixWinding(i),this._setUpHighlights(),this._setupGraphics(),this._setupMover(),this._setupConnectedReshapeManager()):this._logGeometryTypeError()}_setUpHighlights(){this.highlightsEnabled&&this.graphic&&this._highlightHelper?.add(this.graphic,this.highlightName)}_setUpGeometryHelper(){const e=this.graphic.geometry;if(null==e||"mesh"===e.type||"extent"===e.type)return void this._logGeometryTypeError();const t="multipoint"===e.type?new _({paths:[e.points],spatialReference:e.spatialReference}):e;this._editGeometryOperations=T.EditGeometryOperations.fromGeometry(t,2)}_saveSnappingContextForHandle(e,t){this._snappingGraphicsLayer=new m({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer);const i=this._editGeometryOperations;a.assertIsSome(i),this._snappingContext=new O.SnappingContext({editGeometryOperations:i,elevationInfo:{mode:"on-the-ground",offset:0},pointer:t.viewEvent?.pointerType||"mouse",excludeFeature:this.graphic,feature:this.graphic,visualizer:new u.SnappingVisualizer2D(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(e)})}_reset(){this._clearSelection(),this._highlightHelper?.removeAll(),this._updateTooltip(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.removeHandles(A)}_resetSnappingStateVars(){null!=this.snappingManager&&this.snappingManager.doneSnapping(),null!=this._snappingGraphicsLayer&&(this.view?.map&&this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),this._editGeometryOperations=a.destroyMaybe(this._editGeometryOperations),this._snappingTask=a.abortMaybe(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null}_resetGraphics(e){this._removeMidpointGraphics(e),this._removeVertexGraphics(e),this.selectedVertices.removeAll(),this._updateTooltip()}_removeMidpointGraphics(e){const t=e||this.layer;t&&t.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach(e=>e.destroy()),this.midpointGraphics.removeAll()}_removeVertexGraphics(e){const t=e||this.layer;t&&t.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach(e=>e.destroy()),this.vertexGraphics.removeAll()}_setupGraphics(){const e=this.graphic.geometry;if(null!=e&&("polyline"===e.type||"polygon"===e.type)){const t=L(e);this.enableMidpoints&&this._setUpMidpointGraphics(t),this.enableVertices&&this._setUpVertexGraphics(t)}}_setUpMidpointGraphics(e){this._removeMidpointGraphics();const t=this._createMidpointGraphics(e);this.midpointGraphics.addMany(t),this.layer.addMany(t)}_setUpVertexGraphics(e){this._removeVertexGraphics();const t=this._createVertexGraphics(e);this.vertexGraphics.addMany(t),this._storeRelatedVertexIndices(),this.layer.addMany(t)}_createVertexGraphics(e){const{_graphicAttributes:i,symbols:o}=this,s=[];return e?.forEach((e,r)=>{e.forEach((e,n)=>{s.push(new t({geometry:this._coordinateHelper.arrayToPoint(e),symbol:o?.vertices?.default,attributes:{...i,pathIndex:r,pointIndex:n}}))})}),s}_createMidpointGraphics(e){const{_graphicAttributes:i,symbols:o}=this,s=[];for(let r=0;r<e.length;r++){const n=e[r];for(let e=0;e<n.length;e++){const a=(e+1)%n.length;if("polyline"===this.graphic.geometry?.type&&0===a)continue;const p=n[e],h=n[a],c=this._getMidpoint(p,h);s.push(new t({geometry:c,symbol:o.midpoints.default,attributes:{...i,pathIndex:r,pointIndexStart:e,pointIndexEnd:a}}))}}return s}_updateSymbolsForTheme(){const e=this.view.effectiveTheme.accentColor;this.symbols={vertices:{...this.symbols.vertices,default:this.symbols.vertices.default.clone().set("color",e),hover:this.symbols.vertices.hover?.clone().set("color",e)},midpoints:{...this.symbols.midpoints}};for(const e of this.vertexGraphics)this._isSelected(e)?e.symbol=this.symbols.vertices.selected:this._hoverGraphic===e?e.symbol=this.symbols.vertices.hover:e.symbol=this.symbols.vertices.default}_storeRelatedVertexIndices(){const e=this.vertexGraphics.items;if(!e)return;const t=e.map(({geometry:e})=>({x:e.x,y:e.y}));for(let i=0;i<t.length;i++){const o=[];for(let e=0;e<t.length;e++){if(i===e)continue;const s=t[i],r=t[e];s.x===r.x&&s.y===r.y&&o.push(e)}e[i].attributes.relatedGraphicIndices=o}}_setupMover(){const{enableMovement:e,graphic:t,midpointGraphics:i,vertexGraphics:o,view:s}=this,r=o.concat(i).items;e&&r.push(t),this._mover=new f({enableMoveAllGraphics:!1,highlightsEnabled:!1,indicatorsEnabled:!1,graphics:r,view:s,callbacks:{onGraphicClick:e=>this._onGraphicClickCallback(e),onGraphicMoveStart:e=>this._onGraphicMoveStartCallback(e),onGraphicMove:e=>this._onGraphicMoveCallback(e),onGraphicMoveStop:e=>this._onGraphicMoveStopCallback(e),onGraphicPointerOver:e=>this._onGraphicPointerOverCallback(e),onGraphicPointerOut:e=>this._onGraphicPointerOutCallback(e)}})}_setupConnectedReshapeManager(){const{connectedReshapeProviders:e}=this;0!==e.length&&(this._connectedReshapeManager=new x.ConnectedReshapeManager({providerFactories:e,view:this.view}))}_onGraphicClickCallback(e){e.viewEvent.stopPropagation();const t=e.graphic;if(t===this.graphic)this.clearSelection(),this.emit("graphic-click",e),this.callbacks.onGraphicClick?.(e);else if(this._isMidpoint(t)){if(2===e.viewEvent.button)return;const i=this.graphic.clone(),o=this._createVertexFromMidpoint(t);this.refresh(),this._emitVertexAddEvent([t],i,o)}else this._isVertex(t)&&(e.viewEvent.stopPropagation(),2===e.viewEvent.button?this._removeVertices(t):(e.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(t)?this._removeFromSelection(t,!0):this._addToSelection(t)))}_setUpOperation(e){const{graphic:t,dx:i,dy:o}=e,s=t===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(t,e),this._activeOperationInfo={target:this.graphic,mover:t,operationType:s?"move":"reshape",totalDx:i,totalDy:o}}_onGraphicMoveStartCallback(e){const{dx:t,dy:i,graphic:o}=e,s=this._connectedReshapeManager,r=s?function(e){const t=e.sourceLayer??e.layer;return b.isConnectedReshapeSupportedLayer(t)?{graphic:e,layer:t}:null}(this.graphic):null;if(o===this.graphic){const{geometry:n}=o;return this._setUpOperation(e),this._emitMoveStartEvent(t,i),r&&s?.startFeatureMove([r]),void(null!=n&&"point"===n.type&&this._onHandleMove(o,t,i,e,()=>{this._updateTooltip(this.graphic,e.viewEvent),this._emitMoveEvent(t,i)}))}const{selectedVertices:n}=this;if(!n.includes(o)){if(this._clearSelection(),this._isMidpoint(o)){const e=this.graphic.clone(),t=this._createVertexFromMidpoint(o);this._emitVertexAddEvent([o],e,t)}this._addToSelection(o)}this._setUpOperation(e),r&&s?.startVertexMove(r,n.toArray().map(e=>({pathIndex:e.attributes.pathIndex,vertexIndex:e.attributes.pointIndex}))),this._emitReshapeStartEvent(o),this._onHandleMove(o,t,i,e,()=>{this._updateTooltip(o,e.viewEvent),this._emitReshapeEvent(o)})}_onGraphicMoveCallback(e){const t=this._activeOperationInfo;if(!t)return;const{dx:i,dy:o,graphic:s}=e;t.totalDx+=i,t.totalDy+=o;const{operationType:r}=t,{geometry:n}=s;if(null!=n)if("move"!==r)this._onHandleMove(s,i,o,e,()=>{this._updateTooltip(s,e.viewEvent),this._emitReshapeEvent(s)});else if("point"===n.type)this._onHandleMove(s,i,o,e,()=>{this._updateTooltip(this.graphic,e.viewEvent),this._emitMoveEvent(i,o)});else if("polyline"===n.type||"polygon"===n.type){const t=L(n);this._updateVertexGraphicLocations(t);const{dxMap:s,dyMap:r}=function(e,t,i){const o=i.state.inverseTransform;return{dxMap:o[0]*e+o[2]*t,dyMap:o[1]*e+o[3]*t}}(i,o,this.view);this._connectedReshapeManager?.translate(s,r,0),this._updateTooltip(this.graphic,e.viewEvent),this._emitMoveEvent(i,o)}}_onGraphicMoveStopCallback(e){const t=this._activeOperationInfo;if(!t)return;const{dx:i,dy:o,graphic:s}=e,{operationType:r}=t;t.totalDx+=i,t.totalDy+=o,this._onHandleMove(s,i,o,e,()=>"move"===r?this._emitMoveStopEvent():this._emitReshapeStopEvent(s)),this._isMidpoint(s)?this.refresh():(this._updateTooltip(this._isVertex(s)?s:null),this._resetSnappingStateVars(),this._connectedReshapeManager?.finish(),this._activeOperationInfo=null)}_updateVertexGraphicLocations(e){const{_coordinateHelper:t}=this;for(const i of this.vertexGraphics){const{pathIndex:o,pointIndex:s}=i.attributes;i.geometry=t.arrayToPoint(e[o][s])}this._updateMidpointGraphicLocations(e)}_updateMidpointGraphicLocations(e){for(const t of this.midpointGraphics){const{pathIndex:i,pointIndexStart:o,pointIndexEnd:s}=t.attributes,r=e[i];t.geometry=this._getMidpoint(r[o],r[s])}}_getMidpoint(e,t){const{_coordinateHelper:i}=this,o=i.arrayToVector(e),s=i.arrayToVector(t),r=i.toXYZ(o),n=i.toXYZ(s),[a,p,h]=v.getMidpoint(r,n),c=i.hasM()?0:void 0;return new y({x:a,y:p,z:h,m:c,spatialReference:i.spatialReference})}_getVertexFromEditGeometry(e){const[t,i]=P(e);return a.assertIsSome(this._editGeometryOperations),this._editGeometryOperations.data.parts[t].vertices[i]}_onHandleMove(e,t,o,s,r){a.abortMaybe(this._snappingTask);const n=this._snappingContext;if(!n)return;const p=e.geometry,h="graphic-move-stop"===s.type;if(null!=this.snappingManager&&this.selectedVertices.length<2&&!h){const s=this.snappingManager;this._stagedVertex=s.update({point:p,context:n}),this._syncGeometryAfterVertexMove(e,new y(this._stagedVertex),t,o,h),r(),this._snappingTask=i.createTask(async i=>{const a=await s.snap({point:p,context:n,signal:i});a.valid&&(this._stagedVertex=a.apply(),this._syncGeometryAfterVertexMove(e,new y(this._stagedVertex),t,o,h),r())})}else{const i=null!=this._stagedVertex?new y(this._stagedVertex):p;this._syncGeometryAfterVertexMove(e,i,t,o,h),r()}}_syncGeometryAfterVertexMove(e,t,i,o,s=!1){const r=this._editGeometryOperations?.data.geometry;if(r)if("point"===r.type)e.geometry=t;else if("mesh"===r.type)e.geometry=r.centerAt(t);else{const{_coordinateHelper:n}=this,[a,p]=P(e);let h=v.geometryToCoordinates(r);const c=h[a].length-1,l=n.pointToArray(t);h[a][p]=l,"polygon"===r.type&&(0===p?h[a][c]=l:p===c&&(h[a][0]=l)),this._isVertex(e)&&(h=this._moveRelatedCoordinates(h,e,l),h=this._moveSelectedHandleCoordinates(h,e,i,o,"polygon"===r.type),this._updateMidpointGraphicLocations(h)),this._updateGraphicGeometry(r.clone());const d=n.pointToVector(t),y=this._getVertexFromEditGeometry(e),_=n.getZ(d),m=d[0]-y.pos[0],g=d[1]-y.pos[1],u=null!=_?_-y.pos[2]:0;this._editGeometryOperations?.moveVertices([y],m,g,u),this._connectedReshapeManager?.translate(m,g,u),s&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(e),t):e.geometry=t)}}_moveRelatedCoordinates(e,t,i){const{relatedGraphicIndices:o}=t.attributes;for(const s of o){const o=this.vertexGraphics.at(s),{pathIndex:r,pointIndex:n}=o.attributes;e[r][n]=i,o.geometry=t.geometry}return e}_moveSelectedHandleCoordinates(e,t,i,o,s){for(const r of this.selectedVertices)if(r!==t){const{pathIndex:t,pointIndex:n,relatedGraphicIndices:a}=r.attributes,p=G.cloneMove(r.geometry,i,o,this.view),h=v.geometryToCoordinates(p),c=e[t].length-1;e[t][n]=h,r.geometry=p,s&&(0===n?e[t][c]=h:n===c&&(e[t][0]=h));for(const t of a){const i=this.vertexGraphics.at(t),{pathIndex:o,pointIndex:s}=i.attributes;e[o][s]=h,i.geometry=p}}return e}_onGraphicPointerOverCallback(e){const t=e.graphic;this._hoverGraphic=t;const i=this._isVertex(t);i&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.hover),this._updateTooltip(i?t:null),this._updateHoverCursor(t)}_onGraphicPointerOutCallback(e){const t=e.graphic;this._hoverGraphic=null,this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.default),this.removeHandles(A),this._updateTooltip()}_createVertexFromMidpoint(e){const{_graphicAttributes:t,graphic:i}=this,o=i.geometry;if(null==o||"polygon"!==o.type&&"polyline"!==o.type)return[];const s=o.clone(),r=[],{pathIndex:n,pointIndexStart:a,pointIndexEnd:p}=e.attributes,h=v.geometryToCoordinates(e.geometry),c=0===p?a+1:p,l=v.geometryToCoordinates(s);return l[n].splice(c,0,h),e.attributes={...t,pathIndex:n,pointIndex:c,relatedGraphicIndices:[]},r.push({coordinates:l[n][c],componentIndex:n,vertexIndex:c}),this._updateGraphicGeometry(s),r}_addToSelection(e){const t=z(e);for(const e of t)e.symbol=this.symbols.vertices.selected,this.selectedVertices.add(e),this._updateTooltip(e);this._emitSelectEvent(t)}_removeFromSelection(e,t){const{vertices:i}=this.symbols,o=t?i.hover:i.default;this.selectedVertices.remove(e),e.symbol=o,this._emitDeselectEvent([e]),this._updateTooltip()}_clearSelection(){const e=this.selectedVertices.toArray();if(e.length>0){for(const t of e)t.set("symbol",this.symbols.vertices.default);this.selectedVertices.removeAll(),this._emitDeselectEvent(e),this._updateTooltip()}}_keyDownHandler(e){null==this._activeOperationInfo&&k.enterInputModeIfAvailable(e,this.tooltip)||I.sketchKeys.delete.includes(e.key)&&!e.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(e){const t=this.graphic.geometry;if(null==t||"polygon"!==t.type&&"polyline"!==t.type)return;if("polygon"===t.type&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;const i=this.graphic.clone(),o=t.clone();let s=v.geometryToCoordinates(o);const r=[],n=z(e);for(const e of n){const{x:t,y:i}=e.geometry;for(let e=0;e<s.length;e++){const o=s[e];for(let n=0;n<o.length;n++){const[a,p]=o[n];t===a&&i===p&&(r.push({coordinates:s[e][n],componentIndex:e,vertexIndex:n}),s[e].splice(Number(n),1))}}}if("polygon"===o.type)s=s.filter(e=>{if(e.length<2)return!1;const[t,i]=e[0],[o,s]=e[e.length-1];return(2!==e.length||t!==o||i!==s)&&(t===o&&i===s||e.push(e[0]),!0)}),o.rings=s;else{for(const e of s)1===e.length&&s.splice(s.indexOf(e),1);o.paths=s}this._updateGraphicGeometry(o),this.refresh(),this._emitVertexRemoveEvent(n,i,r)}_isVertex(e){return this.vertexGraphics.includes(e)}_isSelected(e){return this._isVertex(e)&&this.selectedVertices.includes(e)}_isMidpoint(e){return this.midpointGraphics.includes(e)}_updateHoverCursor(e){const t=this._isMidpoint(e)?"copy":"move";this.addHandles(this.view.acquireCursor(t,"high"),A)}_updateTooltip(e,t){let i=null;const{graphic:o,view:s,tooltipInfos:r}=this,n=o?.geometry;"point"===n?.type?i=r.movePoint:this._selectedVertex?i=r.selectedVertex:e===this.graphic?(i=r.translateGraphic,V.updateTranslateTooltipInfo(i,s,this._tooltipsContext,t)):e&&this.selectedVertices.length>1&&(i=r.translateVertices,V.updateTranslateVertexTooltipInfo(i,s,n,this._tooltipsContext,t)),this.activeTooltipInfo=i}_updateGraphicGeometry(e){this._updateHandlesOnExternalGeometryChange?.pause(),this.graphic.geometry=e,this._updateHandlesOnExternalGeometryChange?.resume()}_emitMoveStartEvent(e,t){const i={type:"move-start",mover:this.graphic,dx:e,dy:t};this.emit("move-start",i),this.callbacks.onMoveStart?.(i)}_emitMoveEvent(e,t){const i={type:"move",mover:this.graphic,dx:e,dy:t};this.emit("move",i),this.callbacks.onMove?.(i)}_emitMoveStopEvent(e,t){if(null==e||null==t){const i=this._activeOperationInfo;if(!i)return;e=i.totalDx,t=i.totalDy}const i={type:"move-stop",mover:this.graphic,dx:e,dy:t};this.emit("move-stop",i),this.callbacks.onMoveStop?.(i)}_emitReshapeStartEvent(e){const t={type:"reshape-start",graphic:this.graphic,mover:e,selected:this.selectedVertices.toArray()};this.emit("reshape-start",t),this.callbacks.onReshapeStart?.(t)}_emitReshapeEvent(e){const t={type:"reshape",graphic:this.graphic,mover:e,selected:this.selectedVertices.toArray()};this.emit("reshape",t),this.callbacks.onReshape?.(t)}_emitReshapeStopEvent(e){const t={type:"reshape-stop",graphic:this.graphic,mover:e,selected:this.selectedVertices.toArray()};this.emit("reshape-stop",t),this.callbacks.onReshapeStop?.(t)}_emitSelectEvent(e){const t={type:"vertex-select",added:e};this.emit("select",t),this.callbacks.onVertexSelect?.(t)}_emitDeselectEvent(e){const t={type:"vertex-deselect",removed:e};this.emit("deselect",t),this.callbacks.onVertexDeselect?.(t)}_emitVertexAddEvent(e,t,i){const o={type:"vertex-add",added:e,graphic:this.graphic,oldGraphic:t,vertices:i};this.emit("vertex-add",o),this.callbacks.onVertexAdd?.(o)}_emitVertexRemoveEvent(e,t,i){const o={type:"vertex-remove",removed:e,graphic:this.graphic,oldGraphic:t,vertices:i};this.emit("vertex-remove",o),this.callbacks.onVertexRemove?.(o)}_logGeometryTypeError(){n.getLogger(this).error(new s("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."))}};function L(e){const t=v.geometryToCoordinates(e.clone());if("polygon"===e.type)for(const e of t){const t=e[e.length-1];e[0][0]===t[0]&&e[0][1]===t[1]&&e.length>2&&e.pop()}return t}function P({attributes:e}){return[e?.pathIndex||0,e?.pointIndex||0]}function z(e){return e instanceof t?[e]:[...e]}return e.__decorate([h.property()],U.prototype,"_activeOperationInfo",void 0),e.__decorate([h.property()],U.prototype,"_connectedReshapeManager",void 0),e.__decorate([h.property()],U.prototype,"_coordinateHelper",null),e.__decorate([h.property()],U.prototype,"_editGeometryOperations",void 0),e.__decorate([h.property()],U.prototype,"tooltip",void 0),e.__decorate([h.property()],U.prototype,"tooltipInfos",void 0),e.__decorate([h.property()],U.prototype,"activeTooltipInfo",void 0),e.__decorate([h.property({constructOnly:!0})],U.prototype,"automaticAreaMeasurementUtils",void 0),e.__decorate([h.property({constructOnly:!0})],U.prototype,"automaticLengthMeasurementUtils",void 0),e.__decorate([h.property()],U.prototype,"_selectedVertex",null),e.__decorate([h.property()],U.prototype,"_tooltipsContext",null),e.__decorate([h.property()],U.prototype,"callbacks",void 0),e.__decorate([h.property()],U.prototype,"connectedReshapeProviders",void 0),e.__decorate([h.property()],U.prototype,"enableMidpoints",void 0),e.__decorate([h.property()],U.prototype,"enableMovement",void 0),e.__decorate([h.property()],U.prototype,"enableVertices",void 0),e.__decorate([h.property()],U.prototype,"graphic",void 0),e.__decorate([h.property()],U.prototype,"highlightName",void 0),e.__decorate([h.property()],U.prototype,"highlightsEnabled",void 0),e.__decorate([h.property()],U.prototype,"layer",void 0),e.__decorate([h.property({readOnly:!0})],U.prototype,"midpointGraphics",void 0),e.__decorate([h.property()],U.prototype,"midpointSymbol",void 0),e.__decorate([h.property({readOnly:!0})],U.prototype,"selectedVertices",void 0),e.__decorate([h.property()],U.prototype,"snappingManager",void 0),e.__decorate([h.property({readOnly:!0})],U.prototype,"state",null),e.__decorate([h.property()],U.prototype,"symbols",void 0),e.__decorate([h.property({type:C})],U.prototype,"sketchOptions",void 0),e.__decorate([h.property({readOnly:!0})],U.prototype,"type",void 0),e.__decorate([h.property({readOnly:!0})],U.prototype,"vertexGraphics",void 0),e.__decorate([h.property()],U.prototype,"view",void 0),U=e.__decorate([d.subclass("esri.views.draw.support.Reshape")],U),U});