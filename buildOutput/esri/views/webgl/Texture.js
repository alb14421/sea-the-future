// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["exports","../../core/Error","../../core/has","../../core/Logger","../../core/maybe","../../core/object","../../core/promiseUtils","./checkWebGLError","./enums","./TextureDescriptor","./textureUtils","./ValidatedTextureDescriptor"],function(e,t,i,r,s,a,o,n,p,l,h,m){"use strict";const d=!!i("esri-tests-disable-gpu-memory-measurements"),c=()=>r.getLogger("esri/views/webgl/Texture");let u=class e{static{this.TEXTURE_UNIT_FOR_UPDATES=0}static{this.compressionWorkerHandle=null}constructor(e,i=null,r=null){if(this.type=1,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._shadowFilterDirty=!1,this._wasImmutablyAllocated=!1,"context"in e)this._descriptor=e,r=i;else{const r=m.ValidatedTextureDescriptor.validate(e,i);if(!r)throw new t("texture:invalid-descriptor","Texture descriptor invalid");this._descriptor=r}34067===this._descriptor.target?this._setDataCubeMap(r):this.setData(r)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return d?0:l.estimateMemory(this._descriptor)}get cachedMemory(){return this.usedMemory}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty||this._shadowFilterDirty}get hasWebGLTextureObject(){return!!this._glName}dispose(){this.abortCompression(),this.hasWebGLTextureObject&&this._descriptor.context?.gl&&(this._descriptor.context.instanceCounter.decrement(p.ResourceType.Texture,this),this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null,this._descriptor=null)}release(){this.dispose()}[Symbol.dispose](){this.dispose()}resize(e,i){const r=this._descriptor;if(r.width!==e||r.height!==i){if(this._wasImmutablyAllocated)throw new t("texture:immutable-resize","Immutable textures can't be resized!");r.width=e,r.height=i,34067===this._descriptor.target?this._setDataCubeMap(null):this.setData(null)}}enableCompression(e){this._descriptor.compress=e}disableCompression(){this._descriptor.compress=void 0}setData(e){this.abortCompression(),!h.isCompressedData(e)&&this._descriptor.internalFormat&&a.hasValue(p.CompressedTextureFormat,this._descriptor.internalFormat)&&(this._descriptor.internalFormat=void 0),this._setData(e),!h.isCompressedData(e)&&this._descriptor.compress&&this._compressOnWorker(e)}updateData(i,r,s,a,o,n,p=0){n||c().error("An attempt to use uninitialized data!"),this.hasWebGLTextureObject||c().error("An attempt to update uninitialized texture!");const l=this._descriptor;l.internalFormat=h.deriveInternalFormat(l);const{context:m,pixelFormat:d,dataType:u,target:_,isImmutable:g}=l;if(g&&!this._wasImmutablyAllocated)throw new t("texture:uninitialized","Cannot update immutable texture before allocation!");const x=m.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES,!0);(r<0||s<0||r+a>l.width||s+o>l.height)&&c().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:T}=m;p&&(a&&o||c().warn("Must pass width and height if `UNPACK_SKIP_ROWS` is used"),T.pixelStorei(T.UNPACK_SKIP_ROWS,p)),h.isTexImageSource(n)?T.texSubImage2D(_,i,r,s,a,o,d,u,n):h.isCompressedData(n)?T.compressedTexSubImage2D(_,i,r,s,a,o,l.internalFormat,n.levels[i]):T.texSubImage2D(_,i,r,s,a,o,d,u,n),p&&T.pixelStorei(T.UNPACK_SKIP_ROWS,0),m.bindTexture(x,e.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(i,r,s,a,o,n,p,l){l||c().error("An attempt to use uninitialized data!"),this.hasWebGLTextureObject||c().error("An attempt to update an uninitialized texture!");const m=this._descriptor;m.internalFormat=h.deriveInternalFormat(m);const{context:d,pixelFormat:u,dataType:_,isImmutable:g,target:x}=m;if(g&&!this._wasImmutablyAllocated)throw new t("texture:uninitialized","Cannot update immutable texture before allocation!");h.is3DTarget(x)||c().warn("Attempting to set 3D texture data on a non-3D texture");const T=d.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);d.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),(r<0||s<0||a<0||r+o>m.width||s+n>m.height||a+p>m.depth)&&c().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:b}=d;if(h.isCompressedData(l))l=l.levels[i],b.compressedTexSubImage3D(x,i,r,s,a,o,n,p,m.internalFormat,l);else{const e=l;b.texSubImage3D(x,i,r,s,a,o,n,p,u,_,e)}d.bindTexture(T,e.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const i=this._descriptor;if(0===i.width||0===i.height)return;if(!i.hasMipmap){if(this._wasImmutablyAllocated)throw new t("texture:immutable-change","Cannot add mipmaps to immutable texture after allocation");i.hasMipmap=!0,this._samplingModeDirty=!0,h.validateTexture(i)}9729===i.samplingMode?(this._samplingModeDirty=!0,i.samplingMode=9985):9728===i.samplingMode&&(this._samplingModeDirty=!0,i.samplingMode=9984);const r=this._descriptor.context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(i.target),this._descriptor.context.bindTexture(r,e.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const e=this._descriptor;if(e.hasMipmap){if(this._wasImmutablyAllocated)throw new t("texture:immutable-change","Cannot delete mipmaps to immutable texture after allocation");e.hasMipmap=!1,this._samplingModeDirty=!0,h.validateTexture(e)}9985===e.samplingMode?(this._samplingModeDirty=!0,e.samplingMode=9729):9984===e.samplingMode&&(this._samplingModeDirty=!0,e.samplingMode=9728)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,h.validateTexture(this._descriptor),this._wrapModeDirty=!0)}setShadowFiltering(e){e!==this._descriptor.linearFilterDepth&&(this._descriptor.linearFilterDepth=this._descriptor.compareEnabled=e,this.setSamplingMode(e?9729:9728),h.validateTexture(this._descriptor),this._shadowFilterDirty=!0)}applyChanges(){this._samplingModeDirty&&(this._applySamplingMode(),this._samplingModeDirty=!1),this._wrapModeDirty&&(this._applyWrapMode(),this._wrapModeDirty=!1),this._shadowFilterDirty&&(this._applyShadowMode(),this._shadowFilterDirty=!1)}abortCompression(){this._compressionAbortController=s.abortMaybe(this._compressionAbortController)}_setData(i,r){const s=this._descriptor,a=s.context?.gl;if(!a)return;n.checkWebGLError(a),this.hasWebGLTextureObject||(this._glName=a.createTexture(),s.context.instanceCounter.increment(p.ResourceType.Texture,this)),h.validateTexture(s);const o=s.context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);s.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),this._configurePixelStorage(),n.checkWebGLError(a);const l=r??s.target,m=h.is3DTarget(l);if(h.isTexImageSource(i))this._setDataFromTexImageSource(i,l);else{const{width:e,height:r,depth:o}=s;if(null==e||null==r)throw new t("texture:missing-size","Width and height must be specified!");if(m&&null==o)throw new t("texture:missing-depth","Depth must be specified!");if(s.internalFormat=h.deriveInternalFormat(s),s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(l,s.internalFormat,s.hasMipmap,e,r,o),h.isCompressedData(i)){if(!h.isCompressedFormat(s.internalFormat))throw new t("texture:format-mismatch","Attempting to use compressed data with an uncompressed format!");this._setDataFromCompressedSource(i,s.internalFormat,l)}else this._texImage(l,0,s.internalFormat,e,r,o,i),n.checkWebGLError(a),s.hasMipmap&&this.generateMipmap()}this._applySamplingMode(),this._applyWrapMode(),this._applyAnisotropicFilteringParameters(),this._applyShadowMode(),n.checkWebGLError(a),s.context.bindTexture(o,e.TEXTURE_UNIT_FOR_UPDATES)}_setDataCubeMap(e=null){for(let t=34069;t<=34074;t++)this._setData(e,t)}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:t,flipped:i,preMultiplyAlpha:r}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)}_setDataFromTexImageSource(e,t){const{gl:i}=this._descriptor.context,r=this._descriptor;r.internalFormat=h.deriveInternalFormat(r);const s=h.is3DTarget(t),{width:a,height:o,depth:p}=h.getDimensions(e);r.width&&r.height,r.width||(r.width=a),r.height||(r.height=o),s&&r.depth,s&&(r.depth=p),r.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(t,r.internalFormat,r.hasMipmap,a,o,p),this._texImage(t,0,r.internalFormat,a,o,p,e),n.checkWebGLError(i),r.hasMipmap&&(this.generateMipmap(),n.checkWebGLError(i))}_setDataFromCompressedSource(e,t,i){const r=this._descriptor,{width:s,height:a,depth:o}=r,n=e.levels,p=h.calcMipmapLevels(i,s,a,o),l=Math.min(p,n.length)-1;this._descriptor.context.gl.texParameteri(r.target,33085,l),this._forEachMipmapLevel((e,r,s,a)=>{const o=n[Math.min(e,n.length-1)];this._compressedTexImage(i,e,t,r,s,a,o)},l)}_texStorage(e,i,r,s,a,o){const{gl:n}=this._descriptor.context;if(!h.isSizedPixelFormat(i)&&!h.isSizedDepthFormat(i)&&!h.isSizedDepthStencilFormat(i))throw new t("texture:missing-format","Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const p=r?h.calcMipmapLevels(e,s,a,o):1;if(h.is3DTarget(e)){if(null==o)throw new t("texture:missing-depth","Missing depth dimension for 3D texture upload");n.texStorage3D(e,p,i,s,a,o)}else n.texStorage2D(e,p,i,s,a);this._wasImmutablyAllocated=!0}_texImage(e,i,r,s,a,o,n){const p=this._descriptor.context.gl,l=h.is3DTarget(e),{isImmutable:m,pixelFormat:d,dataType:c}=this._descriptor;if(m){if(null!=n){const r=n;if(l){if(null==o)throw new t("texture:missing-depth","Missing depth dimension for 3D texture upload");p.texSubImage3D(e,i,0,0,0,s,a,o,d,c,r)}else p.texSubImage2D(e,i,0,0,s,a,d,c,r)}}else{const h=n;if(l){if(null==o)throw new t("texture:missing-depth","Missing depth dimension for 3D texture upload");p.texImage3D(e,i,r,s,a,o,0,d,c,h)}else p.texImage2D(e,i,r,s,a,0,d,c,h)}}_compressedTexImage(e,i,r,s,a,o,n){const p=this._descriptor.context.gl,l=h.is3DTarget(e);if(this._descriptor.isImmutable){if(null!=n)if(l){if(null==o)throw new t("texture:missing-depth","Missing depth dimension for 3D texture upload");p.compressedTexSubImage3D(e,i,0,0,0,s,a,o,r,n)}else p.compressedTexSubImage2D(e,i,0,0,s,a,r,n)}else if(l){if(null==o)throw new t("texture:missing-depth","Missing depth dimension for 3D texture upload");p.compressedTexImage3D(e,i,r,s,a,o,0,n)}else p.compressedTexImage2D(e,i,r,s,a,0,n)}async _compressOnWorker(t){const{width:i,height:r,context:s,flipped:a,preMultiplyAlpha:n,hasMipmap:p}=this._descriptor,l=this._descriptor.compress?.compressionTracker,h=this._descriptor.compress?.compressionCallback,{compressedTextureETC:m,compressedTextureS3TC:d}=s.capabilities;if(!e.compressionWorkerHandle?.isCompressible(t,this._descriptor)||!m&&!d)return;this.abortCompression();const u=new AbortController;this._compressionAbortController=u,l?.increment();try{let s;t instanceof Uint8Array?s=t.buffer:(s=await createImageBitmap(t,{imageOrientation:a?"flipY":"none"}),o.throwIfAborted(u));const l={data:s,width:i,height:r,needsFlip:t instanceof Uint8Array&&this.descriptor.flipped,components:6408===this._descriptor.pixelFormat?4:3,preMultiplyAlpha:n,hasMipmap:p,hasETC:!!m,hasS3TC:!!d},c=await e.compressionWorkerHandle.invoke(l,u.signal,"low");if(o.throwIfAborted(u),c.compressedTexture&&this.hasWebGLTextureObject){const e=this.usedMemory;this._descriptor.internalFormat=c.internalFormat,this._setData(c.compressedTexture),h?.(e-this.usedMemory)}}catch(e){o.isAbortError(e)||c().error("Texture compression failed!")}finally{l?.decrement(),this._compressionAbortController?.signal.aborted&&(this._compressionAbortController=null)}}_forEachMipmapLevel(e,i=1/0){let{width:r,height:s,depth:a,hasMipmap:o,target:n}=this._descriptor;const p=32879===n;if(null==r||null==s||p&&null==a)throw new t("texture:missing-size","Missing texture dimensions for mipmap calculation");for(let t=0;e(t,r,s,a),o&&(1!==r||1!==s||p&&1!==a)&&!(t>=i);++t)r=Math.max(1,r>>1),s=Math.max(1,s>>1),p&&(a=Math.max(1,a>>1))}_applySamplingMode(){const e=this._descriptor,t=e.context?.gl;let i=e.samplingMode,r=e.samplingMode;9985===i||9987===i?(i=9729,e.hasMipmap||(r=9729)):9984!==i&&9986!==i||(i=9728,e.hasMipmap||(r=9728)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,i),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,r)}_applyWrapMode(){const e=this._descriptor,t=e.context?.gl;"number"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}_applyShadowMode(){const e=this._descriptor,t=e.context?.gl,i=e.compareEnabled?t.COMPARE_REF_TO_TEXTURE:t.NONE;t.texParameteri(e.target,t.TEXTURE_COMPARE_MODE,i),e.compareEnabled&&t.texParameteri(e.target,t.TEXTURE_COMPARE_FUNC,t.GREATER),n.checkWebGLError(t)}_applyAnisotropicFilteringParameters(){const e=this._descriptor,t=e.context.capabilities.textureFilterAnisotropic;t&&e.context.gl.texParameterf(e.target,t.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};e.Texture=u,e.tracer=null,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});