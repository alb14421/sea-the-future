// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.34/esri/copyright.txt for details.
//>>built
define(["require","exports","../../chunks/tslib.es6","../../core/arrayUtils","../../core/Logger","../../core/maybe","../../core/maybeUpdating","../../core/promiseUtils","../../core/reactiveUtils","../../core/accessorSupport/decorators/property","../../core/has","../../core/accessorSupport/decorators/subclass","../../geometry/projectionUtils","./LayerView"],function(e,t,r,o,n,i,l,a,s,p,u,c,d,y){"use strict";return t.default=class extends y{constructor(){super(...arguments),this.layer=null,this.filter=null,this._geometryEngine=null,this._projectionEngineLoaded=!1,this._abortController=new AbortController}get availableFields(){return[]}get maximumNumberOfFeatures(){return 0}set maximumNumberOfFeatures(e){throw new Error("Not implemented")}get maximumNumberOfFeaturesExceeded(){return!1}get layerFilter(){return l.unwrapUpdating(this._layerFilter)}get _layerFilter(){const e=this.layer?.filter;if(null==e||e.geometries.length<1)return null;const t=this._geometryEngine;if(null==t||!this._projectionEngineLoaded&&this._filterNeedsProjectionEngine)return l.updating;const r=e.geometries.at(0).spatialReference,i=e.geometries.toArray().map(e=>{try{e=t.simplify(e)}catch(e){return n.getLogger(this).warnOncePerTick("Failed to simplify scene filter mask polygon. Polygon will be ignored."),null}if(null==e)return null;if(e.spatialReference.equals(r))return e;try{return d.project(e,r)}catch(e){return n.getLogger(this).warnOncePerTick("Failed to project scene filter mask polygon. Polygon will be ignored."),null}}).filter(o.isSome).sort((e,t)=>e.extent.xmin-t.extent.xmin),a=new Set,s=new Array,p=new Array;for(let e of i){const r=e.extent.xmin;if(s.length=0,a.forEach(o=>{if(r>=o.extent.xmax)return p.push(o),void a.delete(o);e.extent.ymin<=o.extent.ymax&&e.extent.ymax>=o.extent.ymin&&t.intersects(e,o)&&s.push(o)}),s.length>0){s.push(e);try{e=t.union(s)}catch(e){n.getLogger(this).warnOncePerTick("Failed to unify filter mask polygons. Polygon will be ignored.");continue}s.pop(),s.forEach(e=>a.delete(e))}a.add(e)}return a.forEach(e=>p.push(e)),p.length>0?{spatialRelationship:e.spatialRelationship,geometries:p}:null}get _filterNeedsProjectionEngine(){const e=this.layer.filter;if(null==e||e.geometries.length<=1)return!1;const t=e.geometries.at(0).spatialReference;return e.geometries.some(({spatialReference:e})=>!e.equals(t)&&!d.canProjectWithoutEngine(e,t))}get layerFilterUpdating(){return l.isUpdating(this._layerFilter)}initialize(){const{signal:t}=this._abortController;s.whenOnce(()=>this.destroyed||!this._geometryEngine&&this.layer?.filter?.geometries?.length,t).then(async()=>{a.throwIfAbortError(t),this._geometryEngine=await new Promise((t,r)=>e(["../../geometry/geometryEngine"],t,r))}).catch(a.throwIfNotAbortError),this._projectionEngineLoaded=d.isLoaded(),s.whenOnce(()=>this.destroyed||!this._projectionEngineLoaded&&this._filterNeedsProjectionEngine,t).then(async()=>{a.throwIfAbortError(t),await d.load(),this._projectionEngineLoaded=!0}).catch(a.throwIfNotAbortError)}destroy(){this._abortController=i.abortMaybe(this._abortController)}highlight(e,t){throw new Error("Not implemented")}queryFeatures(e,t){throw new Error("Not implemented")}queryObjectIds(e,t){throw new Error("Not implemented")}queryFeatureCount(e,t){throw new Error("Not implemented")}createQuery(){throw new Error("Not implemented")}queryExtent(e,t){throw new Error("Not implemented")}},r.__decorate([p.property()],t.default.prototype,"layer",void 0),r.__decorate([p.property()],t.default.prototype,"availableFields",null),r.__decorate([p.property()],t.default.prototype,"maximumNumberOfFeatures",null),r.__decorate([p.property({readOnly:!0})],t.default.prototype,"maximumNumberOfFeaturesExceeded",null),r.__decorate([p.property()],t.default.prototype,"filter",void 0),r.__decorate([p.property({readOnly:!0})],t.default.prototype,"layerFilter",null),r.__decorate([p.property({readOnly:!0})],t.default.prototype,"_layerFilter",null),r.__decorate([p.property()],t.default.prototype,"_geometryEngine",void 0),r.__decorate([p.property()],t.default.prototype,"_projectionEngineLoaded",void 0),r.__decorate([p.property()],t.default.prototype,"_filterNeedsProjectionEngine",null),r.__decorate([p.property()],t.default.prototype,"layerFilterUpdating",null),t.default=r.__decorate([c.subclass("esri.views.layers.SceneLayerView")],t.default),t.default});