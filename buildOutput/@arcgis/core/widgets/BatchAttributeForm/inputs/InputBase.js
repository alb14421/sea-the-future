/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import s from"../../../core/Accessor.js";import t from"../../../core/Collection.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/lang.js";import"../../../chunks/Logger.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{v as o,m as l}from"../../../chunks/inputUtils.js";import"../../../core/Handles.js";import"../../../chunks/maybe.js";import"../../../chunks/get.js";import"../../../chunks/utils.js";import"../../../chunks/handleUtils.js";import"../../../chunks/Lifecycle.js";import"../../../chunks/metadata.js";import"../../../chunks/ObjectPool.js";import"../../../chunks/ObservableBase.js";import"../../../chunks/tracking.js";import"../../../chunks/watch.js";import"../../../core/scheduling.js";import"../../../chunks/nextTick.js";import"../../../chunks/PooledArray.js";import"../../../core/promiseUtils.js";import"../../../core/Error.js";import"../../../chunks/object.js";import"../../../chunks/events.js";import"../../../chunks/SetUtils.js";import"../../../chunks/SimpleTrackingTarget.js";import"../../../core/Evented.js";import"../../../config.js";import"../../../chunks/string.js";import"../../../chunks/ensureType.js";import"../../../chunks/MapUtils.js";import"../../../chunks/Warning.js";import"../../../chunks/shared.js";import"../../../chunks/SimpleObservable.js";import"../../../chunks/jsonUtils.js";let n=class extends s{constructor(e){super(e),this.existsInAllLayers=!0,this.features=new t}get description(){return this.template.description}get featuresHaveSameCalculatedVisibility(){const e=new Set;for(const s of this.features){if(null==this.template.getExpressionExecutorsForLayer(s.layer)?.visibilityExpression){e.add(!0);continue}const t=this._lookupEvaluatedExpression(s,"visibility");if("success"===t?.status){if(e.add(!0===t.result),e.size>1)return!1}else e.add(!1)}return e.size<=1}get label(){return this.template.label}get layers(){return Array.from(new Set(this.features.map(e=>e.layer).filter(e=>null!=e&&("feature"===e.type||"geojson"===e.type||"scene"===e.type||"subtype-sublayer"===e.type||"oriented-imagery"===e.type))))}get visibilityCode(){return this._baseVisibilityCode}get visible(){return o(this.visibilityCode)}get _baseVisibilityCode(){return this.existsInAllLayers?this.featuresHaveSameCalculatedVisibility?!1===this._evaluatedVisibilityExpression?"hidden:visibility-expression:all-features":"visible":"hidden:visibility-expression:some-features":"hidden:not-in-all-layers"}get _evaluatedVisibilityExpression(){let e=!0,s=!0;for(const t of this.features){if(null==this.template.getExpressionExecutorsForLayer(t.layer)?.visibilityExpression){e=e&&!0;continue}s=!1;const i=this._lookupEvaluatedExpression(t,"visibility");e="success"===i?.status&&e&&!0===i.result}return s?null:e}_lookupEvaluatedExpression(e,s){return this.expressionsManager.evaluatedExpressions.get(e)?.get(l(this.template.elementId,s))}};e([i({constructOnly:!0})],n.prototype,"expressionsManager",void 0),e([i()],n.prototype,"description",null),e([i()],n.prototype,"existsInAllLayers",void 0),e([i()],n.prototype,"features",void 0),e([i()],n.prototype,"featuresHaveSameCalculatedVisibility",null),e([i()],n.prototype,"label",null),e([i()],n.prototype,"layers",null),e([i({constructOnly:!0})],n.prototype,"template",void 0),e([i()],n.prototype,"visibilityCode",null),e([i()],n.prototype,"visible",null),e([i()],n.prototype,"_baseVisibilityCode",null),e([i()],n.prototype,"_evaluatedVisibilityExpression",null),n=e([r("esri.widgets.BatchAttributeForm.inputs.InputBase")],n);const p=n;export{p as default};
