/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Viewpoint.js";import o from"../../core/Collection.js";import i from"../../core/Error.js";import{EventedAccessor as s}from"../../core/Evented.js";import{property as r}from"../../core/accessorSupport/decorators/property.js";import{cast as n}from"../../core/accessorSupport/decorators/cast.js";import"../../core/lang.js";import{subclass as a}from"../../core/accessorSupport/decorators/subclass.js";import{S as p}from"../../chunks/SlideThumbnail.js";import c from"../../webmap/Bookmark.js";import{GoTo as m}from"../support/GoTo.js";import"../../Camera.js";import"../../CameraLayout.js";import"../../core/Clonable.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/Logger.js";import"../../config.js";import"../../chunks/object.js";import"../../chunks/string.js";import"../../chunks/maybe.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/Lifecycle.js";import"../../chunks/metadata.js";import"../../chunks/ObjectPool.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/PooledArray.js";import"../../core/promiseUtils.js";import"../../chunks/events.js";import"../../chunks/SetUtils.js";import"../../chunks/SimpleTrackingTarget.js";import"../../chunks/ensureType.js";import"../../chunks/MapUtils.js";import"../../chunks/Warning.js";import"../../chunks/Cyclical.js";import"../../chunks/mathUtils.js";import"../../core/JSONSupport.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../geometry/Point.js";import"../../geometry/Geometry.js";import"../../geometry/SpatialReference.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../chunks/pe.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../chunks/jsonUtils.js";import"../../chunks/persistableUrlUtils.js";import"../../geometry/support/webMercatorUtils.js";import"../../geometry/support/jsonUtils.js";import"../../geometry/Extent.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../chunks/shared.js";import"../../chunks/SimpleObservable.js";import"../../core/Identifiable.js";import"../../chunks/timeProperties.js";import"../../time/TimeExtent.js";import"../../chunks/timeUtils.js";import"../../chunks/date.js";import"../../chunks/locale.js";import"../../chunks/constants.js";import"../../chunks/datetime.js";import"../../chunks/goToUtils.js";const u=o.ofType(c),l={width:128,height:128,format:"png"},k={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0,captureTimeExtent:!0},h={time:!0};let j=class extends(m(s)){constructor(t){super(t),this.capabilities={...h},this.activeBookmark=null,this.view=null}destroy(){this.view=null,this._set("activeBookmark",null)}castCapabilities(t){return{...h,...t}}get bookmarks(){return this.view?.map?.bookmarks??new u}set bookmarks(t){this._overrideIfSome("bookmarks",t)}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...k,...t})}get defaultCreateOptions(){return k}set defaultEditOptions(t){this._set("defaultEditOptions",{...k,...t})}get defaultEditOptions(){return k}get state(){const{view:t}=this;return t&&!t.ready?"loading":"ready"}async createBookmark(t){const{view:e,defaultCreateOptions:o,capabilities:s}=this;if(!e)throw new i("create-bookmark:invalid-view","Cannot create a bookmark without a view.");const{takeScreenshot:r,screenshotSettings:n,captureViewpoint:a,captureRotation:p,captureScale:m,captureTimeExtent:u}={...o,...t},l=r?await this._createThumbnail(n):void 0,k=s.time&&u&&null!=e.timeExtent?e.timeExtent.clone():void 0;return new c({...l&&{thumbnail:l},...u&&{timeExtent:k},...a&&{viewpoint:this._createViewpoint({view:e,captureScale:m,captureRotation:p})}})}async editBookmark(t,e){if(!t)return t;const{view:o,defaultEditOptions:s}=this;if(!o)throw new i("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");const{takeScreenshot:r,screenshotSettings:n,captureViewpoint:a,captureRotation:p,captureScale:c,captureTimeExtent:m}={...s,...e},u=r?await this._createThumbnail(n):void 0;return u&&(t.thumbnail=u),a&&(t.viewpoint=this._createViewpoint({view:o,captureScale:c,captureRotation:p})),m&&null!=o.timeExtent&&(t.timeExtent=o.timeExtent.clone()),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{capabilities:e,view:o}=this;if(!o)throw new i("go-to:invalid-view","Cannot go to a bookmark without a view");const s=t?.viewpoint;if(!s)throw new i("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});this._set("activeBookmark",t);const r=this.callGoTo({target:s}),n=t?.timeExtent;return e.time&&n&&(o.timeExtent=n),this.emit("bookmark-select",{bookmark:t}),r.catch(()=>{}).then(()=>this._set("activeBookmark",null)),r}async _createThumbnail(t){const{view:e}=this;if(!e)throw new i("bookmark:invalid-view","Cannot create slide thumbnail without a view");const o=await e.takeScreenshot({...l,...t});return new p({url:o.dataUrl})}_createViewpoint({view:t,captureRotation:o,captureScale:i}){const s=t.viewpoint?.clone();return new e({targetGeometry:t.extent?.clone(),rotation:(o?s?.rotation:null)??0,scale:(i?s?.scale:null)??0})}};t([r()],j.prototype,"capabilities",void 0),t([n("capabilities")],j.prototype,"castCapabilities",null),t([r({readOnly:!0})],j.prototype,"activeBookmark",void 0),t([r({type:u})],j.prototype,"bookmarks",null),t([r()],j.prototype,"defaultCreateOptions",null),t([r()],j.prototype,"defaultEditOptions",null),t([r({readOnly:!0})],j.prototype,"state",null),t([r()],j.prototype,"view",void 0),j=t([a("esri.widgets.Bookmarks.BookmarksViewModel")],j);const d=j;export{d as default};
