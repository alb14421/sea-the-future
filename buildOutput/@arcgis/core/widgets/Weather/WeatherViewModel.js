/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t,{f as r}from"../../core/Accessor.js";import{L as s}from"../../chunks/Logger.js";import{watch as o,syncAndInitial as n}from"../../core/reactiveUtils.js";import{property as i}from"../../core/accessorSupport/decorators/property.js";import{subclass as p}from"../../core/accessorSupport/decorators/subclass.js";import a from"../../views/3d/environment/CloudyWeather.js";import h from"../../views/3d/environment/FoggyWeather.js";import c from"../../views/3d/environment/RainyWeather.js";import m from"../../views/3d/environment/SnowyWeather.js";import l from"../../views/3d/environment/SunnyWeather.js";import{v as u}from"../../chunks/weather.js";import"../../core/lang.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/Lifecycle.js";import"../../chunks/metadata.js";import"../../chunks/ObjectPool.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/PooledArray.js";import"../../core/promiseUtils.js";import"../../core/Error.js";import"../../chunks/object.js";import"../../chunks/events.js";import"../../chunks/SetUtils.js";import"../../chunks/SimpleTrackingTarget.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/ensureType.js";import"../../chunks/MapUtils.js";import"../../chunks/Warning.js";import"../../core/JSONSupport.js";import"../../chunks/enumeration.js";import"../../chunks/jsonMap.js";let y=class extends t{constructor(e){super(e),this.view=null,this._weatherByType={sunny:new l,cloudy:new a,rainy:new c,snowy:new m,foggy:new h},this._settingWeather=!1,e?.isDefaultViewModel||r(s.getLogger(this),"Weather","arcgis-weather",{version:"4.33"})}normalizeCtorArgs(e={}){const{isDefaultViewModel:t,...r}=e;return r}initialize(){this.addHandles([o(()=>this.current,e=>{this._settingWeather||null==e||(this._weatherByType={...this._weatherByType,[e.type]:e})},n)])}get state(){const e=this.view;return null!=e&&e.ready?null!=this.error?"not-visible"===this.error?"ready":"error":"ready":"disabled"}get weatherByType(){return this._weatherByType}get error(){const e=this.view;return null!=e&&e.ready?"3d"!==e.type?"unsupported-view":"local"===e.viewingMode?"local-scene":e.environment.atmosphereEnabled?e.environment.weatherAvailable?null:"not-visible":"no-atmosphere":null}get current(){return this._environment?.weather??this._weatherByType.sunny}set current(e){const t=this._environment;t&&(t.weather=e)}get _environment(){const e=this.view;return null!=e&&"3d"===e.type?e.environment:null}setWeatherByType(e){if(!u(e,s.getLogger(this)))return;const t=this._environment;null!=t&&(this._settingWeather=!0,t.weather=this._weatherByType[e],this._settingWeather=!1)}setSnowCoverEnabled(e){const t=this.current;"snowCover"in t&&(t.snowCover=e?"enabled":"disabled")}};e([i()],y.prototype,"view",void 0),e([i()],y.prototype,"state",null),e([i()],y.prototype,"_weatherByType",void 0),e([i()],y.prototype,"weatherByType",null),e([i()],y.prototype,"error",null),e([i()],y.prototype,"current",null),e([i()],y.prototype,"_environment",null),y=e([p("esri.widgets.Weather.WeatherViewModel")],y);const j=y;export{j as default};
