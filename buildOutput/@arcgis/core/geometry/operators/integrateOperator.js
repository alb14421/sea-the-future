/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{i as s}from"../../core/lang.js";import{G as t,S as e}from"../../chunks/SimpleGeometryCursor.js";import{W as r,G as o,v as i}from"../../chunks/Point2D.js";import{E as m,n,aL as h,aM as p,aN as c,k as a,j as u,l,aO as _,aP as j,C as y,aQ as g}from"../../chunks/ProjectionTransformation.js";import{Envelope2D as k}from"../../chunks/Envelope2D.js";import{c as d,P as f}from"../../chunks/Envelope.js";import{fromGeometry as G,getSpatialReference as x,fromSpatialReference as b,toGeometry as S}from"../../chunks/apiConverter.js";import"../../chunks/Transformation2D.js";import"../../chunks/tslib.es6.js";import"../../chunks/OperatorDefinitions.js";import"../Extent.js";import"../../chunks/string.js";import"../../chunks/object.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/Logger.js";import"../../config.js";import"../../chunks/ensureType.js";import"../../chunks/MapUtils.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../core/Error.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/Lifecycle.js";import"../../chunks/tracking.js";import"../../chunks/Warning.js";import"../Geometry.js";import"../../core/JSONSupport.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/ObjectPool.js";import"../../chunks/ObservableBase.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/PooledArray.js";import"../../core/promiseUtils.js";import"../../chunks/events.js";import"../../chunks/SetUtils.js";import"../../chunks/SimpleTrackingTarget.js";import"../../chunks/reader.js";import"../SpatialReference.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../chunks/pe.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../chunks/jsonUtils.js";import"../../chunks/persistableUrlUtils.js";import"../../chunks/writer.js";import"../Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../support/webMercatorUtils.js";import"../Multipoint.js";import"../../chunks/zmUtils.js";import"../Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/mathUtils.js";import"../Polyline.js";import"../../chunks/jsonConverter.js";class T extends t{constructor(s,t,e,o){super(),this.m_shape=new m,this.m_currentGeom=n,this.m_progressCounter=0,this.m_geomIndex=-1,this.m_geomTypeIndex=-1,this.m_index=-1,this.m_bBuilt=!1,this.m_bOutputOnlyModified=!1,this.m_bSimplifyPolygons=!1,this.m_bSnapToSr=!1,this.m_progressTracker=e,this.m_inputGeometries=s,this.m_sr=t,this.m_options=o,1===o||2===o?(this.m_bOutputOnlyModified=!0,this.m_options=0,this.m_bSimplifyPolygons=!0,this.m_bSnapToSr=null!=t&&2===o,this.m_bSnapToSr&&!h()&&r("PE is required for snapping to spatial reference operation")):0===o&&(this.m_bSimplifyPolygons=!0)}progress_(s=!1){}tock(){return!0}getRank(){return 1}moveToNextGeom(){for(;;){if(this.m_bBuilt?this.m_currentGeom=this.m_shape.getNextGeometry(this.m_currentGeom):(this.m_currentGeom=this.m_shape.getFirstGeometry(),this.m_bBuilt=!0),this.m_currentGeom!==n){let s=!1;if(this.m_bSimplifyPolygons&&this.m_shape.getGeometryType(this.m_currentGeom)===o.enumPolygon&&(s=p(this.m_shape,this.m_currentGeom,-1,!1,n,this.m_progressTracker)),this.m_bOutputOnlyModified&&!s&&!this.m_shape.getGeometryModified(this.m_currentGeom))continue}break}}next(){if(this.m_bBuilt)this.moveToNextGeom();else{this.m_geomIndex=this.m_shape.createGeometryUserIndex();const s=new k;for(let t=this.m_inputGeometries.next();null!=t;t=this.m_inputGeometries.next()){this.progress_(),i(t);let e=!1;this.m_bSnapToSr&&(t=t.clone(),e=c(this.m_sr,t));const r=this.m_shape.addGeometry(t);this.m_shape.setGeometryUserIndex(r,this.m_geomIndex,this.m_inputGeometries.getGeometryID());const m=t.getGeometryType();m===o.enumPoint&&(-1===this.m_geomTypeIndex&&(this.m_geomTypeIndex=this.m_shape.createGeometryUserIndex()),this.m_shape.setGeometryUserIndex(r,this.m_geomTypeIndex,m));const n=new k;t.queryLooseEnvelope(n),s.mergeEnvelope2D(n),e&&this.m_shape.setGeometryModified(r,!0)}const t=d(this.m_sr,s,!0),e=d(this.m_sr,s,!1);s.inflate(10*t.total()),this.m_shape.forceSetEnvelope2D(s);let r=null,m=0,h=0;if(this.m_shape.hasCurves()){r=new y;const e=a(t.total(),s);m=u(t.total()),h=g(e,m),l(this.m_shape,e,t.total(),12e3,r,null,this.m_progressTracker)}if(_(this.m_shape,e,this.m_progressTracker)){if(j(this.m_shape,t.add(h),this.m_progressTracker,0===this.m_options,this.m_bOutputOnlyModified),null!==r){if(this.m_bSimplifyPolygons){for(let s=this.m_shape.getFirstGeometry();s!==n;s=this.m_shape.getNextGeometry(s))this.m_shape.getGeometryType(s)===o.enumPolygon&&p(this.m_shape,s,-1,!1,n,this.m_progressTracker)&&this.m_shape.setGeometryModified(s,!0);this.m_bSimplifyPolygons=!1}r.stitchCurves(this.m_shape,n,m,!0),r.clearStitcher(this.m_shape)}}else this.m_bSimplifyPolygons=!1,null!==r&&(r.stitchCurves(this.m_shape,n,m,!0),r.clearStitcher(this.m_shape));this.moveToNextGeom()}if(this.m_currentGeom!==n){if(this.m_index=this.m_shape.getGeometryUserIndex(this.m_currentGeom,this.m_geomIndex),-1!==this.m_geomTypeIndex&&this.m_shape.getGeometryUserIndex(this.m_currentGeom,this.m_geomTypeIndex)===o.enumPoint){const s=new f({vd:this.m_shape.getVertexDescription()});return this.m_shape.queryPointGeometryOnly(this.m_currentGeom,s),this.m_bSnapToSr&&c(this.m_sr,s),s}{const s=this.m_shape.getGeometry(this.m_currentGeom);return this.m_bSnapToSr&&c(this.m_sr,s),s}}return null}getGeometryID(){return this.m_index}}const P=new class{getOperatorType(){return 10009}supportsCurves(){return!0}accelerateGeometry(s,t,e){return!1}canAccelerateGeometry(s){return!1}executeMany(s,t,e,r=0){return new T(s,t,e,r)}};function U(t){const r=t.map(G),o=x(t);return function(s,t){const r=P.executeMany(new e(s),t,null,void 0);return Array.from(r)}(r,b(o)).map(s=>S(s,o)).filter(s)}const v=P.supportsCurves();export{U as executeMany,v as supportsCurves};
