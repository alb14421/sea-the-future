/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{i as e}from"../../core/lang.js";import{S as r,G as t}from"../../chunks/SimpleGeometryCursor.js";import{p as s,H as o,v as n,G as i,m as c,P as m,z as u,a as p}from"../../chunks/Point2D.js";import{aU as a,aV as l,P as h,aW as j,M as k}from"../../chunks/ProjectionTransformation.js";import{fromGeometry as g,getSpatialReference as d,toPolygon as y}from"../../chunks/apiConverter.js";import"../../chunks/Envelope2D.js";import"../../chunks/Envelope.js";import"../../chunks/Transformation2D.js";import"../../chunks/tslib.es6.js";import"../../chunks/OperatorDefinitions.js";import"../Extent.js";import"../../chunks/string.js";import"../../chunks/object.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/Logger.js";import"../../config.js";import"../../chunks/ensureType.js";import"../../chunks/MapUtils.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../core/Error.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/Lifecycle.js";import"../../chunks/tracking.js";import"../../chunks/Warning.js";import"../Geometry.js";import"../../core/JSONSupport.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/ObjectPool.js";import"../../chunks/ObservableBase.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/PooledArray.js";import"../../core/promiseUtils.js";import"../../chunks/events.js";import"../../chunks/SetUtils.js";import"../../chunks/SimpleTrackingTarget.js";import"../../chunks/reader.js";import"../SpatialReference.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../chunks/pe.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../chunks/jsonUtils.js";import"../../chunks/persistableUrlUtils.js";import"../../chunks/writer.js";import"../Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../support/webMercatorUtils.js";import"../Multipoint.js";import"../../chunks/zmUtils.js";import"../Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/mathUtils.js";import"../Polyline.js";import"../../chunks/jsonConverter.js";class C extends t{constructor(e,r,t){super(),this.m_geometryCursor=e,this.m_bMerge=r,this.m_progressTracker=t}tock(){return!0}getRank(){return 1}next(){if(this.m_bMerge)return this.mergedMinimumBoundingCircle();const e=this.m_geometryCursor.next();return e?this.minimumBoundingCircle(e):null}getGeometryID(){return this.m_geometryCursor.getGeometryID()}minimumBoundingCircle(e){if(o(e),n(e),this.m_progressTracker?.checkProgress(),e.isEmpty())return e.clone();const r=e.getGeometryType();if(r===i.enumPoint)return this.makeCircle([e.getXY()],1);if(r===i.enumLine){const r=e,t=[r.getStartXY(),r.getEndXY()];return this.makeCircle(t,2)}if(r===i.enumEnvelope){const r=e,t=c(m,2);return r.queryCorner(0,t[0]),r.queryCorner(2,t[1]),this.makeCircle(t,2)}if(u(r)){const r=e,t=[0,0,0],s=l(r,t),o=new Array(s);for(let e=0;e<s;++e)o[e]=r.getXY(t[e]);return this.makeCircle(o,s)}p("Geometry type not supported.")}makeCircle(e,r){const t=new h,s=new j;if(1===r)s.constructCircleRadius(0,e[0],!1);else if(2===r){const r=m.lerp(e[0],e[1],.5),t=m.distance(e[0],r),o=m.distance(e[1],r);s.constructCircleRadius(Math.max(t,o),r,!1)}else if(3===r){const r=m.calculateCircleCenterFromThreePoints(e[0],e[1],e[2]),t=m.distance(e[0],r),o=m.distance(e[1],r),n=m.distance(e[2],r);s.constructCircleRadius(Math.max(t,o,n),r,!1)}return t.addPathFromClosedSegment(s,!1),t}mergedMinimumBoundingCircle(){let e=null,r=this.m_geometryCursor.next();if(!r)return null;e=new k;const t=e.getImpl();do{switch(o(r),n(r),this.m_progressTracker?.checkProgress(),r.getGeometryType()){case i.enumPoint:t.addPoint2D(r.getXY());break;case i.enumLine:t.addPoint2D(r.getStartXY()),t.addPoint2D(r.getEndXY());break;case i.enumEnvelope:for(let e=0;e<4;++e){const s=new m;r.queryCorner(e,s),t.addPoint2D(s)}break;case i.enumMultiPoint:case i.enumPolyline:case i.enumPolygon:{const e=r.getImpl();for(let r=0,s=e.getPointCount();r<s;r++)t.addPoint2D(e.getXY(r));break}default:p("Geometry type not supported.")}}while(r=this.m_geometryCursor.next());return this.minimumBoundingCircle(e)}}const f=new class{getOperatorType(){return 10113}supportsCurves(){return!1}accelerateGeometry(e,r,t){return!1}canAccelerateGeometry(e){return!1}executeMany(e,r,t){return new C(e,r,t)}execute(e,t){const o=new r([e]),n=this.executeMany(o,!1,t).next();return n||s("null output"),n}minimumBoundingCircle(e,r,t,s){return a(e,r,t)}};function P(e){return b([e])[0]}function b(t,s={}){const{merge:o=!1}=s,n=t.map(g),i=d(t);return function(e,t){const s=f.executeMany(new r(e),t,null);return Array.from(s)}(n,o).map(e=>y(e,i)).filter(e)}const x=f.supportsCurves();export{P as execute,b as executeMany,x as supportsCurves};
