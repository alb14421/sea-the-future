/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import e from"../request.js";import{p as t,a as r}from"../chunks/utils9.js";import o from"../geometry/Polygon.js";import{Z as n}from"../chunks/unitUtils.js";import{e as i}from"../chunks/utils10.js";import{fromJSON as a,getJsonType as m}from"../geometry/support/jsonUtils.js";export{c as cut,s as simplify}from"../chunks/simplify.js";import{J as N}from"../chunks/jsonMap.js";import u from"./support/GeneralizeParameters.js";import T from"./support/LengthsParameters.js";import f from"./support/OffsetParameters.js";export{p as project}from"../chunks/project.js";import I from"./support/RelationParameters.js";import l from"../geometry/Polyline.js";import _ from"./support/TrimExtendParameters.js";import"../config.js";import"../core/lang.js";import"../chunks/object.js";import"../kernel.js";import"../core/urlUtils.js";import"../core/Error.js";import"../chunks/Logger.js";import"../chunks/string.js";import"../chunks/jsonUtils.js";import"../chunks/MapUtils.js";import"../core/promiseUtils.js";import"../chunks/handleUtils.js";import"../chunks/events.js";import"../chunks/maybe.js";import"../chunks/persistableUrlUtils.js";import"../chunks/tslib.es6.js";import"../core/Accessor.js";import"../core/Handles.js";import"../core/accessorSupport/decorators/subclass.js";import"../chunks/Lifecycle.js";import"../chunks/metadata.js";import"../chunks/utils.js";import"../chunks/tracking.js";import"../chunks/ensureType.js";import"../chunks/Warning.js";import"../chunks/get.js";import"../chunks/ObjectPool.js";import"../chunks/ObservableBase.js";import"../core/accessorSupport/decorators/property.js";import"../chunks/watch.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../chunks/PooledArray.js";import"../chunks/SetUtils.js";import"../chunks/SimpleTrackingTarget.js";import"../chunks/writer.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"../core/JSONSupport.js";import"../chunks/reader.js";import"../geometry/SpatialReference.js";import"../chunks/pe.js";import"../chunks/assets.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../chunks/coordsUtils.js";import"../chunks/extentUtils.js";import"../chunks/boundsUtils.js";import"../chunks/aaBoundingRect.js";import"../chunks/mathUtils.js";import"../chunks/zmUtils.js";import"../geometry/Multipoint.js";import"./support/ProjectParameters.js";async function y(s,o,n){const i=t(s),a={...i.query,f:"json",...o.toJSON()},c=r(a,n);return e(i.path+"/areasAndLengths",c).then(e=>e.data)}async function g(s,a,c,m){const p=a[0].spatialReference,N=t(s),u={...N.query,f:"json",sr:n(p),polygons:JSON.stringify(i(a).geometries),polylines:JSON.stringify(i(c).geometries)},T=r(u,m);return e(N.path+"/autoComplete",T).then(({data:e})=>(e.geometries||[]).map(({rings:e})=>new o({spatialReference:p,rings:e})))}async function S(s,n,i){const a=t(s),c={...a.query,f:"json",...n.toJSON()},m=n.outSpatialReference||n.geometries[0].spatialReference,p=r(c,i);return e(a.path+"/buffer",p).then(e=>(e.data.geometries||[]).map(({rings:e})=>new o({spatialReference:m,rings:e})))}async function U(s,o,n){const c=o[0].spatialReference,m=t(s),p={...m.query,f:"json",sr:JSON.stringify(c.toJSON()),geometries:JSON.stringify(i(o))},N=r(p,n);return e(m.path+"/convexHull",N).then(({data:e})=>a(e.geometry).set({spatialReference:c}))}async function R(s,o,n){const i=o.geometries?.[0].spatialReference,c=t(s),m={...c.query,f:"json",...o.toJSON()},p=r(m,n);return e(c.path+"/densify",p).then(({data:e})=>(e.geometries||[]).map(e=>a(e).set({spatialReference:i})))}async function O(r,s,o,n){const c=s[0].spatialReference,p=t(r);let N={query:{...p.query,f:"json",sr:JSON.stringify(c.toJSON()),geometries:JSON.stringify(i(s)),geometry:JSON.stringify({geometryType:m(o),geometry:o.toJSON()})}};return n&&(N={...n,...N}),e(p.path+"/difference",N).then(({data:e})=>(e.geometries||[]).map(e=>a(e).set({spatialReference:c})))}async function h(s,o,n){const i=t(s),a={...i.query,f:"json",...o.toJSON()},c=r(a,n);return e(i.path+"/distance",c).then(({data:e})=>e&&e.distance)}const E=new N({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),j={UNIT_METER:9001,UNIT_GERMAN_METER:9031,UNIT_FOOT:9002,UNIT_SURVEY_FOOT:9003,UNIT_CLARKE_FOOT:9005,UNIT_FATHOM:9014,UNIT_NAUTICAL_MILE:9030,UNIT_SURVEY_CHAIN:9033,UNIT_SURVEY_LINK:9034,UNIT_SURVEY_MILE:9035,UNIT_KILOMETER:9036,UNIT_CLARKE_YARD:9037,UNIT_CLARKE_CHAIN:9038,UNIT_CLARKE_LINK:9039,UNIT_SEARS_YARD:9040,UNIT_SEARS_FOOT:9041,UNIT_SEARS_CHAIN:9042,UNIT_SEARS_LINK:9043,UNIT_BENOIT_1895A_YARD:9050,UNIT_BENOIT_1895A_FOOT:9051,UNIT_BENOIT_1895A_CHAIN:9052,UNIT_BENOIT_1895A_LINK:9053,UNIT_BENOIT_1895B_YARD:9060,UNIT_BENOIT_1895B_FOOT:9061,UNIT_BENOIT_1895B_CHAIN:9062,UNIT_BENOIT_1895B_LINK:9063,UNIT_INDIAN_FOOT:9080,UNIT_INDIAN_1937_FOOT:9081,UNIT_INDIAN_1962_FOOT:9082,UNIT_INDIAN_1975_FOOT:9083,UNIT_INDIAN_YARD:9084,UNIT_INDIAN_1937_YARD:9085,UNIT_INDIAN_1962_YARD:9086,UNIT_INDIAN_1975_YARD:9087,UNIT_FOOT_1865:9070,UNIT_RADIAN:9101,UNIT_DEGREE:9102,UNIT_ARCMINUTE:9103,UNIT_ARCSECOND:9104,UNIT_GRAD:9105,UNIT_GON:9106,UNIT_MICRORADIAN:9109,UNIT_ARCMINUTE_CENTESIMAL:9112,UNIT_ARCSECOND_CENTESIMAL:9113,UNIT_MIL6400:9114,UNIT_BRITISH_1936_FOOT:9095,UNIT_GOLDCOAST_FOOT:9094,UNIT_INTERNATIONAL_CHAIN:109003,UNIT_INTERNATIONAL_LINK:109004,UNIT_INTERNATIONAL_YARD:109001,UNIT_STATUTE_MILE:9093,UNIT_SURVEY_YARD:109002,UNIT_50KILOMETER_LENGTH:109030,UNIT_150KILOMETER_LENGTH:109031,UNIT_DECIMETER:109005,UNIT_CENTIMETER:109006,UNIT_MILLIMETER:109007,UNIT_INTERNATIONAL_INCH:109008,UNIT_US_SURVEY_INCH:109009,UNIT_INTERNATIONAL_ROD:109010,UNIT_US_SURVEY_ROD:109011,UNIT_US_NAUTICAL_MILE:109012,UNIT_UK_NAUTICAL_MILE:109013,UNIT_SQUARE_INCHES:"esriSquareInches",UNIT_SQUARE_FEET:"esriSquareFeet",UNIT_SQUARE_YARDS:"esriSquareYards",UNIT_ACRES:"esriAcres",UNIT_SQUARE_MILES:"esriSquareMiles",UNIT_SQUARE_MILLIMETERS:"esriSquareMillimeters",UNIT_SQUARE_CENTIMETERS:"esriSquareCentimeters",UNIT_SQUARE_DECIMETERS:"esriSquareDecimeters",UNIT_SQUARE_METERS:"esriSquareMeters",UNIT_ARES:"esriAres",UNIT_HECTARES:"esriHectares",UNIT_SQUARE_KILOMETERS:"esriSquareKilometers"};async function d(s,o,i){const a={};null!=o.sr&&"object"==typeof o.sr?a.sr=n(o.sr):a.sr=o.sr,a.strings=JSON.stringify(o.strings);const c=o.conversionType||"mgrs";a.conversionType=E.toJSON(c),a.conversionMode=o.conversionMode;const m=t(s),p={...m.query,f:"json",...a},N=r(p,i);return e(m.path+"/fromGeoCoordinateString",N).then(({data:e})=>e.coordinates)}const A=new N({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});async function J(s,o,n){const i=(o=u.from(o)).toJSON(),c=function(e){const{geometries:t,deviationUnit:r,maxDeviation:s}=e.toJSON(),o={maxDeviation:s};return t&&t.length&&(o.geometries=JSON.stringify({geometryType:m(t[0]),geometries:t}),o.sr=JSON.stringify(t[0].spatialReference)),A.write(r,o,"deviationUnit"),o}(o),p=t(s),N={...p.query,f:"json",...c},T=i.geometries[0].spatialReference,f=r(N,n);return e(p.path+"/generalize",f).then(({data:e})=>(e.geometries||[]).map(e=>a(e).set({spatialReference:T})))}async function k(s,o,n,c){const p=o[0].spatialReference,N=t(s),u={...N.query,f:"json",sr:JSON.stringify(p.toJSON()),geometries:JSON.stringify(i(o)),geometry:JSON.stringify({geometryType:m(n),geometry:n.toJSON()})},T=r(u,c);return e(N.path+"/intersect",T).then(({data:e})=>(e.geometries||[]).map(e=>a(e).set({spatialReference:p})))}function M(s,o,i){const c=o.map(e=>e.toJSON()),m=o[0].spatialReference,p=t(s),N={...p.query,f:"json",sr:n(m),polygons:JSON.stringify(c)},u=r(N,i);return e(p.path+"/labelPoints",u).then(({data:e})=>(e.labelPoints||[]).map(e=>a(e).set({spatialReference:m})))}const L=new N({preserveShape:"preserve-shape"});async function D(s,o,i){const a=function(e){const{polylines:t,lengthUnit:r,geodesic:s,calculationType:o}=e.toJSON(),i={};i.polylines=JSON.stringify(t);const a=e.polylines[0].spatialReference;return i.sr=n(a),r&&(i.lengthUnit=r),s&&(i.geodesic=s),o&&(i.calculationType=L.toJSON(o)),i}(o=T.from(o)),c=t(s),m={...c.query,f:"json",...a},p=r(m,i);return e(c.path+"/lengths",p).then(({data:e})=>e)}const C=new N({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),G=new N({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});async function q(s,o,n){const i=function(e){const{geometries:t,bevelRatio:r,offsetDistance:s,offsetHow:o,offsetUnit:n}=e.toJSON(),i={bevelRatio:r,offsetDistance:s};return t&&t.length&&(i.geometries=JSON.stringify({geometryType:m(t[0]),geometries:t}),i.sr=JSON.stringify(t[0].spatialReference)),o&&(i.offsetHow=C.toJSON(o)),n&&(i.offsetUnit=G.toJSON(n)),i}(o=f.from(o)),c=t(s),p={...c.query,f:"json",...i},N=o.geometries?.[0].spatialReference,u=r(p,n);return e(c.path+"/offset",u).then(({data:e})=>(e.geometries||[]).map(e=>a(e).set({spatialReference:N})))}const v=new N({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});async function H(s,o,i){const a=function(e){const{geometries1:t,geometries2:r,relation:s,relationParameter:o}=e.toJSON(),i={};return t?.length&&(i.geometries1=JSON.stringify({geometryType:m(t[0]),geometries:t}),i.sr=n(t[0].spatialReference)),r&&r.length>0&&(i.geometries2=JSON.stringify({geometryType:m(r[0]),geometries:r})),s&&(i.relation=v.toJSON(s)),o&&(i.relationParam=o),i}(o=I.from(o)),c=t(s),p={...c.query,f:"json",...a},N=r(p,i);return e(c.path+"/relation",N).then(({data:e})=>e.relations)}async function b(s,o,i,c){const p=o.spatialReference,N=t(s),u={...N.query,f:"json",sr:n(p),target:JSON.stringify({geometryType:m(o),geometry:o.toJSON()}),reshaper:JSON.stringify(i.toJSON())},T=r(u,c);return e(N.path+"/reshape",T).then(({data:e})=>a(e.geometry).set({spatialReference:p}))}async function w(s,o,i){const a={};null!=o.sr&&"object"==typeof o.sr?a.sr=n(o.sr):a.sr=o.sr,a.coordinates=JSON.stringify(o.coordinates);const c=o.conversionType||"mgrs";a.conversionType=E.toJSON(c),a.conversionMode=o.conversionMode,a.numOfDigits=o.numOfDigits,a.rounding=o.rounding,a.addSpaces=o.addSpaces;const m=t(s),p={...m.query,f:"json",...a},N=r(p,i);return e(m.path+"/toGeoCoordinateString",N).then(({data:e})=>e.strings)}const Y=new N({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});async function x(s,o,n){const i=function(e){const{extendHow:t,polylines:r,trimExtendTo:s}=e.toJSON(),o={};return o.extendHow=Y.toJSON(t),r?.length&&(o.polylines=JSON.stringify(r),o.sr=JSON.stringify(r[0].spatialReference)),s&&(o.trimExtendTo=JSON.stringify(s)),o}(o=_.from(o)),a=t(s),c={...a.query,f:"json",...i},m=o.sr,p=r(c,n);return e(a.path+"/trimExtend",p).then(({data:e})=>(e.geometries||[]).map(({paths:e})=>new l({spatialReference:m,paths:e})))}async function P(s,o,n){const c=o[0].spatialReference,m=t(s),p={...m.query,f:"json",sr:JSON.stringify(c.toJSON()),geometries:JSON.stringify(i(o))},N=r(p,n);return e(m.path+"/union",N).then(({data:e})=>a(e.geometry).set({spatialReference:c}))}export{y as areasAndLengths,g as autoComplete,S as buffer,E as conversionTypeKebabDict,U as convexHull,R as densify,O as difference,h as distance,d as fromGeoCoordinateString,J as generalize,k as intersect,M as labelPoints,D as lengths,q as offset,H as relation,b as reshape,w as toGeoCoordinateString,x as trimExtend,P as union,j as units};
