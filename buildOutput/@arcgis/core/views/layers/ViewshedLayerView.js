/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as s}from"../../chunks/tslib.es6.js";import{createAbortError as e}from"../../core/promiseUtils.js";import{property as t}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import"../../chunks/Logger.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/handleUtils.js";import"../../core/Error.js";import"../../chunks/object.js";import"../../chunks/events.js";import"../../chunks/maybe.js";import"../../chunks/ensureType.js";import"../../chunks/MapUtils.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/metadata.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/Lifecycle.js";import"../../chunks/tracking.js";import"../../chunks/Warning.js";const r=r=>{const n=r;let o=class extends n{constructor(...s){super(...s),this.layer=null}get interactive(){return null!=this.analysisView&&this.analysisView.interactive}set interactive(s){null!=this.analysisView&&(this.analysisView.interactive=s)}get selectedViewshed(){return null!=this.analysisView?this.analysisView.selectedViewshed:null}set selectedViewshed(s){null!=this.analysisView&&(this.analysisView.selectedViewshed=s)}async createViewsheds(s){await(this.analysisView?.createViewsheds(s))}place(s){if(null!=this.analysisView)return this.analysisView.place(s);throw e()}};return s([t()],o.prototype,"layer",void 0),s([t()],o.prototype,"interactive",null),s([t()],o.prototype,"selectedViewshed",null),o=s([i("esri.views.layers.ViewshedLayerView")],o),o};export{r as default};
