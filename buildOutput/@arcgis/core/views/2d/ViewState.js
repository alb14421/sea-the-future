/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import s from"../../Viewpoint.js";import{JSONSupport as i}from"../../core/JSONSupport.js";import{property as e}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import"../../chunks/Logger.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import{t as r}from"../../chunks/common.js";import{f as n,r as p,t as a,i as c}from"../../chunks/mat2d.js";import{c as m}from"../../chunks/mat2df32.js";import{c as h}from"../../chunks/mat2df64.js";import{s as l,b as u,c as j,r as f,m as k}from"../../chunks/mat3.js";import{c as d}from"../../chunks/mat3f32.js";import{c as y,t as g}from"../../chunks/vec2.js";import{f as v}from"../../chunks/vec2f32.js";import{c as w}from"../../chunks/vec2f64.js";import R from"../../geometry/Extent.js";import x from"../../geometry/Point.js";import{getClosestDenormalizedXToReference as M}from"../../geometry/support/normalizeUtils.js";import{c as U,g as _,a as b,b as z,d as S,f as T,h as C,i as A}from"../../chunks/viewpointUtils.js";import"../../Camera.js";import"../../CameraLayout.js";import"../../core/Clonable.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/Lifecycle.js";import"../../chunks/metadata.js";import"../../chunks/ObjectPool.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/PooledArray.js";import"../../core/promiseUtils.js";import"../../core/Error.js";import"../../chunks/object.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/events.js";import"../../chunks/SetUtils.js";import"../../chunks/SimpleTrackingTarget.js";import"../../chunks/ensureType.js";import"../../chunks/MapUtils.js";import"../../chunks/Warning.js";import"../../chunks/Cyclical.js";import"../../chunks/mathUtils.js";import"../../core/accessorSupport/decorators/cast.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../geometry/Geometry.js";import"../../geometry/SpatialReference.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../chunks/pe.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../chunks/jsonUtils.js";import"../../chunks/persistableUrlUtils.js";import"../../geometry/support/webMercatorUtils.js";import"../../geometry/support/jsonUtils.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/extentUtils.js";import"../../chunks/boundsUtils.js";import"../../chunks/aaBoundingRect.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../chunks/normalizeUtilsCommon.js";import"../../chunks/simplify.js";import"../../chunks/utils9.js";import"../../chunks/utils10.js";import"../../core/Collection.js";import"../../core/Evented.js";import"../../chunks/shared.js";import"../../chunks/SimpleObservable.js";import"../../chunks/projectionUtils.js";import"../../chunks/vec3f64.js";import"../../chunks/projectBuffer.js";import"../../chunks/geodesicConstants.js";import"../../chunks/projectXYZToVector.js";import"../../geometry/support/GeographicTransformation.js";import"../../geometry/support/GeographicTransformationStep.js";import"../../chunks/zscale.js";function N(t){return function(t){return t instanceof Float32Array&&t.length>=2}(t)||function(t){return Array.isArray(t)&&t.length>=2}(t)}var O;const G=[0,0];let P=O=class extends i{constructor(t){super(t),this._viewpoint2D={center:w(),rotation:0,scale:0,spatialReference:void 0},this.center=[0,0],this.extent=new R,this.id=0,this.inverseTransform=h(),this.resolution=0,this.rotation=0,this.scale=0,this.transform=h(),this.transformNoRotation=h(),this.displayMat3=d(),this.displayViewMat3=d(),this.viewMat3=d(),this.viewMat2d=m(),this.worldScreenWidth=0,this.size=[0,0]}set pixelRatio(t){this._set("pixelRatio",t),this._update()}set size(t){this._set("size",t),this._update()}set viewpoint(t){if(t){const s=this._viewpoint2D,i=t.targetGeometry;s.center[0]=i.x,s.center[1]=i.y,s.rotation=t.rotation,s.scale=t.scale,s.spatialReference=i.spatialReference}this._update()}get visibleArea(){const[t,s]=this.size;return[this.toMap([0,0],0,0),this.toMap([0,0],0,s),this.toMap([0,0],t,s),this.toMap([0,0],t,0)]}copy(t){const s=this.size,i=this.viewpoint;return i&&s?(this.viewpoint=U(i,t.viewpoint),this._set("size",y(s,t.size))):(this.viewpoint=t.viewpoint.clone(),this._set("size",[t.size[0],t.size[1]])),this._set("pixelRatio",t.pixelRatio),this}clone(){return new O({size:this.size,viewpoint:this.viewpoint.clone(),pixelRatio:this.pixelRatio})}toMap(t,s,i){return N(s)?g(t,s,this.inverseTransform):(G[0]=s,G[1]=i,g(t,G,this.inverseTransform))}toScreen(t,s,i){return N(s)?g(t,s,this.transform):(G[0]=s,G[1]=i,g(t,G,this.transform))}toScreenNoRotation(t,s,i){return N(s)?g(t,s,this.transformNoRotation):(G[0]=s,G[1]=i,g(t,G,this.transformNoRotation))}wrapMapCoordinate(t,s){y(t,s);const[i]=s,[e]=this.center,{extent:o,spatialReference:r}=this;let{xmin:n,xmax:p}=o;if(r.isWrappable){const t=_(r)/2;n=Math.max(n,e-t),p=Math.min(p,e+t)}return(i<n||i>p)&&(t[0]=M(i,e,r)),t}getScreenTransform(t,s){const{center:i}=this._viewpoint2D,e=this._get("pixelRatio")||1,o=this._get("size");return b(t,i,o,s,0,e),t}_update(){const{center:t,spatialReference:i,scale:e,rotation:o}=this._viewpoint2D,m=this._get("pixelRatio")||1,h=this._get("size"),d=new s({targetGeometry:new x(t[0],t[1],i),scale:e,rotation:o});if(this._set("viewpoint",d),!h||!i||!e)return;this.resolution=z(d),this.rotation=o,this.scale=e,this.spatialReference=i,y(this.center,t);const g=0!==h[0]?2/h[0]:0,w=0!==h[1]?-2/h[1]:0;l(this.displayMat3,g,0,0,0,w,0,-1,1,1);const R=u(this.viewMat3),M=v(h[0]/2,h[1]/2),U=v(-h[0]/2,-h[1]/2),_=r(o);j(R,R,M),f(R,R,_),j(R,R,U),k(this.displayViewMat3,this.displayMat3,R);const b=n(this.viewMat2d,M);return p(b,b,_),a(b,b,U),S(this.extent,d,h),T(this.transform,d,h,m),c(this.inverseTransform,this.transform),C(this.transformNoRotation,d,h,m),this.worldScreenWidth=A(this.spatialReference,this.resolution),this._set("id",this.id+1),this.notifyChange("visibleArea"),this}};t([e({readOnly:!0})],P.prototype,"id",void 0),t([e({value:1,json:{write:!0}})],P.prototype,"pixelRatio",null),t([e({json:{write:!0}})],P.prototype,"size",null),t([e()],P.prototype,"spatialReference",void 0),t([e({type:s,json:{write:!0}})],P.prototype,"viewpoint",null),t([e({readOnly:!0})],P.prototype,"visibleArea",null),P=O=t([o("esri.views.2d.ViewState")],P);const V=P;export{V as default};
