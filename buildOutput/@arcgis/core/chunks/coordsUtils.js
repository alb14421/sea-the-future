/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{e as n}from"../core/lang.js";import{h as t}from"./unitUtils.js";function r(n){if(!n)return null;if(Array.isArray(n))return n;const t=n.hasZ,r=n.hasM;if("point"===n.type)return r&&t?[n.x,n.y,n.z,n.m]:t?[n.x,n.y,n.z]:r?[n.x,n.y,n.m]:[n.x,n.y];if("polygon"===n.type)return n.rings.slice();if("polyline"===n.type)return n.paths.slice();if("multipoint"===n.type)return n.points.slice();if("extent"===n.type){const t=n.clone().normalize();if(!t)return null;let r=!1,e=!1;return t.forEach(n=>{n.hasZ&&(r=!0),n.hasM&&(e=!0)}),t.map(n=>{const t=[[n.xmin,n.ymin],[n.xmin,n.ymax],[n.xmax,n.ymax],[n.xmax,n.ymin],[n.xmin,n.ymin]];if(r&&n.hasZ){const r=.5*(n.zmax-n.zmin);for(let n=0;n<t.length;n++)t[n].push(r)}if(e&&n.hasM){const r=.5*(n.mmax-n.mmin);for(let n=0;n<t.length;n++)t[n].push(r)}return t})}return null}function e(n,t){const r=t[0]-n[0],e=t[1]-n[1];if(n.length>2&&t.length>2){const i=n[2]-t[2];return Math.sqrt(r*r+e*e+i*i)}return Math.sqrt(r*r+e*e)}function i(n,t,r){const e=n[0]+r*(t[0]-n[0]),i=n[1]+r*(t[1]-n[1]);return n.length>2&&t.length>2?[e,i,n[2]+r*(t[2]-n[2])]:[e,i]}function o(n,t,r,e){return s(n,t,r[e],r[e+1])}function s(n,t,r,e){const[i,o]=t,[s,u]=r,[f,l]=e,c=f-s,a=l-u,h=c*c+a*a,p=(i-s)*c+(o-u)*a,g=Math.min(1,Math.max(0,p/h));return n[0]=s+c*g,n[1]=u+a*g,n}function u(n,t,r,e,i,o){let s=r,u=e,f=i-s,l=o-u;if(0!==f||0!==l){const r=((n-s)*f+(t-u)*l)/(f*f+l*l);r>1?(s=i,u=o):r>0&&(s+=f*r,u+=l*r)}return f=n-s,l=t-u,f*f+l*l}function f(n,t){return i(n,t,.5)}function l(n){const t=n.length;let r=0;for(let i=0;i<t-1;++i)r+=e(n[i],n[i+1]);return r}function c(n,t){if(t<=0)return n[0];const r=n.length;let o=0;for(let s=0;s<r-1;++s){const r=e(n[s],n[s+1]);if(t-o<r){const e=(t-o)/r;return i(n[s],n[s+1],e)}o+=r}return n[r-1]}function a(n,t=0,r=1){let e=0;const i=n.length;let o=n[0];for(let s=1;s<i;s++){const i=n[s];e+=(i[t]-o[t])*(i[r]+o[r]),o=i}if(h(n)){const i=n[0];e+=(i[t]-o[t])*(i[r]+o[r])}return e>=0}function h(t){const r=t.length;return r>0&&!n(t[0],t[r-1])}function p(n){"rings"in n&&(g(n),function(n){if(!("rings"in n))return!1;if(0===n.rings.length||a(n.rings[0]))return!1;for(const t of n.rings)t.reverse()}(n))}function g(n){if("rings"in n)for(const t of n.rings)h(t)&&t.push(t[0].slice())}function y(n){return"polygon"!==n.type&&"polyline"!==n.type||m("polygon"===n.type?n.rings:n.paths,n.spatialReference),n}function m(n,r){const e=t(r);if(!e)return;const i=e.valid[0],o=e.valid[1],s=o-i;for(const t of n){let n=1/0,r=-1/0;for(const e of t){const t=x(e[0],i,o);n=Math.min(n,t),r=Math.max(r,t),e[0]=t}const e=r-n;s-e<e&&t.forEach(n=>{n[0]<0&&(n[0]+=s)})}}function x(n,t,r){const e=r-t;return n<t?r-(t-n)%e:n>r?t+(n-t)%e:n}function M(n,t){if(n===t)return!0;if(n.type!==t.type)return!1;if("point"===n.type||"mesh"===n.type||"extent"===n.type)return!0;if("multipoint"===n.type)return n.points.length===t.points.length;const[r,e]="polyline"===n.type?[n.paths,t.paths]:[n.rings,t.rings];return r.length===e.length&&r.every((n,t)=>n.length===e[t].length)}export{l as a,e as b,g as c,y as d,u as e,f,r as g,c as h,a as i,p as j,x as k,M as l,o as m,s as p,m as u};
