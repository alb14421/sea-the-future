/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import{L as r}from"./Logger.js";import{property as t}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import{subclass as i}from"../core/accessorSupport/decorators/subclass.js";import s from"../core/sql/WhereClause.js";import{a as n,f as o}from"./I3SUtil.js";import{a as l}from"./timeSupport.js";import a from"../layers/support/FeatureFilter.js";import{c as u}from"./timeSupport2.js";import{g as p}from"./I3SBinaryReader.js";const d="updating";function f(e){return"updating"===e?null:e}function c(e){return"updating"===e}const m=o=>{const l=o;let a=class extends l{constructor(){super(...arguments),this._definitionExpressionErrors=0,this._maxDefinitionExpressionErrors=20,this.logError=e=>{this._definitionExpressionErrors<this._maxDefinitionExpressionErrors&&r.getLogger(this).error("Error while evaluating definitionExpression: "+e),this._definitionExpressionErrors++,this._definitionExpressionErrors===this._maxDefinitionExpressionErrors&&r.getLogger(this).error("Further errors are ignored")}}get parsedDefinitionExpression(){if(!this.i3slayer?.definitionExpression)return null;try{const e=s.create(this.i3slayer.definitionExpression,{fieldsIndex:this.i3slayer.fieldsIndex});if(!e.isStandardized)return r.getLogger(this).error("definitionExpression is using non standard function"),null;const t=[],i=e.fieldNames;return n(i,this.i3slayer.fieldsIndex,{missingFields:t}),t.length>0?(r.getLogger(this).error(`definitionExpression references unknown fields: ${t.join(", ")}`),null):(this._definitionExpressionErrors=0,e)}catch(e){return r.getLogger(this).error("Failed to parse definitionExpression: "+e),null}}get definitionExpressionFields(){return this.parsedDefinitionExpression?this.parsedDefinitionExpression.fieldNames:[]}_evaluateClause(e,r){if(null==e)return!0;try{return e.testFeature(r)}catch(e){return this.logError(e),!1}}_addDefinitionExpressionToQuery(e){if(!this.parsedDefinitionExpression)return e;const r=this.i3slayer.definitionExpression,t=e.clone();return t.where?t.where=`(${r}) AND (${t.where})`:t.where=r,t}};return e([t({readOnly:!0})],a.prototype,"parsedDefinitionExpression",null),e([t({readOnly:!0})],a.prototype,"definitionExpressionFields",null),a=e([i("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView")],a),a},h=r=>{const s=r;let n=class extends s{get timeExtent(){return u(this.i3slayer,this.view?.timeExtent,this._get("timeExtent"))}get mergedFilter(){const{filter:e,timeExtent:r}=this;if(null==r)return e;const t=e?.clone()??new a;return null!=r&&(t.timeExtent=t.timeExtent?.intersection(r)??r),t}getTimeFilterDependencies(){const{timeInfo:e}=this.i3slayer;if(null==e)return[];const{startField:r,endField:t}=e;return[r,t]}addTimeFilter(e,r){if(null==r)return;const{timeInfo:t}=this.i3slayer;if(null==t)return;const{startField:i,endField:s,useTime:n}=t;if(!n||null==i&&null==s)return;const a=t.toJSON(),u=r.toJSON();e.push((e,r)=>function(e,r,t,i){const s=r.attributeInfo?.attributeData;if(null==s)return;const{startTimeField:n,endTimeField:a}=t;if(null!=n&&null==s[n]||null!=a&&null==s[a])return;const u=l(t,i,new g(s));if(null==u)return;const{featureIds:p}=r;o(e,p,u)}(e,r,a,u))}};return e([t({readOnly:!0})],n.prototype,"timeExtent",null),e([t()],n.prototype,"mergedFilter",null),n=e([i("esri.views.3d.layers.support.TemporalSceneLayerView")],n),n};class g{constructor(e){this.attributeData=e}getAttribute(e,r){return p(this.attributeData[r],e)}getAttributeAsTimestamp(e,r){const t=this.getAttribute(e,r);return"string"==typeof t?new Date(t).getTime():"number"==typeof t||null==t?t:null}}export{m as D,h as T,d as a,c as i,f as u};
