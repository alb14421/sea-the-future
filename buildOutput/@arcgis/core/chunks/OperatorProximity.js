/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{a as e,t,G as r,P as n}from"./Point2D.js";import{Envelope2D as s}from"./Envelope2D.js";import{m as o,a as i,c as a}from"./SideCalculator2D-BNwb5gvz.js";import{a as u}from"./Envelope.js";import{q as c}from"./ProjectionTransformation.js";class m{getOperatorType(){return 10500}accelerateGeometry(e,t,r){return!1}canAccelerateGeometry(e){return!1}supportsCurves(){return!0}getNearestCoordinate(n,s,i,a){if(s.isNAN()&&e("NAN xy coordinates are not allowed"),n.isEmpty())return o();switch(n.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertex(n,s);case r.enumMultiPoint:return this.multiVertexGetNearestVertex(n,s);case r.enumPolyline:case r.enumPolygon:return this.multiPathGetNearestCoordinate(n,s,i,a);default:t("")}}getNearestVertex(n,s){if(s.isNAN()&&e("NAN xy coordinates are not allowed"),n.isEmpty())return o();switch(n.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertex(n,s);case r.enumMultiPoint:case r.enumPolyline:case r.enumPolygon:return this.multiVertexGetNearestVertex(n,s);default:t("")}}getNearestVertices(n,s,o,i){if(0===i&&e(""),s.isNAN()&&e("NAN xy coordinates are not allowed"),n.isEmpty())return[];switch(n.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertices(n,s,o,i);case r.enumMultiPoint:case r.enumPolyline:case r.enumPolygon:return this.multiVertexGetNearestVertices(n,s,o,i);default:t("")}}multiPathGetNearestCoordinate(t,o,m,l){if(t.getGeometryType()===r.enumPolygon&&m){const e=new s;t.queryEnvelope(e);const r=u(null,e,!1);let n;if(n=c(t,o,l?0:r),0!==n){const e=i(o,-1,0);return l&&(e.m_bRightSide=!0),e}}const g=t.querySegmentIterator(),y=new n;let N=-1,p=-1,d=Number.MAX_VALUE,f=0;for(;g.nextPath();)for(;g.hasNextSegment();){const e=g.nextSegment(),t=e.getClosestCoordinate(o,!1),r=e.getCoord2D(t),s=n.sqrDistance(r,o);s<d?(f=1,y.assign(r),N=g.getStartPointIndex(),p=g.getPathIndex(),d=s):s===d&&f++}-1===N&&e("");const h=i(y,N,Math.sqrt(d));if(l)if(t.getGeometryType()!==r.enumPolygon){let e=!1;if(f>1){const r=a(t,o,N,p);e=0!==r&&3!==r}else{g.resetToVertex(N,p);const t=g.nextSegment();e=0!==a(t,o)}h.m_bRightSide=e}else m||0!==c(t,o,0)&&(h.m_bRightSide=!0);return h}pointGetNearestVertex(e,t){const r=e.getXY(),s=n.distance(r,t);return i(r,0,s)}multiVertexGetNearestVertex(e,t){const r=e.getAttributeStreamRef(0),s=e.getPointCount();let o=-1;const a=new n;let u=Number.MAX_VALUE;const c=new n;for(let e=0;e<s;e++){r.queryPoint2D(2*e,c);const s=n.sqrDistance(c,t);s<u&&(a.assign(c),o=e,u=s)}return i(a,o,Math.sqrt(u))}pointGetNearestVertices(e,t,r,s){const o=[];if(0!==s){const s=r*r,a=e.getXY(),u=n.sqrDistance(a,t);u<=s&&o.push(i(a,0,Math.sqrt(u)))}return o}multiVertexGetNearestVertices(e,t,r,s){const o=[];if(0!==s){const a=e.getAttributeStreamRef(0),u=e.getPointCount();o.length=s+1;const c=r*r;for(let e=0;e<u;e++){const r=a.read(2*e),s=a.read(2*e+1),u=t.x-r,m=t.y-s,l=u*u+m*m;l<=c&&o.push(i(n.construct(r,s),e,Math.sqrt(l)))}o.sort((e,t)=>e.m_distance-t.m_distance)}return o.slice(0,s)}}export{m as O};
