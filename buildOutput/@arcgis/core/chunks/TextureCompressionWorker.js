/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{g as e}from"./assets.js";import{g as t}from"./enums.js";import"../config.js";import"../core/lang.js";import"./object.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"../core/Error.js";import"./Logger.js";import"./string.js";import"./jsonUtils.js";import"./MapUtils.js";import"../core/promiseUtils.js";import"./handleUtils.js";import"./events.js";import"./maybe.js";import"./persistableUrlUtils.js";let r,n,s,a,l=null,i=null;class o{constructor(e,t){this.internalFormat=e,this.compressedTexture=t}}function u(){l=null,s=null,i=null,a=null,r=null,n=null}async function c(e){let r;if(r=e.data instanceof ImageBitmap?function(e){const t=new OffscreenCanvas(e.width,e.height),r=t.getContext("2d");return r.drawImage(e,0,0),r.getImageData(0,0,t.width,t.height).data}(e.data):function(e,t,r,n,s){const a=new Uint8ClampedArray(e).subarray(0,t*r*n);if(!s)return a;const l=new Uint8ClampedArray(a.length),i=t*n;for(let e=0;e<r;e++){const t=e*i,n=(r-e-1)*i;l.set(a.subarray(t,t+i),n)}return l}(e.data,e.width,e.height,e.components,e.needsFlip),e.hasS3TC){i||await m();const n=new Uint8Array(r.length);if(i?.encode(r,e.width,e.height,e.preMultiplyAlpha,n)){const e=function(e){const r=new Int32Array(e.buffer,e.byteOffset,f);let n,s;switch(r[C]){case E:n=8,s=t.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case S:n=16,s=t.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case U:n=16,s=t.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let a=1,l=r[A],i=r[g];(3&l||3&i)&&(l=l+3&-4,i=i+3&-4);const o=l,u=i;r[y]&j&&(a=Math.max(1,r[T]));let c,p,m=e.byteOffset+r[w]+4;const d=[];for(let t=0;t<a;++t)p=(l+3>>2)*(i+3>>2)*n,c=new Uint8Array(e.buffer,m,p),d.push(c),m+=p,l=Math.max(1,l>>1),i=Math.max(1,i>>1);return{textureData:{type:"compressed",levels:d},internalFormat:s,width:o,height:u}}(n),r=[n.buffer];return{result:new o(e?.internalFormat??null,e?.textureData??null),transferList:r}}return{result:new o(null,null)}}if(e.hasETC){if(l||await p(),e.preMultiplyAlpha&&!i&&await m(),e.preMultiplyAlpha){const t=new Uint8ClampedArray(r.length);i?.premultiply(new Uint8Array(r),e.width,e.height,t),r=t}const t=d(r,e.width,e.height,e.hasMipmap),n=t?h(t):null,s=n?.compressedTexture?.levels.map(e=>e.buffer)||[];return{result:new o(n?.internalFormat??null,n?.compressedTexture??null),transferList:s}}return{result:new o(null,null)}}async function p(){l||(l=await(s??=(r??=(async()=>{const t=await import("./basis_encoder.js"),r=await t.default({locateFile:t=>e(`esri/libs/basisu/${t}`)});return r.initializeBasis(),r})(),r)),s=null)}async function m(){i||(i=await(a??=(n??=(async()=>{const t=await import("./dxt_encoder.js");return await t.default({locateFile:t=>e(`esri/libs/dxtEncoder/${t}`)})})(),n)),a=null)}function d(e,t,r,n,s=255,a=0,i=!1,o=!1){if(!l)return null;const u=new l.BasisEncoder;u.setPerceptual(!o),u.setCheckForAlpha(!0),u.setForceAlpha(!1),u.setRenormalize(o),u.setMipGen(n),u.setMipSRGB(!o),u.setCreateKTX2File(!0),u.setKTX2SRGBTransferFunc(!o),u.setQualityLevel(s),u.setCompressionLevel(a);const c=new Uint8Array(e.byteLength);u.setSliceSourceImage(0,new Uint8Array(e),t,r,i);const p=u.encode(c),m=new Uint8Array(c.buffer,0,p),d=new l.KTX2File(new Uint8Array(m));return d.isValid()?(u.delete(),m):(d.close(),d.delete(),u.delete(),null)}function h(e){if(!l)return new o(null,null);const r=new l.KTX2File(new Uint8Array(e));r.startTranscoding();const[n,s]=r.getHasAlpha()?[1,t.COMPRESSED_RGBA8_ETC2_EAC]:[0,t.COMPRESSED_RGB8_ETC2],a=r.getLevels(),i=[];for(let e=0;e<a;e++)i.push(new Uint8Array(r.getImageTranscodedSizeInBytes(e,0,0,n))),r.transcodeImage(i[e],e,0,0,n,0,-1,-1);return r.close(),r.delete(),{internalFormat:s,compressedTexture:{type:"compressed",levels:i}}}const f=31,w=1,y=2,g=3,A=4,T=7,C=21,j=131072;function b(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const E=b("DXT1"),S=b("DXT3"),U=b("DXT5");export{o as TextureCompressionWorkerOutput,c as compress,d as compressRGBADataToKTX2,h as createTextureDataKTX2,u as destroy,p as initializeBasisEncoder,m as initializeDXTEncoder};
