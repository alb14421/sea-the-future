/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import s from"../Color.js";import o from"../Graphic.js";import t from"../core/Accessor.js";import l from"../core/Collection.js";import{l as r}from"./mathUtils.js";import{property as i}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"./Logger.js";import{subclass as a}from"../core/accessorSupport/decorators/subclass.js";import n from"../symbols/PointSymbol3D.js";import m from"../symbols/SimpleFillSymbol.js";import h from"../symbols/TextSymbol.js";import p from"../symbols/TextSymbol3DLayer.js";import y,{L as c}from"../symbols/callouts/LineCallout3D.js";import b from"../symbols/support/Symbol3DVerticalOffset.js";const g=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let u=class extends t{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._symbols=g.map(e=>new m({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}})),this._enabled=!0}initialize(){this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=this.getTiles(),t=new Array,i=new Set(this._labels.size>0?this._labels.keys():this._polygons.keys());e.forEach((a,m)=>{const g=a.lij.toString();i.delete(g);const u=a.measures?.lodLevel??a.level,d=a.geometry;if(this.enablePolygons&&!this._polygons.has(g)){const e=a.polygonSymbol??this._symbols[u%this._symbols.length],s=new o({geometry:d,symbol:e});this._polygons.set(g,s),t.push(s)}if(this.enableLabels){const i=(e=>{if(null!=e.label)return e.label;let s=e.lij.toString();return null!=e.loadPriority&&(s+=` (${e.loadPriority})`),e.measures&&(s+=`[${e.measures.lodLevel}]`),s})(a),u=m/(e.length-1),f=r(0,200,u),w=r(20,6,u)/.75,_=null!=a.loadPriority&&a.loadPriority>=e.length,v=new s([f,_?0:f,_?0:f]),j="3d"===this.view.type?()=>new n({verticalOffset:new b({screenLength:40/.75}),callout:new y({color:new s("white"),border:new c({color:new s("black")})}),symbolLayers:new l([new p({text:i,halo:{color:"white",size:1/.75},material:{color:v},size:w})])}):()=>new h({text:i,haloColor:"white",haloSize:1/.75,color:v,size:w}),S=this._labels.get(g);if(S){const e=j();null!=S.symbol&&JSON.stringify(e)===JSON.stringify(S.symbol)||(S.symbol=e)}else{const e=new o({geometry:d.extent.center,symbol:j()});this._labels.set(g,e),t.push(e)}}});const a=new Array;i.forEach(e=>{const s=this._polygons.get(e);null!=s&&(a.push(s),this._polygons.delete(e));const o=this._labels.get(e);null!=o&&(a.push(o),this._labels.delete(e))}),this.view.graphics.removeMany(a),this.view.graphics.addMany(t)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};e([i({constructOnly:!0})],u.prototype,"view",void 0),e([i({readOnly:!0})],u.prototype,"updating",void 0),e([i()],u.prototype,"enabled",null),u=e([a("esri.views.support.TileTreeDebugger")],u);export{u as T};
