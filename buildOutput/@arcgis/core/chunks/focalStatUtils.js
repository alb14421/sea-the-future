/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import"../core/lang.js";import{J as t}from"./jsonMap.js";import e from"../layers/support/PixelBlock.js";import{i as n}from"./pixelRangeUtils.js";const o=new t({0:"difference",1:"relative-difference",2:"categorical",3:"euclidean-distance",4:"angle-difference",5:"band-with-most-change"},{useNumericKeys:!0}),s=new t({0:"all",1:"changed",2:"unchanged"},{useNumericKeys:!0});function a(t,o,s,a){const[i,l]=t,r=n(s)&&!n(i.pixelType)&&!n(l.pixelType),c=[i.mask,l.mask].filter(t=>t),f=e.combineBandMasks(c),h=t.map(t=>t.pixels[0]),{width:d,height:u}=i,m=e.createEmptyBand(s,d*u);switch(o){case"difference":case"relative-difference":!function(t){const{bands:[e,n],mask:o,isRelative:s,isRoundingNeeded:a,outBand:i}=t,l=e.length;for(let t=0;t<l;t++)if(!o||o[t]){let o=e[t]-n[t];if(s){const s=Math.max(Math.abs(e[t])-Math.abs(n[t]));o=s>0?o/s:0}i[t]=a?Math.round(o):o}}({bands:h,mask:f,outBand:m,isRoundingNeeded:r,isRelative:"relative-difference"===o});break;case"categorical":!function(t){const{bands:[e,n],categoryIndexLookups:[o,s],classNames:[a,i],mask:l,keepMethod:r,outBand:c}=t,f=e.length,h=a.length,d=i.length,u=h*d,m=u+1,p=u+2;for(let t=0;t<f;t++)if(!l||l[t]){const l=e[t],f=n[t],h=o[l],g=s[f],k=a[h],y=i[g];c[t]=null==h||null==g?u:"changed"===r&&k===y?m:"unchanged"===r&&k!==y?p:h*d+g}}({bands:h,mask:f,outBand:m,...a});break;case"euclidean-distance":!function(t){const{pixels:[e,n],mask:o,outBand:s}=t,a=e[0].length,i=e.length;for(let t=0;t<a;t++)if(!o||o[t]){let o=0;for(let s=0;s<i;s++){const a=e[s][t]-n[s][t];o+=a*a}s[t]=Math.sqrt(o)}}({pixels:t.map(t=>t.pixels),mask:f,outBand:m});break;case"angle-difference":!function(t){const{pixels:[e,n],mask:o,outBand:s}=t,a=e[0].length,i=e.length;for(let t=0;t<a;t++)if(!o||o[t]){let o=0,a=0,l=0;for(let s=0;s<i;s++){const i=e[s][t],r=n[s][t];o+=i*r,a+=i*i,l+=r*r}const r=Math.sqrt(a*l);s[t]=r?Math.acos(o/r):1.5707963267948966}}({pixels:t.map(t=>t.pixels),mask:f,outBand:m});break;case"band-with-most-change":!function(t){const{pixels:[e,n],mask:o,outBand:s}=t,a=e[0].length,i=e.length;for(let t=0;t<a;t++)if(!o||o[t]){let o=0,a=0;for(let s=0;s<i;s++){const i=Math.abs(e[s][t]-n[s][t]);i>o&&(o=i,a=s)}s[t]=a}}({pixels:t.map(t=>t.pixels),mask:f,outBand:m})}const p=new e({width:d,height:u,pixels:[m],pixelType:s,mask:f});return p.updateStatistics(),p}function i(t,e,n,o,s){const a=Math.floor(o/2);for(let o=0;o<a;o++)for(let a=0;a<e;a++)t[o*e+a]=t[(s-1-o)*e+a],t[(n-1-o)*e+a]=t[(n-s+o)*e+a];const i=Math.floor(s/2);for(let o=0;o<n;o++){const n=o*e;for(let o=0;o<i;o++)t[n+o]=t[n+s-1-o],t[n+e-o-1]=t[n+e+o-s]}}const l=new t({1:"min",2:"max",3:"mean",4:"stddev",5:"median",6:"majority",7:"minority"},{useNumericKeys:!0});function r(t,e){const{fillNoDataOnly:n}=e,{band:o,width:s,height:a,mask:i,outBand:l}=t;if(n&&!i)return void l.set(o);const{statisticsType:r,kernelRows:c,kernelCols:f}=e,h="stddev"===r,d=s*a,u=new Float64Array(d),m=new Float64Array(d),p=new Uint32Array(d);for(let t=0;t<a;t++){const e=t*s;let n=0,a=0,l=0;for(let t=0;t<f;t++)i&&!i[e+t]||(n+=o[e+t],h&&(a+=o[e+t]**2),l++);u[e]=n,m[e]=a,p[e]=l;for(let t=1;t<=s-f;t++){const s=e+t-1,r=s+f;i?(i[s]&&(l--,n-=o[s],h&&(a-=o[s]**2)),i[r]&&(l++,n+=o[r],h&&(a+=o[r]**2))):(n-=o[s],n+=o[r],h&&(a-=o[s]**2,a+=o[r]**2)),u[e+t]=n,p[e+t]=l,h&&(m[e+t]=a)}}const g=new Float64Array(d),k=new Float64Array(d),y=new Uint32Array(d),w=c*s;for(let t=0;t<=s-f;t++){let e=0,n=0,o=0;for(let a=0;a<c;a++){const i=a*s+t;e+=u[i],o+=p[i],h&&(n+=m[i])}g[t]=e,k[t]=n,y[t]=o;for(let i=1;i<=a-c;i++){const a=(i-1)*s+t,l=a+w;e-=u[a],e+=u[l],o-=p[a],o+=p[l],h&&(n-=m[a],n+=m[l]),g[i*s+t]=e,k[i*s+t]=n,y[i*s+t]=o}}const M=Math.floor(c/2),b=Math.floor(f/2);for(let t=M;t<a-M;t++){const e=t*s;for(let o=b;o<s-b;o++){const a=(t-M)*s+o-b,r=y[a];if(0===r||n&&(!i||i[e+o]))continue;const c=g[a]/r,f=h?Math.sqrt((k[a]-g[a]*c)/r):c;l[e+o]=f,i&&(i[e+o]=255)}}}function c(t,e){const{fillNoDataOnly:n}=e,{band:o,width:s,height:a,mask:i,outBand:l}=t;if(n&&!i)return void l.set(o);const{kernelRows:r,kernelCols:c,statisticsType:f}=e,h=Math.floor(r/2),d=Math.floor(c/2),u="min"===f,m=l.slice(),p=new Uint32Array(s*a);for(let t=h;t<a-h;t++){const e=t*s;for(let t=d;t<s-d;t++){let n=u?Number.MAX_VALUE:-Number.MAX_VALUE,a=0;for(let l=0;l<r;l++)for(let r=0;r<c;r++){const c=e+t+(l-h)*s+r-d;i&&!i[c]||(n=u?Math.min(n,o[c]):Math.max(n,o[c]),a++)}i?(m[e+t]=0===a?0:n,p[e+t]=a):l[e+t]=0===a?0:n}}if(i)for(let t=h;t<a-h;t++){const e=t*s;for(let t=d;t<s-d;t++)if(p[e+t]){if(n&&i[e+t])continue;l[e+t]=m[e+t],i[e+t]=255}}}function f(t,e){const{fillNoDataOnly:n}=e,{band:o,width:s,height:a,mask:i,outBand:l}=t;if(n&&!i)return void l.set(o);const{kernelRows:r,kernelCols:c}=e,f=Math.floor(r/2),h=Math.floor(c/2),d=l.slice(),u=new Uint32Array(s*a);for(let t=f;t<a-f;t++){const e=t*s;for(let t=h;t<s-h;t++){if(n&&i?.[e+t])continue;const a=[];for(let n=0;n<r;n++)for(let l=0;l<c;l++){const r=e+t+(n-f)*s+l-h;i&&!i[r]||a.push(o[r])}a.length&&(a.sort((t,e)=>t-e),i?(d[e+t]=a[Math.floor((a.length-1)/2)],u[e+t]=a.length):l[e+t]=a[Math.floor((a.length-1)/2)])}}if(i)for(let t=f;t<a-f;t++){const e=t*s;for(let t=h;t<s-h;t++)if(u[e+t]){if(n&&i[e+t])continue;l[e+t]=d[e+t],i[e+t]=255}}}function h(t,e){const{fillNoDataOnly:n}=e,{band:o,width:s,height:a,mask:i,outBand:l}=t;if(n&&!i)return void l.set(o);const{kernelRows:r,kernelCols:c}=e,f=Math.floor(r/2),h=Math.floor(c/2),d="majority"===e.statisticsType,u=r*c,m=l.slice(),p=new Uint32Array(s*a);for(let t=f;t<a-f;t++){const e=t*s;for(let t=h;t<s-h;t++){if(n&&i?.[e+t])continue;const a=new Map;for(let n=0;n<r;n++)for(let l=0;l<c;l++){const r=e+t+(n-f)*s+l-h;if(i&&!i[r])continue;const c=o[r];a.set(c,a.has(c)?a.get(c)+1:1)}if(0===a.size)continue;let g=0,k=0,y=d?0:u+1;for(const t of a.keys())k=a.get(t),d===k>y&&(y=k,g=t);i?(m[e+t]=g,p[e+t]=a.size):l[e+t]=g}}if(i)for(let t=f;t<a-f;t++){const e=t*s;for(let t=h;t<s-h;t++)if(p[e+t]){if(n&&i[e+t])continue;l[e+t]=m[e+t],i[e+t]=255}}}function d(t,n){const{mask:o}=t,{fillNoDataOnly:s}=n;if(s&&!o)return t;const{pixels:a,width:l,height:d,bandMasks:u,pixelType:m}=t,p=a.length,g=l*d,k=[],{kernelRows:y,kernelCols:w,statisticsType:M,mirrorEdges:b}=n;if(s&&!o)return t;const x=n.outputPixelType??m,B=[];for(let t=0;t<p;t++){const m=a[t],p=e.createEmptyBand(x,g);s&&p.set(m);const A=u?.[t]??o,N=A?.slice()??null,v={band:m,width:l,height:d,mask:N,outBand:p};switch(M){case"min":case"max":c(v,n);break;case"mean":case"stddev":r(v,n);break;case"median":f(v,n);break;case"majority":case"minority":h(v,n)}b&&!s&&i(p,l,d,y,w),k.push(p),N&&B.push(N)}let A=B[0]??o;B.length!==p&&(B.length=0),p>1&&u?.length&&(A=e.combineBandMasks(u));const N=new e({pixelType:x,width:l,height:d,pixels:k,bandMasks:u&&B.length?B:null,mask:A});return N.updateStatistics(),N}export{a,d as b,o as c,s as k,i as m,l as s};
