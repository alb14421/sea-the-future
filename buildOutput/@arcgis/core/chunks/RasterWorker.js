/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import r from"../geometry/Extent.js";import t from"../geometry/Point.js";import s from"../geometry/operators/support/GeographicTransformation.js";import e from"../layers/support/PixelBlock.js";import{d as o,R as i}from"./RasterSymbolizer.js";import{c as m,b as p,l as a,s as l,n,m as c,f as j,h as f,i as u}from"./vectorFieldUtils.js";import{c as y}from"./rasterFunctionHelper.js";import{l as d,j as S}from"./rasterProjectionHelper.js";import{h as g,j as h}from"./rasterRendererChecks.js";import{B as x,P as k,G as O}from"./GCSShiftTransform.js";import{_ as b}from"./tslib.es6.js";import"./Logger.js";import"../core/lang.js";import"../core/Error.js";import{e as B}from"./enumeration.js";import{subclass as P}from"../core/accessorSupport/decorators/subclass.js";import{a as U}from"./dataUtils.js";import"./string.js";import"./object.js";import"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import"./MapUtils.js";import"./get.js";import"./utils.js";import"./handleUtils.js";import"./metadata.js";import"../config.js";import"../geometry/Geometry.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"./maybe.js";import"./Lifecycle.js";import"./ObjectPool.js";import"./ObservableBase.js";import"./tracking.js";import"./watch.js";import"../core/scheduling.js";import"./nextTick.js";import"./PooledArray.js";import"../core/promiseUtils.js";import"./events.js";import"./SetUtils.js";import"./SimpleTrackingTarget.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./unitUtils.js";import"./jsonMap.js";import"./pe.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"./jsonUtils.js";import"./persistableUrlUtils.js";import"./writer.js";import"./Warning.js";import"../geometry/support/webMercatorUtils.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/operators/support/GeographicTransformationStep.js";import"./pixelRangeUtils.js";import"./_commonjsHelpers.js";import"../layers/support/RasterInfo.js";import"../layers/support/RasterBandInfo.js";import"./rasterEnums.js";import"../layers/support/RasterSensorInfo.js";import"./colorRampUtils.js";import"./colorUtils2.js";import"../Color.js";import"./colorUtils.js";import"./mathUtils.js";import"./vec4.js";import"./common.js";import"./vec4f64.js";import"../layers/support/rasterFunctionConstants.js";import"../geometry/support/jsonUtils.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./coordsUtils.js";import"./extentUtils.js";import"./boundsUtils.js";import"./aaBoundingRect.js";import"../geometry/Polyline.js";import"./typeUtils.js";import"./clipUtils.js";import"./colorRamps.js";import"../rest/support/AlgorithmicColorRamp.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";import"../layers/support/Field.js";import"./domains.js";import"../layers/support/CodedValueDomain.js";import"../layers/support/Domain.js";import"../layers/support/InheritedDomain.js";import"../layers/support/RangeDomain.js";import"./fieldType.js";import"./focalStatUtils.js";import"./projectionUtils.js";import"./SimpleObservable.js";import"./vec3f64.js";import"./projectBuffer.js";import"./geodesicConstants.js";import"./projectXYZToVector.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"./zscale.js";import"./stretchRendererUtils.js";var N;let v=N=class extends x{constructor(){super(...arguments),this.type="identity"}clone(){return new N}};b([B({IdentityXform:"identity"})],v.prototype,"type",void 0),v=N=b([P("esri.layers.support.rasterTransforms.IdentityTransform")],v);const T={GCSShiftXform:O,IdentityXform:v,PolynomialXform:k};function w(r){if(!r)return{result:null,transferList:[]};const{pixelBlock:t,transferList:s}=r.getTransferableObject();return{result:t,transferList:s}}class J{convertVectorFieldData(r){const t=e.fromJSON(r.pixelBlock),s=w(m(t,r.type));return Promise.resolve(s)}convertPixelBlockToFeatures(t){const s=p({pixelBlock:e.fromJSON(t.pixelBlock),extent:r.fromJSON(t.extent),fieldNames:t.fieldNames,skipFactor:t.skipFactor,skipSpatialReference:!0,pixelIdOffset:t.pixelIdOffset,imageRowSize:t.imageRowSize});return Promise.resolve(s)}computeStatisticsHistograms(r){const t=e.fromJSON(r.pixelBlock),s=g(t,{histogramSize:r.histogramSize,includeSkewnessKurtosis:r.includeSkewnessKurtosis});return Promise.resolve(s)}async decode(r){return w(await o(r.data,r.options))}symbolize(t){t.pixelBlock=e.fromJSON(t.pixelBlock),t.extent=t.extent?r.fromJSON(t.extent):null;const s=w(this.symbolizer.symbolize(t));return Promise.resolve(s)}highlightPixels(r){const t=e.fromJSON(r.pixelBlock),s=e.fromJSON(r.renderedPixelBlock);return a(t,s,r.highlightOptions),Promise.resolve(s.toJSON())}async updateSymbolizer(r){this.symbolizer=i.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}async updateRasterFunction(r){this.rasterFunction=y(r.rasterFunctionJSON)}async process(s){return w(this.rasterFunction.process({extent:r.fromJSON(s.extent),primaryPixelBlocks:s.primaryPixelBlocks.map(r=>null!=r?e.fromJSON(r):null),primaryPixelSizes:s.primaryPixelSizes?.map(r=>null!=r?t.fromJSON(r):null),primaryRasterIds:s.primaryRasterIds}))}stretch(r){const t=w(this.symbolizer.simpleStretch(e.fromJSON(r.srcPixelBlock),r.stretchParams));return Promise.resolve(t)}estimateStatisticsHistograms(r){const t=h(e.fromJSON(r.srcPixelBlock));return Promise.resolve(t)}split(r){const t=l(e.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel??0,!1===r.useBilinear),s=[];let o;return t&&(o=new Map,t.forEach((r,t)=>{if(r){const{pixelBlock:e,transferList:i}=r.getTransferableObject();o.set(t,e),i.forEach(r=>{s.includes(r)||s.push(r)})}})),Promise.resolve({result:o,transferList:s})}clipTile(r){const t=e.fromJSON(r.pixelBlock),s=w(n({...r,pixelBlock:t}));return Promise.resolve(s)}async mosaicAndTransform(r){const t=r.srcPixelBlocks.map(r=>r?new e(r):null),s=c(t,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let o,i=s;r.coefs&&(i=j(s,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(o=f(r.destDimension,r.gcsGrid),i=u(i,r.isUV?"vector-uv":"vector-magdir",o));const{result:m,transferList:p}=w(i);return{result:{pixelBlock:m,localNorthDirections:o},transferList:p}}async createFlowMesh(r,t){const s={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:e,indexData:o}=await U(r.meshType,r.simulationSettings,s,t.signal);return{result:{vertexBuffer:e.buffer,indexBuffer:o.buffer},transferList:[e.buffer,o.buffer]}}async getProjectionOffsetGrid(t){const e=r.fromJSON(t.projectedExtent),o=r.fromJSON(t.srcBufferExtent);let i=null;t.datumTransformationSteps?.length&&(i=new s({steps:t.datumTransformationSteps})),await d();const m=t.rasterTransform?function(r){const t=r?.type;if(!t)return null;const s=T[r?.type];if(s){const t=new s;return t.read(r),t}return null}(t.rasterTransform):null;return S({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:i,rasterTransform:m})}}export{J as default};
