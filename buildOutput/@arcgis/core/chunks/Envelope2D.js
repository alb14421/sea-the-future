/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{P as i,t,m as s,s as m,a as h,g as x}from"./Point2D.js";class n{static construct(i,t,s,m){return new n(i,t,s,m)}constructor(i,t,s,m){this.m_EnvelopeType=2,void 0===i?(this.xmin=Number.NaN,this.ymin=Number.NaN,this.xmax=Number.NaN,this.ymax=Number.NaN):"number"==typeof i?(this.xmin=i,this.ymin=t,this.xmax=s,this.ymax=m):(this.xmin=i.xmin,this.ymin=i.ymin,this.xmax=i.xmax,this.ymax=i.ymax),this.normalize()}static constructEmpty(){return new n(Number.NaN,Number.NaN,Number.NaN,Number.NaN)}clone(){return new n(this)}assign(i){return this.xmin=i.xmin,this.xmax=i.xmax,this.ymin=i.ymin,this.ymax=i.ymax,this}width(){return this.xmax-this.xmin}height(){return this.ymax-this.ymin}maxDimension(){return Math.max(this.width(),this.height())}minDimension(){return Math.min(this.width(),this.height())}sqrDiagonal(){const i=this.width(),t=this.height();return i*i+t*t}diagonal(){return Math.sqrt(this.sqrDiagonal())}getCenterX(){return.5*(this.xmin+this.xmax)}getCenterY(){return.5*(this.ymin+this.ymax)}getCenter(){return i.construct(this.getCenterX(),this.getCenterY())}queryCenter(i){i.x=.5*(this.xmin+this.xmax),i.y=.5*(this.ymin+this.ymax)}setEmpty(){this.xmin=Number.NaN,this.ymin=Number.NaN,this.xmax=Number.NaN,this.ymax=Number.NaN}setInfinite(){this.xmin=Number.NEGATIVE_INFINITY,this.xmax=Number.POSITIVE_INFINITY,this.ymin=Number.NEGATIVE_INFINITY,this.ymax=Number.POSITIVE_INFINITY}isDegenerate(i){return!this.isEmpty()&&(this.width()<=i||this.height()<=i)}isZero(){return!(this.isEmpty()||this.width()&&this.height())}isEmpty(){return Number.isNaN(this.xmin)||Number.isNaN(this.ymin)||Number.isNaN(this.xmax)||Number.isNaN(this.ymax)}mergeNeCoords(i,t){this.xmin>i?this.xmin=i:this.xmax<i&&(this.xmax=i),this.ymin>t?this.ymin=t:this.ymax<t&&(this.ymax=t)}mergeNe(i){this.mergeNeCoords(i.x,i.y)}mergeCoords(i,t){this.isEmpty()?(this.xmin=i,this.ymin=t,this.xmax=i,this.ymax=t):(this.xmin>i?this.xmin=i:this.xmax<i&&(this.xmax=i),this.ymin>t?this.ymin=t:this.ymax<t&&(this.ymax=t))}merge(i){this.mergeCoords(i.x,i.y)}mergeEnvelope2D(i){i.isEmpty()||(this.mergeCoords(i.xmin,i.ymin),this.mergeNeCoords(i.xmax,i.ymax))}mergePoints(i,t){for(let s=0;s<t;){if(!this.isEmpty()){for(let m=s;m<t;m++)this.mergeNe(i[m]);break}this.setCoords(i[s]),s++}}mergePointsInterleaved(i,t,s){for(let m=2*t,h=m+2*s;m<h;m+=2)this.mergeCoords(i.read(m),i.read(m+1))}inflateCoords(i,t){this.isEmpty()||(this.xmin-=i,this.xmax+=i,this.ymin-=t,this.ymax+=t,(this.xmin>this.xmax||this.ymin>this.ymax)&&this.setEmpty())}getInflatedCoords(i,t){const s=this.clone();return s.inflateCoords(i,t),s}inflate(i){this.inflateCoords(i,i)}getInflated(i){const t=this.clone();return t.inflateCoords(i,i),t}zoom(i,t){this.isEmpty()||this.setCoords({center:this.getCenter(),width:i*this.width(),height:t*this.height()})}scale(i){i<0&&this.setEmpty(),this.xmin*=i,this.xmax*=i,this.ymin*=i,this.ymax*=i}equals(i,t){return!(!this.isEmpty()||!i.isEmpty())||(t?Math.abs(this.xmin-i.xmin)<=t&&Math.abs(this.ymin-i.ymin)<=t&&Math.abs(this.xmax-i.xmax)<=t&&Math.abs(this.ymax-i.ymax)<=t:this.xmin===i.xmin&&this.ymin===i.ymin&&this.xmax===i.xmax&&this.ymax===i.ymax)}setCoords(i){void 0!==i.xmin?(this.xmin=i.xmin,this.xmax=i.xmax,this.ymin=i.ymin,this.ymax=i.ymax):void 0!==i.x?(this.xmin=i.x,this.xmax=i.x,this.ymin=i.y,this.ymax=i.y):void 0!==i.pt1?(this.xmin=i.pt1.x,this.ymin=i.pt1.y,this.xmax=i.pt2.x,this.ymax=i.pt2.y,this.normalize()):void 0!==i.env2D?(this.xmin=i.env2D.xmin,this.xmax=i.env2D.xmax,this.ymin=i.env2D.ymin,this.ymax=i.env2D.ymax,this.normalize()):void 0!==i.pt?(this.xmin=i.pt.x,this.xmax=i.pt.x,this.ymin=i.pt.y,this.ymax=i.pt.y):void 0!==i.center?(this.xmin=i.center.x-.5*i.width,this.xmax=this.xmin+i.width,this.ymin=i.center.y-.5*i.height,this.ymax=this.ymin+i.height,this.normalize()):t("unrecognized input type for setCoords"),this.normalize()}queryIntervalX(i){this.isEmpty()?i.setEmpty():i.setCoords(this.xmin,this.xmax)}queryIntervalY(i){this.isEmpty()?i.setEmpty():i.setCoords(this.ymin,this.ymax)}setFromPoints(i,t){if(0===t)return void this.setEmpty();if(Array.isArray(i)){const s=i;this.setCoords(s[0]);for(let i=1;i<t;){if(!this.isEmpty()){for(let m=i;m<t;m++)this.mergeNe(s[m]);return}this.setCoords(s[i]),i++}return}const s=i;this.setCoords({x:s[0],y:s[1]});for(let i=1,m=2*t;i<m;i+=2){if(!this.isEmpty()){for(let m=i,h=2*t;m<h;m+=2)this.mergeNeCoords(s[m],s[m+1]);return}this.setCoords({x:s[i],y:s[i+1]}),i+=2}}normalize(){let i=!1;this.xmin<=this.xmax||([this.xmin,this.xmax]=[this.xmax,this.xmin],i=!0),this.ymin<=this.ymax||([this.ymin,this.ymax]=[this.ymax,this.ymin],i=!0),!i||this.xmin<=this.xmax&&this.ymin<=this.ymax||this.setEmpty()}isValid(){return this.isEmpty()||this.xmin<=this.xmax&&this.ymin<=this.ymax}getLowerLeft(){return new i(this.xmin,this.ymin)}getLowerRight(){return new i(this.xmax,this.ymin)}getUpperLeft(){return new i(this.xmin,this.ymax)}getUpperRight(){return new i(this.xmax,this.ymax)}move(i,t){this.isEmpty()||(this.xmin+=i,this.ymin+=t,this.xmax+=i,this.ymax+=t)}centerAtCoords(i,t){this.move(i-this.getCenterX(),t-this.getCenterY())}centerAt(i){this.centerAtCoords(i.x,i.y)}containsCoords(i,t){return i>=this.xmin&&i<=this.xmax&&t>=this.ymin&&t<=this.ymax}contains(i){return this.containsCoords(i.x,i.y)}containsEnvelope(i){return i.xmin>=this.xmin&&i.xmax<=this.xmax&&i.ymin>=this.ymin&&i.ymax<=this.ymax}containsExclusiveCoords(i,t){return i>this.xmin&&i<this.xmax&&t>this.ymin&&t<this.ymax}containsExclusive(i){return this.containsExclusiveCoords(i.x,i.y)}containsExclusiveEnvelope(i){return i.xmin>this.xmin&&i.xmax<this.xmax&&i.ymin>this.ymin&&i.ymax<this.ymax}isIntersecting(i){return(this.xmin<=i.xmin?this.xmax>=i.xmin:i.xmax>=this.xmin)&&(this.ymin<=i.ymin?this.ymax>=i.ymin:i.ymax>=this.ymin)}isIntersectingNe(i){return(this.xmin<=i.xmin?this.xmax>=i.xmin:i.xmax>=this.xmin)&&(this.ymin<=i.ymin?this.ymax>=i.ymin:i.ymax>=this.ymin)}intersect(i){if(this.isEmpty())return!1;if(i.isEmpty())return this.setEmpty(),!1;i.xmin>this.xmin&&(this.xmin=i.xmin),i.xmax<this.xmax&&(this.xmax=i.xmax),i.ymin>this.ymin&&(this.ymin=i.ymin),i.ymax<this.ymax&&(this.ymax=i.ymax);const t=this.xmin<=this.xmax&&this.ymin<=this.ymax;return t||this.setEmpty(),t}queryCorner(t){switch(3&t){case 0:return new i(this.xmin,this.ymin);case 1:return new i(this.xmin,this.ymax);case 2:return new i(this.xmax,this.ymax);default:return new i(this.xmax,this.ymin)}}queryCorners(i){i[0].setCoords(this.xmin,this.ymin),i[1].setCoords(this.xmin,this.ymax),i[2].setCoords(this.xmax,this.ymax),i[3].setCoords(this.xmax,this.ymin)}queryCornersReversed(i){i[0].setCoords(this.xmin,this.ymin),i[1].setCoords(this.xmax,this.ymin),i[2].setCoords(this.xmax,this.ymax),i[3].setCoords(this.xmin,this.ymax)}reaspect(i,t){if(this.isEmpty())return;const s=i/t,m=.5*this.width(),h=.5*this.height()*s;if(m<=h){const i=this.getCenterX();this.xmin=i-h,this.xmax=i+h}else{const i=m/s,t=this.getCenterY();this.ymin=t-i,this.ymax=t+i}this.normalize()}getArea(){return this.isEmpty()?0:this.width()*this.height()}getLength(){return this.isEmpty()?0:2*(this.width()+this.height())}clipCode(i){return(i.x<this.xmin?1:0)|(i.x>this.xmax?1:0)<<1|(i.y<this.ymin?1:0)<<2|(i.y>this.ymax?1:0)<<3}clipLine(i,t){let s=this.clipCode(i),m=this.clipCode(t);if(s&m)return 0;if(!(s|m))return 4;const h=(s?1:0)|(m?2:0);do{const h=t.x-i.x,x=t.y-i.y;if(Math.abs(h)>Math.abs(x)?s&n.XMASK?(s&n.XLESSXMIN?(i.y+=x*(this.xmin-i.x)/h,i.x=this.xmin):(i.y+=x*(this.xmax-i.x)/h,i.x=this.xmax),s=this.clipCode(i)):m&n.XMASK?(m&n.XLESSXMIN?(t.y+=x*(this.xmin-t.x)/h,t.x=this.xmin):(t.y+=x*(this.xmax-t.x)/h,t.x=this.xmax),m=this.clipCode(t)):s?(s&n.YLESSYMIN?(i.x+=h*(this.ymin-i.y)/x,i.y=this.ymin):(i.x+=h*(this.ymax-i.y)/x,i.y=this.ymax),s=this.clipCode(i)):(m&n.YLESSYMIN?(t.x+=h*(this.ymin-t.y)/x,t.y=this.ymin):(t.x+=h*(this.ymax-t.y)/x,t.y=this.ymax),m=this.clipCode(t)):s&n.YMASK?(s&n.YLESSYMIN?(i.x+=h*(this.ymin-i.y)/x,i.y=this.ymin):(i.x+=h*(this.ymax-i.y)/x,i.y=this.ymax),s=this.clipCode(i)):m&n.YMASK?(m&n.YLESSYMIN?(t.x+=h*(this.ymin-t.y)/x,t.y=this.ymin):(t.x+=h*(this.ymax-t.y)/x,t.y=this.ymax),m=this.clipCode(t)):s?(s&n.XLESSXMIN?(i.y+=x*(this.xmin-i.x)/h,i.x=this.xmin):(i.y+=x*(this.xmax-i.x)/h,i.x=this.xmax),s=this.clipCode(i)):(m&n.XLESSXMIN?(t.y+=x*(this.xmin-t.x)/h,t.x=this.xmin):(t.y+=x*(this.xmax-t.x)/h,t.x=this.xmax),m=this.clipCode(t)),s&m)return 0}while(s|m);return h}distanceFromEnvelope(i){return Math.sqrt(this.sqrDistanceEnvelope(i,null,null))}distance(i){return Math.sqrt(this.sqrDistance(i))}sqrDistanceEnvelope(i,t,s){if(!t&&!s){if(this.isEmpty()||i.isEmpty())return Number.NaN;let t,s=0,m=0;return t=this.xmin-i.xmax,t>s&&(s=t),t=this.ymin-i.ymax,t>m&&(m=t),t=i.xmin-this.xmax,t>s&&(s=t),t=i.ymin-this.ymax,t>m&&(m=t),s*s+m*m}if(this.isEmpty()||i.isEmpty())return t&&t.setNAN(),s&&s.setNAN(),Number.NaN;let m,h=0,x=0;const n=Math.max(this.xmin,i.xmin),e=Math.max(this.ymin,i.ymin);return t&&t.setCoords(n,e),s&&s.setCoords(n,e),m=this.xmin-i.xmax,m>h&&(h=m,t&&(t.x=this.xmin),s&&(s.x=i.xmax)),m=this.ymin-i.ymax,m>x&&(x=m,t&&(t.y=this.ymin),s&&(s.y=i.ymax)),m=i.xmin-this.xmax,m>h&&(h=m,t&&(t.x=this.xmax),s&&(s.x=i.xmin)),m=i.ymin-this.ymax,m>x&&(x=m,t&&(t.y=this.ymax),s&&(s.y=i.ymin)),h*h+x*x}sqrDistance(i,t){if(void 0===t){if(this.isEmpty()||i.isNAN())return Number.NaN;let t,s=0,m=0;return t=this.xmin-i.x,t>s&&(s=t),t=this.ymin-i.y,t>m&&(m=t),t=i.x-this.xmax,t>s&&(s=t),t=i.y-this.ymax,t>m&&(m=t),s*s+m*m}if(this.isEmpty()||i.isNAN())return t.setNAN(),Number.NaN;t.assign(i);let s,m=0,h=0;return s=this.xmin-i.x,s>m&&(m=s,t.x=this.xmin),s=this.ymin-i.y,s>h&&(h=s,t.y=this.ymin),s=i.x-this.xmax,s>m&&(m=s,t.x=this.xmax),s=i.y-this.ymax,s>h&&(h=s,t.y=this.ymax),m*m+h*h}sqrMaxMinDistanceEnvelope(t){if(this.isEmpty()||t.isEmpty())return Number.NaN;let s=Number.MAX_VALUE;{const m=i.sqrDistanceCoords(this.xmin,this.ymin,t.xmax,t.ymin),h=i.sqrDistanceCoords(this.xmin,this.ymin,t.xmax,t.ymax),x=i.sqrDistanceCoords(this.xmin,this.ymax,t.xmax,t.ymin),n=i.sqrDistanceCoords(this.xmin,this.ymax,t.xmax,t.ymax),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);s=Math.min(r,s)}{const m=i.sqrDistanceCoords(this.xmin,this.ymin,t.xmin,t.ymax),h=i.sqrDistanceCoords(this.xmin,this.ymin,t.xmax,t.ymax),x=i.sqrDistanceCoords(this.xmax,this.ymin,t.xmin,t.ymax),n=i.sqrDistanceCoords(this.xmax,this.ymin,t.xmax,t.ymax),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);s=Math.min(r,s)}{const m=i.sqrDistanceCoords(this.xmax,this.ymin,t.xmin,t.ymin),h=i.sqrDistanceCoords(this.xmax,this.ymin,t.xmin,t.ymax),x=i.sqrDistanceCoords(this.xmax,this.ymax,t.xmin,t.ymin),n=i.sqrDistanceCoords(this.xmax,this.ymax,t.xmin,t.ymax),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);s=Math.min(r,s)}{const m=i.sqrDistanceCoords(this.xmin,this.ymax,t.xmin,t.ymin),h=i.sqrDistanceCoords(this.xmin,this.ymax,t.xmax,t.ymin),x=i.sqrDistanceCoords(this.xmax,this.ymax,t.xmin,t.ymin),n=i.sqrDistanceCoords(this.xmax,this.ymax,t.xmax,t.ymin),e=Math.max(m,h),a=Math.max(x,n),r=Math.max(e,a);s=Math.min(r,s)}return s}sqrMaxDistanceEnvelope(t){if(this.isEmpty()||t.isEmpty())return Number.NaN;let m=0;const h=s(i,4);this.queryCorners(h);const x=s(i,4);t.queryCorners(x);for(let t=0;t<4;t++)for(let s=0;s<4;s++){const n=i.sqrDistance(h[t],x[s]);n>m&&(m=n)}return m}sqrMaxMinDistance(t){const s=i.sqrDistance(t,this.getLowerLeft()),m=i.sqrDistance(t,this.getUpperLeft()),h=i.sqrDistance(t,this.getLowerRight()),x=i.sqrDistance(t,this.getUpperRight());let n,e=Math.max(s,m);return n=Math.max(s,h),e>n&&(e=n),n=Math.max(m,x),e>n&&(e=n),n=Math.max(h,x),e>n&&(e=n),e}sqrMinDistance(i){return this.contains(i)?0:this.sqrDistance(i)}sqrMaxDistance(t){let s=i.sqrDistance(t,this.getLowerLeft());return s=Math.max(i.sqrDistance(t,this.getUpperLeft()),s),s=Math.max(i.sqrDistance(t,this.getUpperRight()),s),s=Math.max(i.sqrDistance(t,this.getLowerRight()),s),s}snapToBoundary(i){if(i.isNAN())return!1;if(this.isEmpty())return i.setNAN(),!0;let t=!0;if(i.x<this.xmin?i.x=this.xmin:i.x>this.xmax?i.x=this.xmax:t=!1,i.y<this.ymin?i.y=this.ymin:i.y>this.ymax?i.y=this.ymax:t=!1,t)return!0;if(i.x===this.xmin||i.x===this.xmax||i.y===this.ymin||i.y===this.ymax)return!1;const s=this.xmax-i.x,m=i.x-this.xmin,h=this.ymax-i.y,x=i.y-this.ymin;return Math.max(s,m)>Math.max(h,x)?i.y=x<h?this.ymin:this.ymax:i.x=m<s?this.xmin:this.xmax,!0}snapClip(t){const s=m(t.x,this.xmin,this.xmax),h=m(t.y,this.ymin,this.ymax);return i.construct(s,h)}boundaryDistance(t){if(this.isEmpty()||t.isNAN())return Number.NaN;if(t.x===this.xmin)return t.y-this.ymin;const s=this.ymax-this.ymin,m=this.xmax-this.xmin;if(t.y===this.ymax)return s+t.x-this.xmin;if(t.x===this.xmax)return s+m+this.ymax-t.y;if(t.y===this.ymin)return 2*s+m+this.xmax-t.x;const h=new i;return h.setCoordsPoint2D(t),this.snapToBoundary(h),this.boundaryDistance(h)}envelopeSide(i){if(this.isEmpty())return-1;let t=this.boundaryDistance(i);const s=this.ymax-this.ymin,m=this.xmax-this.xmin;return t<s?0:(t-=s)<m?1:t-m<s?2:3}querySide(i,t){switch(i){case 0:t.constructFromCoords(this.xmin,this.ymin,this.xmin,this.ymax);break;case 1:t.constructFromCoords(this.xmin,this.ymax,this.xmax,this.ymax);break;case 2:t.constructFromCoords(this.xmax,this.ymax,this.xmax,this.ymin);break;case 3:t.constructFromCoords(this.xmax,this.ymin,this.xmin,this.ymin);break;default:h("query_side")}return t}isPointOnBoundary(i,t){return Math.abs(i.x-this.xmin)<=t||Math.abs(i.x-this.xmax)<=t||Math.abs(i.y-this.ymin)<=t||Math.abs(i.y-this.ymax)<=t}calculateToleranceFromEnvelope(){return this.isEmpty()?x():(Math.abs(this.xmin)+Math.abs(this.xmax)+Math.abs(this.ymin)+Math.abs(this.ymax)+1)*x()}toString(){return`[${this.xmin}, ${this.ymin}, ${this.xmax}, ${this.ymax}]`}}n.XLESSXMIN=1,n.YLESSYMIN=4,n.XMASK=3,n.YMASK=12;export{n as Envelope2D};
