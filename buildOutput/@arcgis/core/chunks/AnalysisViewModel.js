/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{_ as s}from"./tslib.es6.js";import t from"../core/Accessor.js";import{c as e}from"./asyncUtils.js";import"../core/lang.js";import{L as i}from"./Logger.js";import{a as n,r as a}from"./maybe.js";import{throwIfAborted as r,isAbortError as l,isAborted as o}from"../core/promiseUtils.js";import{when as c,watch as h,on as y,syncAndInitial as w,sync as u,whenOnce as p}from"../core/reactiveUtils.js";import{property as v}from"../core/accessorSupport/decorators/property.js";import{subclass as d}from"../core/accessorSupport/decorators/subclass.js";let _=class extends t{constructor(s={}){super(s),this.view=null,this.analysisView=null,this._reconnectViewTask=null,this._forceInteractiveHandle=null,this._changeFromReconnect=!1,this._startUserOperation=null;const t=s?.analysis;null!=t?this.analysis=t:(this._set("analysis",this.constructAnalysis()),this._set("isAnalysisOwner",!0)),null!=s?.visible&&(this.visible=s.visible)}normalizeCtorArgs(s){const{analysis:t,isDefaultViewModel:e,...i}=s;return i}initialize(){const s=()=>{this._changeFromReconnect||this._viewHasAnalysis||this._set("isAnalysisOwner",!1);const s=!this._changeFromReconnect;this._changeFromReconnect=!1,s&&this._scheduleViewReconnect()};this.addHandles([c(()=>null!=this.view&&this.view.ready&&!this.supported,()=>i.getLogger(this).errorOnce(this.unsupportedErrorMessage),w),h(()=>[this.analysis,this._viewHasAnalysis],s,u),y(()=>this.view,"analysis-view-destroy",t=>{t.analysis===this.analysis&&s()}),h(()=>({view:this.view,ready:null!=this.view&&this.view.ready,supported:this.supported}),({view:s},t)=>{const e=t?.view;s!==e&&(this._startUserOperation=n(this._startUserOperation),this._disconnectFromView(e)),this._scheduleViewReconnect()},w)])}destroy(){this._reconnectViewTask=n(this._reconnectViewTask),this._startUserOperation=n(this._startUserOperation),null!=this.analysisView&&(this.analysisView.visible=void 0),this._disconnectFromView(this.view),this._set("view",null),null!=this.analysis&&this.isAnalysisOwner&&(this.analysis.destroy(),this._set("analysis",null))}get supported(){return null==this.view||this.view.type===this.supportedViewType}set visible(s){this._set("visible",s),null!=this.analysisView&&(this.analysisView.visible=s)}get active(){return null!=this.tool&&this.tool.active}get disabled(){return null==this.view||!this.view.ready||!this.supported}set analysis(s){s!==this._get("analysis")&&(this._startUserOperation=n(this._startUserOperation),this._disconnectFromView(this.view),this._setExternalAnalysis(s),this._scheduleViewReconnect())}get ready(){return null!=this.analysisView&&!this.connectingToView}get connectingToView(){return null!=this._reconnectViewTask}get isAnalysisOwner(){return this._get("isAnalysisOwner")}get _viewHasAnalysis(){const{view:s}=this;return null!=s&&s.analyses.includes(this.analysis)}get tool(){return this.analysisView?.tool}clear(){this._startUserOperation=n(this._startUserOperation),this._resetInteractiveCreationState(),null!=this.tool&&null!=this.view&&this.view.activeTool===this.tool&&(this.view.activeTool=null)}async start(){if(!this.visible)return void i.getLogger(this).warn("Cannot start analysis when not visible");this.clear();const s={task:null,abort:null,state:0},t=e(async t=>{if(s.state=1,await p(()=>this.ready,t),s.state=2,null==this.analysisView||null==this.view)return;const e=this.analysisView.tool;null!=e&&(this.view.activeTool=e,c(()=>e.created,()=>{e.active&&null!=this.view&&(this.view.activeTool=null)},{initial:!0,once:!0}))});return s.task=t,s.abort=()=>t.abort(),this._startUserOperation=s,t.promise}onConnectToAnalysisView(s){}onDisconnectFromAnalysisView(){}_scheduleViewReconnect(){this._reconnectViewTask=n(this._reconnectViewTask);const s=e(async t=>{try{await this._reconnectView(t)}catch(s){if(r(t),!l(s))return void i.getLogger(this).warn("Failed to use analysis in view model",s);throw s}finally{s===this._reconnectViewTask&&(this._reconnectViewTask=null)}});this._reconnectViewTask=s}async _reconnectView(s){const{view:t}=this,e=null!=t&&t.ready&&this.supported,i=this.analysis;this._startUserOperation=V(this._startUserOperation),this._disconnectFromView(t),e&&null!=t&&null!=i&&(this.isAnalysisOwner&&(this._changeFromReconnect=!0,t.analyses.add(i)),this.analysisView=await t.whenAnalysisView(i),o(s)?this._startUserOperation=V(this._startUserOperation):(this.analysisView.visible=this.visible,this._forceInteractiveHandle=this.analysisView.forceInteractive(),this.addHandles(this._forceInteractiveHandle),this.onConnectToAnalysisView(this.analysisView)))}_disconnectFromView(s){null!=s&&this.isAnalysisOwner&&s.analyses.includes(this.analysis)&&(this._changeFromReconnect=!0,this.analysis.clear(),s.analyses.remove(this.analysis)),this.onDisconnectFromAnalysisView(),this._forceInteractiveHandle=a(this._forceInteractiveHandle),this.analysisView=null}_setExternalAnalysis(s){null==this.analysisView||this.isAnalysisOwner||(this.analysisView.visible=void 0,this._forceInteractiveHandle=a(this._forceInteractiveHandle)),this.analysisView=null,this._set("isAnalysisOwner",!1),this._set("analysis",s),this._changeFromReconnect=!1}_resetInteractiveCreationState(){this.analysis.clear(),this.tool?.resetCreated()}get testInfo(){}};function V(s){return null!=s&&s.state>=2?(s.abort(),null):s}s([v()],_.prototype,"supported",null),s([v()],_.prototype,"view",void 0),s([v({type:Boolean,value:!0})],_.prototype,"visible",null),s([v()],_.prototype,"active",null),s([v()],_.prototype,"disabled",null),s([v({nonNullable:!0})],_.prototype,"analysis",null),s([v()],_.prototype,"analysisView",void 0),s([v()],_.prototype,"ready",null),s([v()],_.prototype,"connectingToView",null),s([v({readOnly:!0})],_.prototype,"isAnalysisOwner",null),s([v()],_.prototype,"_viewHasAnalysis",null),s([v()],_.prototype,"_reconnectViewTask",void 0),s([v()],_.prototype,"_forceInteractiveHandle",void 0),s([v()],_.prototype,"tool",null),_=s([d("esri.widgets.support.AnalysisViewModel")],_);export{_ as A};
