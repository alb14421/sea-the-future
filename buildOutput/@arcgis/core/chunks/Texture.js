/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import e from"../core/Error.js";import{h as t}from"../core/lang.js";import{L as r}from"./Logger.js";import{a as i}from"./maybe.js";import{h as s}from"./object.js";import{throwIfAborted as a,isAbortError as o}from"../core/promiseUtils.js";import{g as n,S as c,c as l,e as p,P as h,s as m,R as d}from"./enums.js";function u(e){switch(e.getError()){case e.NO_ERROR:return null;case e.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case e.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case e.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case e.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case e.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case e.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}const _=!!t("enable-feature:webgl-debug");function g(){return _}function x(){return _}function T(t,i=g()){if(i){const i=u(t);if(i){const t=(new Error).stack;r.getLogger("esri.views.webgl.checkWebGLError").error(new e("webgl-error","WebGL error occurred",{message:i,stack:t}))}}}function E(e,t,r,i=0){const s=e.gl;e.bindBuffer(r);for(const a of r.layout){const r=t.get(a.name);if(null==r){console.warn(`There is no location for vertex attribute '${a.name}' defined.`);continue}const o=i*a.stride;if(a.count<=4)s.vertexAttribPointer(r,a.count,a.type,a.normalized,a.stride,a.offset+o),s.enableVertexAttribArray(r),a.divisor>0&&s.vertexAttribDivisor(r,a.divisor);else if(9===a.count)for(let e=0;e<3;e++)s.vertexAttribPointer(r+e,3,a.type,a.normalized,a.stride,a.offset+12*e+o),s.enableVertexAttribArray(r+e),a.divisor>0&&s.vertexAttribDivisor(r+e,a.divisor);else if(16===a.count)for(let e=0;e<4;e++)s.vertexAttribPointer(r+e,4,a.type,a.normalized,a.stride,a.offset+16*e+o),s.enableVertexAttribArray(r+e),a.divisor>0&&s.vertexAttribDivisor(r+e,a.divisor);else console.error("Unsupported vertex attribute element count: "+a.count);if(g()){const t=u(e.gl);t&&console.error(`Unable to bind vertex attribute "${a.name}" with baseInstanceOffset ${o}:`,t,a)}}}function R(e){switch(e){case 6406:case 6409:case 6403:case 36244:case c.R8:case c.R8I:case c.R8UI:case c.R8_SNORM:case 36168:return 1;case 6410:case 33319:case 33320:case c.RGBA4:case c.R16F:case c.R16I:case c.R16UI:case c.RG8:case c.RG8I:case c.RG8UI:case c.RG8_SNORM:case c.RGB565:case c.RGB5_A1:case p.DEPTH_COMPONENT16:return 2;case 6407:case 36248:case c.RGB8:case c.RGB8I:case c.RGB8UI:case c.RGB8_SNORM:case c.SRGB8:case p.DEPTH_COMPONENT24:return 3;case 6408:case 36249:case c.RGBA8:case c.R32F:case c.R11F_G11F_B10F:case c.RG16F:case c.R32I:case c.R32UI:case c.RG16I:case c.RG16UI:case c.RGBA8I:case c.RGBA8UI:case c.RGBA8_SNORM:case c.SRGB8_ALPHA8:case c.RGB9_E5:case c.RGB10_A2UI:case c.RGB10_A2:case p.DEPTH_COMPONENT32F:case l.DEPTH24_STENCIL8:return 4;case l.DEPTH32F_STENCIL8:return 5;case c.RGB16F:case c.RGB16I:case c.RGB16UI:return 6;case c.RG32F:case c.RG32I:case c.RG32UI:case c.RGBA16F:case c.RGBA16I:case c.RGBA16UI:return 8;case c.RGB32F:case c.RGB32I:case c.RGB32UI:return 12;case c.RGBA32F:case c.RGBA32I:case c.RGBA32UI:return 16;case n.COMPRESSED_RGB_S3TC_DXT1_EXT:case n.COMPRESSED_RGBA_S3TC_DXT1_EXT:return.5;case n.COMPRESSED_RGBA_S3TC_DXT3_EXT:case n.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case n.COMPRESSED_R11_EAC:case n.COMPRESSED_SIGNED_R11_EAC:case n.COMPRESSED_RGB8_ETC2:case n.COMPRESSED_SRGB8_ETC2:case n.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case n.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return.5;case n.COMPRESSED_RG11_EAC:case n.COMPRESSED_SIGNED_RG11_EAC:case n.COMPRESSED_RGBA8_ETC2_EAC:case n.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}class f{constructor(e=0,t=e){this.width=e,this.height=t,this.type=0,this.target=3553,this.pixelFormat=6408,this.dataType=h.UNSIGNED_BYTE,this.samplingMode=9729,this.wrapMode=10497,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.compareEnabled=!1,this.linearFilterDepth=!1,this.depth=1,this.isImmutable=!1}}const M=()=>r.getLogger("esri/views/webgl/textureUtils");function b(e){const{width:t,height:r,depth:i}=e;(null!=t&&t<0||null!=r&&r<0||null!=i&&i<0)&&M().error("Negative dimension parameters are not allowed!");const{internalFormat:s}=e;if(s&&(A(s)||w(s))){const{linearFilterDepth:t,compareEnabled:r,samplingMode:i,hasMipmap:s}=e;s&&M().error("Depth textures cannot have mipmaps"),t?9729!==i&&9728!==i&&M().error("Depth textures cannot sample mipmaps"):(9728!==i&&M().error("Depth textures without filtering must use NEAREST filtering"),r&&M().error("Depth textures without filtering cannot use compare function"))}}function A(e){return s(p,e)}function w(e){return s(l,e)}function D(e){return null!=e&&s(n,e)}function I(e){return null!=e&&"type"in e&&"compressed"===e.type}function S(e){return null!=e&&!I(e)&&!function(e){return null!=e&&"byteLength"in e}(e)}function F(e){return 32879===e||35866===e}function U(e,t,r,i=1){let s=Math.max(t,r);return 32879===e&&(s=Math.max(s,i)),Math.floor(Math.log2(s))+1}function P(t){if(null!=t.internalFormat)return t.internalFormat;switch(t.dataType){case h.FLOAT:switch(t.pixelFormat){case 6408:return c.RGBA32F;case 6407:return c.RGB32F;default:throw new e("texture:unknown-format","Unable to derive format")}case h.UNSIGNED_BYTE:switch(t.pixelFormat){case 6408:return c.RGBA8;case 6407:return c.RGB8}}const{pixelFormat:r}=t;return t.internalFormat=34041===r?l.DEPTH24_STENCIL8:6402===r?p.DEPTH_COMPONENT24:r,t.internalFormat}class y extends f{constructor(e,t){switch(super(),this.context=e,Object.assign(this,t),this.internalFormat){case c.R16F:case c.R32F:case c.R8_SNORM:case c.R8:this.pixelFormat=6403;break;case c.R8I:case c.R8UI:case c.R16I:case c.R16UI:case c.R32I:case c.R32UI:this.pixelFormat=36244}}static validate(e,t){return new y(e,t)}}const C=!!t("esri-tests-disable-gpu-memory-measurements"),O=()=>r.getLogger("esri/views/webgl/Texture");let G=class t{static{this.TEXTURE_UNIT_FOR_UPDATES=0}static{this.compressionWorkerHandle=null}constructor(t,r=null,i=null){if(this.type=1,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._shadowFilterDirty=!1,this._wasImmutablyAllocated=!1,"context"in t)this._descriptor=t,i=r;else{const i=y.validate(t,r);if(!i)throw new e("texture:invalid-descriptor","Texture descriptor invalid");this._descriptor=i}34067===this._descriptor.target?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return C||(e=this._descriptor).width<=0||e.height<=0||e.depth<=0?0:Math.round(e.width*e.height*e.depth*(e.hasMipmap?4/3:1)*(null==e.internalFormat?4:R(e.internalFormat))*(34067===e.target?6:1));var e}get cachedMemory(){return this.usedMemory}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty||this._shadowFilterDirty}get hasWebGLTextureObject(){return!!this._glName}dispose(){this.abortCompression(),this.hasWebGLTextureObject&&this._descriptor.context?.gl&&(this._descriptor.context.instanceCounter.decrement(d.Texture,this),this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null,this._descriptor=null)}release(){this.dispose()}[Symbol.dispose](){this.dispose()}resize(t,r){const i=this._descriptor;if(i.width!==t||i.height!==r){if(this._wasImmutablyAllocated)throw new e("texture:immutable-resize","Immutable textures can't be resized!");i.width=t,i.height=r,34067===this._descriptor.target?this._setDataCubeMap(null):this.setData(null)}}enableCompression(e){this._descriptor.compress=e}disableCompression(){this._descriptor.compress=void 0}setData(e){this.abortCompression(),!I(e)&&this._descriptor.internalFormat&&s(n,this._descriptor.internalFormat)&&(this._descriptor.internalFormat=void 0),this._setData(e),!I(e)&&this._descriptor.compress&&this._compressOnWorker(e)}updateData(r,i,s,a,o,n,c=0){n||O().error("An attempt to use uninitialized data!"),this.hasWebGLTextureObject||O().error("An attempt to update uninitialized texture!");const l=this._descriptor;l.internalFormat=P(l);const{context:p,pixelFormat:h,dataType:m,target:d,isImmutable:u}=l;if(u&&!this._wasImmutablyAllocated)throw new e("texture:uninitialized","Cannot update immutable texture before allocation!");const _=p.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES,!0);(i<0||s<0||i+a>l.width||s+o>l.height)&&O().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:g}=p;c&&(a&&o||O().warn("Must pass width and height if `UNPACK_SKIP_ROWS` is used"),g.pixelStorei(g.UNPACK_SKIP_ROWS,c)),S(n)?g.texSubImage2D(d,r,i,s,a,o,h,m,n):I(n)?g.compressedTexSubImage2D(d,r,i,s,a,o,l.internalFormat,n.levels[r]):g.texSubImage2D(d,r,i,s,a,o,h,m,n),c&&g.pixelStorei(g.UNPACK_SKIP_ROWS,0),p.bindTexture(_,t.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(r,i,s,a,o,n,c,l){l||O().error("An attempt to use uninitialized data!"),this.hasWebGLTextureObject||O().error("An attempt to update an uninitialized texture!");const p=this._descriptor;p.internalFormat=P(p);const{context:h,pixelFormat:m,dataType:d,isImmutable:u,target:_}=p;if(u&&!this._wasImmutablyAllocated)throw new e("texture:uninitialized","Cannot update immutable texture before allocation!");F(_)||O().warn("Attempting to set 3D texture data on a non-3D texture");const g=h.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES);h.setActiveTexture(t.TEXTURE_UNIT_FOR_UPDATES),(i<0||s<0||a<0||i+o>p.width||s+n>p.height||a+c>p.depth)&&O().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:x}=h;if(I(l))l=l.levels[r],x.compressedTexSubImage3D(_,r,i,s,a,o,n,c,p.internalFormat,l);else{const e=l;x.texSubImage3D(_,r,i,s,a,o,n,c,m,d,e)}h.bindTexture(g,t.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const r=this._descriptor;if(0===r.width||0===r.height)return;if(!r.hasMipmap){if(this._wasImmutablyAllocated)throw new e("texture:immutable-change","Cannot add mipmaps to immutable texture after allocation");r.hasMipmap=!0,this._samplingModeDirty=!0,b(r)}9729===r.samplingMode?(this._samplingModeDirty=!0,r.samplingMode=9985):9728===r.samplingMode&&(this._samplingModeDirty=!0,r.samplingMode=9984);const i=this._descriptor.context.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(t.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(r.target),this._descriptor.context.bindTexture(i,t.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const t=this._descriptor;if(t.hasMipmap){if(this._wasImmutablyAllocated)throw new e("texture:immutable-change","Cannot delete mipmaps to immutable texture after allocation");t.hasMipmap=!1,this._samplingModeDirty=!0,b(t)}9985===t.samplingMode?(this._samplingModeDirty=!0,t.samplingMode=9729):9984===t.samplingMode&&(this._samplingModeDirty=!0,t.samplingMode=9728)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,b(this._descriptor),this._wrapModeDirty=!0)}setShadowFiltering(e){e!==this._descriptor.linearFilterDepth&&(this._descriptor.linearFilterDepth=this._descriptor.compareEnabled=e,this.setSamplingMode(e?9729:9728),b(this._descriptor),this._shadowFilterDirty=!0)}applyChanges(){this._samplingModeDirty&&(this._applySamplingMode(),this._samplingModeDirty=!1),this._wrapModeDirty&&(this._applyWrapMode(),this._wrapModeDirty=!1),this._shadowFilterDirty&&(this._applyShadowMode(),this._shadowFilterDirty=!1)}abortCompression(){this._compressionAbortController=i(this._compressionAbortController)}_setData(r,i){const s=this._descriptor,a=s.context?.gl;if(!a)return;T(a),this.hasWebGLTextureObject||(this._glName=a.createTexture(),s.context.instanceCounter.increment(d.Texture,this)),b(s);const o=s.context.bindTexture(this,t.TEXTURE_UNIT_FOR_UPDATES);s.context.setActiveTexture(t.TEXTURE_UNIT_FOR_UPDATES),this._configurePixelStorage(),T(a);const n=i??s.target,c=F(n);if(S(r))this._setDataFromTexImageSource(r,n);else{const{width:t,height:i,depth:o}=s;if(null==t||null==i)throw new e("texture:missing-size","Width and height must be specified!");if(c&&null==o)throw new e("texture:missing-depth","Depth must be specified!");if(s.internalFormat=P(s),s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(n,s.internalFormat,s.hasMipmap,t,i,o),I(r)){if(!D(s.internalFormat))throw new e("texture:format-mismatch","Attempting to use compressed data with an uncompressed format!");this._setDataFromCompressedSource(r,s.internalFormat,n)}else this._texImage(n,0,s.internalFormat,t,i,o,r),T(a),s.hasMipmap&&this.generateMipmap()}this._applySamplingMode(),this._applyWrapMode(),this._applyAnisotropicFilteringParameters(),this._applyShadowMode(),T(a),s.context.bindTexture(o,t.TEXTURE_UNIT_FOR_UPDATES)}_setDataCubeMap(e=null){for(let t=34069;t<=34074;t++)this._setData(e,t)}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:t,flipped:r,preMultiplyAlpha:i}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_setDataFromTexImageSource(e,t){const{gl:r}=this._descriptor.context,i=this._descriptor;i.internalFormat=P(i);const s=F(t),{width:a,height:o,depth:n}=function(e){let t="width"in e?e.width:e.codedWidth,r="height"in e?e.height:e.codedHeight;return e instanceof HTMLVideoElement&&(t=e.videoWidth,r=e.videoHeight),{width:t,height:r,depth:1}}(e);i.width&&i.height,i.width||(i.width=a),i.height||(i.height=o),s&&i.depth,s&&(i.depth=n),i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(t,i.internalFormat,i.hasMipmap,a,o,n),this._texImage(t,0,i.internalFormat,a,o,n,e),T(r),i.hasMipmap&&(this.generateMipmap(),T(r))}_setDataFromCompressedSource(e,t,r){const i=this._descriptor,{width:s,height:a,depth:o}=i,n=e.levels,c=U(r,s,a,o),l=Math.min(c,n.length)-1;this._descriptor.context.gl.texParameteri(i.target,33085,l),this._forEachMipmapLevel((e,i,s,a)=>{const o=n[Math.min(e,n.length-1)];this._compressedTexImage(r,e,t,i,s,a,o)},l)}_texStorage(t,r,i,s,a,o){const{gl:n}=this._descriptor.context;if(c=r,!(m.includes(c)||A(r)||w(r)))throw new e("texture:missing-format","Immutable textures must have a sized internal format");var c;if(!this._descriptor.isImmutable)return;const l=i?U(t,s,a,o):1;if(F(t)){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");n.texStorage3D(t,l,r,s,a,o)}else n.texStorage2D(t,l,r,s,a);this._wasImmutablyAllocated=!0}_texImage(t,r,i,s,a,o,n){const c=this._descriptor.context.gl,l=F(t),{isImmutable:p,pixelFormat:h,dataType:m}=this._descriptor;if(p){if(null!=n){const i=n;if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.texSubImage3D(t,r,0,0,0,s,a,o,h,m,i)}else c.texSubImage2D(t,r,0,0,s,a,h,m,i)}}else{const p=n;if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.texImage3D(t,r,i,s,a,o,0,h,m,p)}else c.texImage2D(t,r,i,s,a,0,h,m,p)}}_compressedTexImage(t,r,i,s,a,o,n){const c=this._descriptor.context.gl,l=F(t);if(this._descriptor.isImmutable){if(null!=n)if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.compressedTexSubImage3D(t,r,0,0,0,s,a,o,i,n)}else c.compressedTexSubImage2D(t,r,0,0,s,a,i,n)}else if(l){if(null==o)throw new e("texture:missing-depth","Missing depth dimension for 3D texture upload");c.compressedTexImage3D(t,r,i,s,a,o,0,n)}else c.compressedTexImage2D(t,r,i,s,a,0,n)}async _compressOnWorker(e){const{width:r,height:i,context:s,flipped:n,preMultiplyAlpha:c,hasMipmap:l}=this._descriptor,p=this._descriptor.compress?.compressionTracker,h=this._descriptor.compress?.compressionCallback,{compressedTextureETC:m,compressedTextureS3TC:d}=s.capabilities;if(!t.compressionWorkerHandle?.isCompressible(e,this._descriptor)||!m&&!d)return;this.abortCompression();const u=new AbortController;this._compressionAbortController=u,p?.increment();try{let s;e instanceof Uint8Array?s=e.buffer:(s=await createImageBitmap(e,{imageOrientation:n?"flipY":"none"}),a(u));const o={data:s,width:r,height:i,needsFlip:e instanceof Uint8Array&&this.descriptor.flipped,components:6408===this._descriptor.pixelFormat?4:3,preMultiplyAlpha:c,hasMipmap:l,hasETC:!!m,hasS3TC:!!d},p=await t.compressionWorkerHandle.invoke(o,u.signal,"low");if(a(u),p.compressedTexture&&this.hasWebGLTextureObject){const e=this.usedMemory;this._descriptor.internalFormat=p.internalFormat,this._setData(p.compressedTexture),h?.(e-this.usedMemory)}}catch(e){o(e)||O().error("Texture compression failed!")}finally{p?.decrement(),this._compressionAbortController?.signal.aborted&&(this._compressionAbortController=null)}}_forEachMipmapLevel(t,r=1/0){let{width:i,height:s,depth:a,hasMipmap:o,target:n}=this._descriptor;const c=32879===n;if(null==i||null==s||c&&null==a)throw new e("texture:missing-size","Missing texture dimensions for mipmap calculation");for(let e=0;t(e,i,s,a),o&&(1!==i||1!==s||c&&1!==a)&&!(e>=r);++e)i=Math.max(1,i>>1),s=Math.max(1,s>>1),c&&(a=Math.max(1,a>>1))}_applySamplingMode(){const e=this._descriptor,t=e.context?.gl;let r=e.samplingMode,i=e.samplingMode;9985===r||9987===r?(r=9729,e.hasMipmap||(i=9729)):9984!==r&&9986!==r||(r=9728,e.hasMipmap||(i=9728)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,i)}_applyWrapMode(){const e=this._descriptor,t=e.context?.gl;"number"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}_applyShadowMode(){const e=this._descriptor,t=e.context?.gl,r=e.compareEnabled?t.COMPARE_REF_TO_TEXTURE:t.NONE;t.texParameteri(e.target,t.TEXTURE_COMPARE_MODE,r),e.compareEnabled&&t.texParameteri(e.target,t.TEXTURE_COMPARE_FUNC,t.GREATER),T(t)}_applyAnisotropicFilteringParameters(){const e=this._descriptor,t=e.context.capabilities.textureFilterAnisotropic;t&&e.context.gl.texParameterf(e.target,t.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};export{G as T,y as V,f as a,E as b,T as c,x as d,u as e,D as f,R as g,A as h,w as i,g as w};
