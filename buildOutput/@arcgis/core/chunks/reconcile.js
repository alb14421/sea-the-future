/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import r from"../request.js";import s from"../core/Error.js";import{p as o,a as t,e}from"./utils9.js";import{a as i}from"./serverVersionUtils.js";import{_ as p}from"./tslib.es6.js";import{JSONSupport as m}from"../core/JSONSupport.js";import{property as n}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"./Logger.js";import{subclass as c}from"../core/accessorSupport/decorators/subclass.js";import"../config.js";import"./object.js";import"../kernel.js";import"../core/urlUtils.js";import"./jsonUtils.js";import"./string.js";import"./MapUtils.js";import"../core/promiseUtils.js";import"./handleUtils.js";import"./events.js";import"./maybe.js";import"./persistableUrlUtils.js";import"../core/Accessor.js";import"../core/Handles.js";import"./get.js";import"./utils.js";import"./Lifecycle.js";import"./metadata.js";import"./ObjectPool.js";import"./ObservableBase.js";import"./tracking.js";import"./watch.js";import"../core/scheduling.js";import"./nextTick.js";import"./PooledArray.js";import"./SetUtils.js";import"./SimpleTrackingTarget.js";import"./ensureType.js";import"./Warning.js";let a=class extends m{constructor(r){super(r),this.hasConflicts=!1,this.moment=null,this.didPost=!1,this.success=!1}};p([n({type:Boolean,json:{write:!0}})],a.prototype,"hasConflicts",void 0),p([n({type:Date,json:{type:Number,write:{writer:(r,s)=>{s.moment=r?r.getTime():null}}}})],a.prototype,"moment",void 0),p([n({type:Boolean,json:{write:!0}})],a.prototype,"didPost",void 0),p([n({type:Boolean,json:{write:!0}})],a.prototype,"success",void 0),a=p([c("esri.rest.versionManagement.gdbVersion.support.ReconcileResult")],a);const j=new Map;async function l(p,m,n,c){j.has(p)||await i(j,p);const l=j.get(p);if((l?.serverVersion??0)<=11.1)throw new s("reconcile:enterprise-version","versioning API requires ArcGIS Enterprise version 11.2 or higher");if(!m)throw new s("reconcile:missing-guid","guid for version is missing");const u=o(p),d=n.toJSON(),g=t(u.query,{query:e({...d,f:"json"}),...c,method:"post"});m.startsWith("{")&&(m=m.slice(1,-1));const f=`${u.path}/versions/${m}/reconcile`,{data:h}=await r(f,g);return a.fromJSON(h)}export{l as reconcile,j as serverVersionCacheMap};
